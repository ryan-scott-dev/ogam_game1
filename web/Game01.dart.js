// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"":"Object;i,list",
 get$hasNext: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var value, t1;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout0(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout0: function(state0, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.JSInvocationMirror = {"":"Object;memberName>,_internalName,_kind,_liblib0$_arguments,_namedArgumentNames,_namedIndices",
 get$isGetter: function() {
  return $.eq(this._kind, 1);
},
 get$isSetter: function() {
  return $.eq(this._kind, 2);
},
 get$isAccessor: function() {
  return !$.eqB(this._kind, 0);
},
 get$positionalArguments: function() {
  var list, t1, t3, t4, argumentCount, index;
  if (this.get$isGetter() === true)
    return;
  list = [];
  t1 = this._liblib0$_arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.get$positionalArguments$bailout(1, t1, list);
  t3 = t1.length;
  t4 = this._namedArgumentNames;
  t4 = $.getInterceptor$JSStringJSArray(t4).get$length(t4);
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  argumentCount = t3 - t4;
  for (index = 0; index < argumentCount; ++index) {
    if (index >= t1.length)
      throw $.ioore(index);
    list.push(t1[index]);
  }
  return list;
},
 get$positionalArguments$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      list = env1;
      t1 = env0;
      break;
    case 2:
      argumentCount = env2;
      list = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isGetter() === true)
        return;
      list = [];
      t1 = this._liblib0$_arguments;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
      t4 = this._namedArgumentNames;
      argumentCount = $.sub(t3, $.getInterceptor$JSStringJSArray(t4).get$length(t4));
    case 2:
      var list, t1, t3, t4, argumentCount, index;
      state0 = 0;
      for (index = 0; $.ltB(index, argumentCount); ++index)
        list.push($.index(t1, index));
      return list;
  }
},
 get$namedArguments: function() {
  var map, t2, namedArgumentCount, t4, t6, namedArgumentsStartIndex, t1, i, t3, t5;
  if (this.get$isAccessor() === true)
    return;
  map = $.makeLiteralMap([]);
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(1, map);
  t2 = this._namedArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(2, t2, map);
  namedArgumentCount = t2.length;
  t4 = this._liblib0$_arguments;
  if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(4, t2, t4, map, namedArgumentCount);
  t6 = t4.length;
  namedArgumentsStartIndex = t6 - namedArgumentCount;
  for (t1 = map.length, i = 0; i < namedArgumentCount; ++i) {
    t3 = t2[i];
    t5 = namedArgumentsStartIndex + i;
    if (t5 < 0 || t5 >= t6)
      throw $.ioore(t5);
    t5 = t4[t5];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1)
      throw $.ioore(t3);
    map[t3] = t5;
  }
  return map;
},
 get$namedArguments$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      map = env0;
      break;
    case 2:
      map = env1;
      t2 = env0;
      break;
    case 3:
      namedArgumentCount = env2;
      map = env1;
      t2 = env0;
      break;
    case 4:
      namedArgumentCount = env3;
      map = env2;
      t5 = env1;
      t2 = env0;
      break;
    case 5:
      namedArgumentCount = env4;
      map = env3;
      namedArgumentsStartIndex = env2;
      t5 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isAccessor() === true)
        return;
      map = $.makeLiteralMap([]);
    case 1:
      state0 = 0;
      t2 = this._namedArgumentNames;
    case 2:
      state0 = 0;
      namedArgumentCount = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    case 3:
      state0 = 0;
      t5 = this._liblib0$_arguments;
    case 4:
      state0 = 0;
      namedArgumentsStartIndex = $.sub($.getInterceptor$JSStringJSArray(t5).get$length(t5), namedArgumentCount);
    case 5:
      var map, t2, namedArgumentCount, t5, namedArgumentsStartIndex, i;
      state0 = 0;
      for (i = 0; $.ltB(i, namedArgumentCount); ++i)
        $.indexSet(map, $.index(t2, i), $.index(t5, $.add(namedArgumentsStartIndex, i)));
      return map;
  }
}
};

$$.StackTrace = {"":"Object;stack",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : "";
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.Dynamic_ = {"":"Object;"
};

$$.Null = {"":"Object;"
};

$$.CastErrorImplementation = {"":"Object;actualType,expectedType",
 toString$0: function() {
  return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
}
};

$$.ConstantMap = {"":"Object;length>,_jsObject,_liblib0$_keys>",
 containsKey$1: function(key) {
  if (typeof key !== 'string')
    return this.containsKey$1$bailout(1, key);
  if (key === "__proto__")
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 containsKey$1$bailout: function(state0, key) {
  if ($.eqB(key, "__proto__"))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(f, this));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"":"Object;_tag>,_tags,_set>"
};

$$.JSSyntaxRegExp = {"":"Object;_liblib0$_pattern,_multiLine,_ignoreCase",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.index(m, 0);
  t1 = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"":"Object;pattern>,str,start,end,_groups",
 start$0: function() {
  return this.start.call$0();
},
 start$1: function(arg0) {
  return this.start.call$1(arg0);
},
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"":"Object;_re,_str",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"":"Object;_re,_str,_liblib0$_next=,_done",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {"":"Object;start,str,pattern>",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
},
 start$0: function() {
  return this.start.call$0();
},
 start$1: function(arg0) {
  return this.start.call$1(arg0);
}
};

$$._DateImpl = {"":"Object;millisecondsSinceEpoch>,isUtc",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 compareTo$1: function(other) {
  var t1 = this.millisecondsSinceEpoch;
  return $.getInterceptor$JSStringJSNumber(t1).compareTo$1(t1, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
  else
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
},
 add$1: function(duration) {
  var ms, t2;
  ms = this.millisecondsSinceEpoch;
  if (typeof ms !== 'number')
    return this.add$1$bailout2(1, duration, ms);
  t2 = duration.get$inMilliseconds();
  if (typeof t2 !== 'number')
    return this.add$1$bailout2(2, ms, t2);
  return $.Date_Date$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
},
 add$1$bailout2: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      ms = env1;
      duration = env0;
      break;
    case 2:
      t2 = env1;
      ms = env0;
      break;
  }
  switch (state0) {
    case 0:
      ms = this.millisecondsSinceEpoch;
    case 1:
      state0 = 0;
      t2 = duration.get$inMilliseconds();
    case 2:
      var ms, duration, t2;
      state0 = 0;
      return $.Date_Date$fromMillisecondsSinceEpoch($.add(ms, t2), this.isUtc);
  }
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.getInterceptor$JSNumber(t1).abs$0(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 is$Date: true
};

$$.NullThrownError = {"":"Object;",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"":"ArgumentError;message",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"":"Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  t1.i_1 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_1, t2.length); t1.i_1 = $.add(t1.i_1, 1)) {
    if ($.gtB(t1.i_1, 0)) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_1;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_0;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_0 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_0;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_0;
    t4 = $.getInterceptor$JSArray(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_0;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_0 = $.StringBuffer_StringBuffer("");
      t1.i_1 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_1, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); t1.i_1 = $.add(t1.i_1, 1)) {
          if ($.gtB(t1.i_1, 0)) {
            t3 = t1.sb_0;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_0;
          $.getInterceptor$JSArray(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_1)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
      else {
        t3 = t1.sb_0;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_0;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_0;
          $.getInterceptor$JSArray(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_0;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"":"Object;message>",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"":"Object;message>",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"":"Object;message",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {"":"Object;",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$.RuntimeError = {"":"Object;message",
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._ExceptionImplementation = {"":"Object;message",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"":"Object;message",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"":"Object;_pattern,_errmsg",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":"Object;",
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {"":"Object;source,stackTrace>",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor$JSString(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {"":"Object;_isComplete,_value,_exception,_stackTrace,_exceptionHandled,_throwOnException,_successListeners,_exceptionHandlers,_completionListeners",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    this._throwOnException = true;
    this._successListeners.push(onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.CONSTANT0.iterator$0(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.CONSTANT0.iterator$0(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.CONSTANT0.iterator$0(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"":"Object;_futureImpl",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception, null);
}
};

$$._HashMapImpl = {"":"Object;_keys>,_values,_loadLimit,_numberOfEntries,_numberOfDeleted",
 _probeForAdding$1: function(key) {
  var t1, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CONSTANT2)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(2, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      hash = $.and(t1, this._keys.length - 1);
      insertionIndex = -1;
      numberOfProbes = 1;
    case 2:
      var t1, key, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              if (hash !== (hash | 0))
                throw $.iae(hash);
              if (hash < 0 || hash >= t1.length)
                throw $.ioore(hash);
              existingKey = t1[hash];
              if (existingKey == null) {
                if (insertionIndex < 0)
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if (insertionIndex < 0 && existingKey === $.CONSTANT2)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
            case 2:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  if (typeof newNumberOfEntries !== 'number')
    throw $.iae(newNumberOfEntries);
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $.List_List(newCapacity);
  this._values = $.List_List(newCapacity);
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CONSTANT2)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t1 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = key;
    t1 = this._values;
    if (newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CONSTANT2)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.operator$index$1$bailout(1, index);
  if (index < 0)
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout: function(state0, index) {
  var t1;
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index, t1, t3, value;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.remove$1$bailout(1, index);
  if (index >= 0) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.remove$1$bailout(2, index, t1);
    this._numberOfEntries = t1 - 1;
    t3 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t3.length)
      throw $.ioore(index);
    value = t3[index];
    t3[index] = null;
    t3 = this._keys;
    if (index >= t3.length)
      throw $.ioore(index);
    t3[index] = $.CONSTANT2;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 remove$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      index = env0;
      break;
    case 2:
      t1 = env1;
      index = env0;
      break;
  }
  switch (state0) {
    case 0:
      index = this._probeForLookup$1(key);
    case 1:
      state0 = 0;
    case 2:
      var index, t1, t3, value;
      if (state0 === 2 || state0 === 0 && $.geB(index, 0))
        switch (state0) {
          case 0:
            t1 = this._numberOfEntries;
          case 2:
            state0 = 0;
            this._numberOfEntries = $.sub(t1, 1);
            t3 = this._values;
            if (index !== (index | 0))
              throw $.iae(index);
            if (index < 0 || index >= t3.length)
              throw $.ioore(index);
            value = t3[index];
            t3[index] = null;
            t3 = this._keys;
            if (index >= t3.length)
              throw $.ioore(index);
            t3[index] = $.CONSTANT2;
            this._numberOfDeleted = this._numberOfDeleted + 1;
            return value;
        }
      return;
  }
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CONSTANT2)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_0 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $.List_List(8);
  this._values = $.List_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"":"Object;"
};

$$._KeyValuePair = {"":"Object;key>,value="
};

$$._LinkedHashMapImpl = {"":"Object;_list,_map",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    this._list.addLast$1($._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var t1, entry;
  t1 = this._map;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout0(1, key, t1);
  if (key !== (key | 0))
    throw $.iae(key);
  if (key < 0 || key >= t1.length)
    throw $.ioore(key);
  entry = t1[key];
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 operator$index$1$bailout0: function(state0, key, t1) {
  var entry = $.index(t1, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_0 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_0 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"":";",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$1: function(invocation) {
  throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
},
 floor$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0", 0, [], []));
},
 getY$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getY", "getY$0", 0, [], []));
},
 addUnit$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addUnit", "addUnit$1", 0, [$0], []));
},
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
},
 load$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("load", "load$1", 0, [$0], []));
},
 allMatches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
},
 $$dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
},
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2", 0, [$0, $1], []));
},
 operator$xor$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("^", "operator$xor$1", 0, [$0], []));
},
 compareTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
},
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
},
 attack$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("attack", "attack$1", 0, [$0], []));
},
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
},
 _liblib4$_deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_liblib4$_deserializeMap$1", 0, [$0], []));
},
 getHeight$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getHeight", "getHeight$0", 0, [], []));
},
 removeElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("removeElement", "removeElement$1", 0, [$0], []));
},
 operator$sub$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("-", "operator$sub$1", 0, [$0], []));
},
 reduce$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("reduce", "reduce$2", 0, [$0, $1], []));
},
 draw$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("draw", "draw$0", 0, [], []));
},
 getPlayerImage$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getPlayerImage", "getPlayerImage$0", 0, [], []));
},
 concat$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("concat", "concat$1", 0, [$0], []));
},
 every$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("every", "every$1", 0, [$0], []));
},
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
},
 _toList$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_toList", "_toList$0", 0, [], []));
},
 remove$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
},
 remove$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
},
 startsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
},
 getRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
},
 callSync$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
},
 _liblib$_requestAnimationFrame$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_requestAnimationFrame", "_liblib$_requestAnimationFrame$1", 0, [$0], []));
},
 operator$le$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<=", "operator$le$1", 0, [$0], []));
},
 _get_1$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1", 0, [$0], []));
},
 contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
},
 contains$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
},
 createBufferSource$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createBufferSource", "createBufferSource$0", 0, [], []));
},
 unregister$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
},
 handleException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("handleException", "handleException$1", 0, [$0], []));
},
 add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
},
 operator$mul$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("*", "operator$mul$1", 0, [$0], []));
},
 toDouble$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toDouble", "toDouble$0", 0, [], []));
},
 _resetAccumulators$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_resetAccumulators", "_resetAccumulators$0", 0, [], []));
},
 get$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("get", "get$1", 0, [$0], []));
},
 addAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
},
 marchTowards$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("marchTowards", "marchTowards$1", 0, [$0], []));
},
 stringifyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
},
 queryAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("queryAll", "queryAll$1", 0, [$0], []));
},
 onLoad$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onLoad", "onLoad$1", 0, [$0], []));
},
 _complete$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_complete", "_complete$0", 0, [], []));
},
 _update$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_update", "_update$1", 0, [$0], []));
},
 register$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
},
 complete$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
},
 _throwUnmodifiable$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_throwUnmodifiable", "_throwUnmodifiable$0", 0, [], []));
},
 getBoundingClientRect$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getBoundingClientRect", "getBoundingClientRect$0", 0, [], []));
},
 map$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("map", "map$1", 0, [$0], []));
},
 on$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("on", "on$2", 0, [$0, $1], []));
},
 toSendPort$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
},
 abs$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("abs", "abs$0", 0, [], []));
},
 enterScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
},
 $$dom_dispatchEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_dispatchEvent", "$$dom_dispatchEvent$1", 0, [$0], []));
},
 $$dom_setAttribute$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
},
 getX$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getX", "getX$0", 0, [], []));
},
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
},
 requestAnimationFrame$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("requestAnimationFrame", "requestAnimationFrame$1", 0, [$0], []));
},
 addNeighbour$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addNeighbour", "addNeighbour$1", 0, [$0], []));
},
 postMessage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
},
 getScale$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getScale", "getScale$0", 0, [], []));
},
 then$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
},
 indexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
},
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
},
 operator$tdiv$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("~/", "operator$tdiv$1", 0, [$0], []));
},
 _processTimers$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_processTimers", "_processTimers$0", 0, [], []));
},
 operator$indexSet$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("[]=", "operator$indexSet$2", 0, [$0, $1], []));
},
 setScreen$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setScreen", "setScreen$1", 0, [$0], []));
},
 _link$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
},
 removeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("removeAt", "removeAt$1", 0, [$0], []));
},
 operator$shl$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<<", "operator$shl$1", 0, [$0], []));
},
 operator$lt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("<", "operator$lt$1", 0, [$0], []));
},
 runIteration$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
},
 setPosition$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setPosition", "setPosition$2", 0, [$0, $1], []));
},
 show$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("show", "show$0", 0, [], []));
},
 invalidate$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("invalidate", "invalidate$1", 0, [$0], []));
},
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0", 0, [], []));
},
 operator$and$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("&", "operator$and$1", 0, [$0], []));
},
 digitalButtonEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("digitalButtonEvent", "digitalButtonEvent$1", 0, [$0], []));
},
 send$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("send", "send$0", 0, [], []));
},
 resetTarget$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("resetTarget", "resetTarget$0", 0, [], []));
},
 showGame$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("showGame", "showGame$0", 0, [], []));
},
 call$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
},
 call$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
},
 call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
},
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
},
 call$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
},
 $$dom_removeChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
},
 addScreenElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addScreenElement", "addScreenElement$1", 0, [$0], []));
},
 _update_1$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_update_1", "_update_1$1", 0, [$0], []));
},
 toInt$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toInt", "toInt$0", 0, [], []));
},
 toJson$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("toJson", "toJson$0", 0, [], []));
},
 replaceWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
},
 operator$index$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("[]", "operator$index$1", 0, [$0], []));
},
 registerPort$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("registerPort", "registerPort$2", 0, [$0, $1], []));
},
 operator$div$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("/", "operator$div$1", 0, [$0], []));
},
 canAcceptUnits$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("canAcceptUnits", "canAcceptUnits$0", 0, [], []));
},
 _setGlobals$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
},
 operator$ge$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">=", "operator$ge$1", 0, [$0], []));
},
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
},
 runLoadCallbacks$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runLoadCallbacks", "runLoadCallbacks$0", 0, [], []));
},
 gameLoopMouseEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("gameLoopMouseEvent", "gameLoopMouseEvent$1", 0, [$0], []));
},
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
},
 _processInputEvents$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_processInputEvents", "_processInputEvents$0", 0, [], []));
},
 open$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("open", "open$3", 0, [$0, $1, $2], []));
},
 addScreen$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addScreen", "addScreen$1", 0, [$0], []));
},
 hide$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hide", "hide$0", 0, [], []));
},
 alternateNode$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("alternateNode", "alternateNode$1", 0, [$0], []));
},
 start$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("start", "start$0", 0, [], []));
},
 start$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("start", "start$1", 0, [$0], []));
},
 firstMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
},
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
},
 onLoadFailure$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("onLoadFailure", "onLoadFailure$0", 0, [], []));
},
 setScale$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setScale", "setScale$2", 0, [$0, $1], []));
},
 getWidth$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getWidth", "getWidth$0", 0, [], []));
},
 truncate$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0", 0, [], []));
},
 completeException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$1", 0, [$0], []));
},
 completeException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$2", 0, [$0, $1], []));
},
 lookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
},
 click$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("click", "click$0", 0, [], []));
},
 sort$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("sort", "sort$1", 0, [$0], []));
},
 update$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("update", "update$1", 0, [$0], []));
},
 next$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("next", "next$0", 0, [], []));
},
 off$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("off", "off$1", 0, [$0], []));
},
 $$dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
},
 iterator$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("iterator", "iterator$0", 0, [], []));
},
 cleanup$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
},
 $$dom_removeAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeAttribute", "$$dom_removeAttribute$1", 0, [$0], []));
},
 hasMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
},
 $$dom_createEvent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createEvent", "$$dom_createEvent$1", 0, [$0], []));
},
 previousEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
},
 $$dom_getAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
},
 run$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
},
 setText$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setText", "setText$1", 0, [$0], []));
},
 nextDouble$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextDouble", "nextDouble$0", 0, [], []));
},
 substring$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
},
 substring$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
},
 _dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
},
 _liblib4$_dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_liblib4$_dispatch$1", 0, [$0], []));
},
 changePlayer$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("changePlayer", "changePlayer$1", 0, [$0], []));
},
 operator$shr$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">>", "operator$shr$1", 0, [$0], []));
},
 query$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("query", "query$1", 0, [$0], []));
},
 setFontSize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setFontSize", "setFontSize$1", 0, [$0], []));
},
 removeUnit$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("removeUnit", "removeUnit$1", 0, [$0], []));
},
 createGain$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("createGain", "createGain$0", 0, [], []));
},
 charCodeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
},
 _initialize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_initialize", "_initialize$1", 0, [$0], []));
},
 $$dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
},
 $$dom_hasAttribute$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_hasAttribute", "$$dom_hasAttribute$1", 0, [$0], []));
},
 transitionTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("transitionTo", "transitionTo$1", 0, [$0], []));
},
 clear$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
},
 prepend$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
},
 addLast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
},
 move$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("move", "move$2", 0, [$0, $1], []));
},
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
},
 setTarget$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setTarget", "setTarget$1", 0, [$0], []));
},
 close$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
},
 addNeighbours$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addNeighbours", "addNeighbours$1", 0, [$0], []));
},
 updateProgress$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("updateProgress", "updateProgress$2", 0, [$0, $1], []));
},
 $$dom_initCustomEvent$4: function($0, $1, $2, $3) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
},
 forEach$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
},
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
},
 _liblib4$_deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_liblib4$_deserializeHelper$1", 0, [$0], []));
},
 _ensureRequestAnimationFrame$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureRequestAnimationFrame", "_ensureRequestAnimationFrame$0", 0, [], []));
},
 some$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("some", "some$1", 0, [$0], []));
},
 _deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
},
 _liblib4$_deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_liblib4$_deserializeList$1", 0, [$0], []));
},
 endsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
},
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
},
 removeFirst$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
},
 _grow$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
},
 _serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
},
 _liblib4$_serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_liblib4$_serializeList$1", 0, [$0], []));
},
 globalize$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("globalize", "globalize$1", 0, [$0], []));
},
 filter$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("filter", "filter$1", 0, [$0], []));
},
 operator$add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("+", "operator$add$1", 0, [$0], []));
},
 setImage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setImage", "setImage$1", 0, [$0], []));
},
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
},
 _add_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
},
 _advance$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_advance", "_advance$0", 0, [], []));
},
 dispose$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("dispose", "dispose$0", 0, [], []));
},
 containsKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
},
 _ensureCapacity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
},
 removeRange$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("removeRange", "removeRange$2", 0, [$0, $1], []));
},
 _runHelper$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
},
 hasNode$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("hasNode", "hasNode$1", 0, [$0], []));
},
 exitScope$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
},
 operator$gt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror(">", "operator$gt$1", 0, [$0], []));
},
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
},
 _callback$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
},
 _liblib3$_callback$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib3$_callback$1", 0, [$0], []));
},
 _liblib4$_callback$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib4$_callback$2", 0, [$0, $1], []));
},
 process$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
},
 decodeAudioData$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("decodeAudioData", "decodeAudioData$3", 0, [$0, $1, $2], []));
},
 $$dom_createElement$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_createElement", "$$dom_createElement$1", 0, [$0], []));
},
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
},
 ceil$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0", 0, [], []));
},
 lastEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
},
 _matches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_matches", "_matches$1", 0, [$0], []));
},
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
},
 _liblib4$_deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_liblib4$_deserializeRef$1", 0, [$0], []));
},
 moveToBottom$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("moveToBottom", "moveToBottom$0", 0, [], []));
},
 $$dom_appendChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
},
 reset$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
},
 lookupPort$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookupPort", "lookupPort$1", 0, [$0], []));
},
 eval$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1", 0, [$0], []));
},
 connect$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("connect", "connect$3", 0, [$0, $1, $2], []));
},
 isVisible$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isVisible", "isVisible$0", 0, [], []));
},
 moveToTop$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("moveToTop", "moveToTop$0", 0, [], []));
},
 _get_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1", 0, [$0], []));
},
 play$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("play", "play$0", 0, [], []));
},
 removeLast$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
},
 get$fullscreenError: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fullscreenError", "fullscreenError$0", 1, [], []));
},
 get$keyCode: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyCode", "keyCode$0", 1, [], []));
},
 get$_liblib1$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_liblib1$_id$0", 1, [], []));
},
 get$_liblib4$_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_liblib4$_id$0", 1, [], []));
},
 get$_previous: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_previous", "_previous$0", 1, [], []));
},
 get$dirty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("dirty", "dirty$0", 1, [], []));
},
 get$key: function() {
  return this.noSuchMethod$1($.createInvocationMirror("key", "key$0", 1, [], []));
},
 get$webkitMovementY: function() {
  return this.noSuchMethod$1($.createInvocationMirror("webkitMovementY", "webkitMovementY$0", 1, [], []));
},
 get$target: function() {
  return this.noSuchMethod$1($.createInvocationMirror("target", "target$0", 1, [], []));
},
 get$y: function() {
  return this.noSuchMethod$1($.createInvocationMirror("y", "y$0", 1, [], []));
},
 get$load: function() {
  return this.noSuchMethod$1($.createInvocationMirror("load", "load$0", 1, [], []));
},
 get$_backingMap: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_backingMap", "_backingMap$0", 1, [], []));
},
 get$elements: function() {
  return this.noSuchMethod$1($.createInvocationMirror("elements", "elements$0", 1, [], []));
},
 get$isNaN: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNaN", "isNaN$0", 1, [], []));
},
 get$memberName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("memberName", "memberName$0", 1, [], []));
},
 get$$$dom_attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_attributes", "$$dom_attributes$0", 1, [], []));
},
 get$_mouseOverCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseOverCallback", "_mouseOverCallback$0", 1, [], []));
},
 get$isAttacking: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isAttacking", "isAttacking$0", 1, [], []));
},
 get$inMilliseconds: function() {
  return this.noSuchMethod$1($.createInvocationMirror("inMilliseconds", "inMilliseconds$0", 1, [], []));
},
 get$namedArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("namedArguments", "namedArguments$0", 1, [], []));
},
 get$_set: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_set", "_set$0", 1, [], []));
},
 get$forts: function() {
  return this.noSuchMethod$1($.createInvocationMirror("forts", "forts$0", 1, [], []));
},
 get$Rect: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Rect", "Rect$0", 1, [], []));
},
 get$w: function() {
  return this.noSuchMethod$1($.createInvocationMirror("w", "w$0", 1, [], []));
},
 get$userAgent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("userAgent", "userAgent$0", 1, [], []));
},
 get$_liblib4$_receivePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "_liblib4$_receivePort$0", 1, [], []));
},
 get$rootContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext", "rootContext$0", 1, [], []));
},
 get$isComplete: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isComplete", "isComplete$0", 1, [], []));
},
 get$last: function() {
  return this.noSuchMethod$1($.createInvocationMirror("last", "last$0", 1, [], []));
},
 get$sb: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sb", "sb$0", 1, [], []));
},
 get$height: function() {
  return this.noSuchMethod$1($.createInvocationMirror("height", "height$0", 1, [], []));
},
 get$keyUp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyUp", "keyUp$0", 1, [], []));
},
 get$image: function() {
  return this.noSuchMethod$1($.createInvocationMirror("image", "image$0", 1, [], []));
},
 get$length: function() {
  return this.noSuchMethod$1($.createInvocationMirror("length", "length$0", 1, [], []));
},
 get$isWorker: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isWorker", "isWorker$0", 1, [], []));
},
 get$_element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_element", "_element$0", 1, [], []));
},
 get$mouseMove: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mouseMove", "mouseMove$0", 1, [], []));
},
 get$left: function() {
  return this.noSuchMethod$1($.createInvocationMirror("left", "left$0", 1, [], []));
},
 get$neighbours: function() {
  return this.noSuchMethod$1($.createInvocationMirror("neighbours", "neighbours$0", 1, [], []));
},
 get$hasNext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hasNext", "hasNext$0", 1, [], []));
},
 get$_dead: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_dead", "_dead$0", 1, [], []));
},
 get$mainManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mainManager", "mainManager$0", 1, [], []));
},
 get$Text: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Text", "Text$0", 1, [], []));
},
 get$_layer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_layer", "_layer$0", 1, [], []));
},
 get$future: function() {
  return this.noSuchMethod$1($.createInvocationMirror("future", "future$0", 1, [], []));
},
 get$_mouseUp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseUp", "_mouseUp$0", 1, [], []));
},
 get$id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("id", "id$0", 1, [], []));
},
 get$_requestAnimationFrame: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_requestAnimationFrame", "_requestAnimationFrame$0", 1, [], []));
},
 get$parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("parent", "parent$0", 1, [], []));
},
 get$value: function() {
  return this.noSuchMethod$1($.createInvocationMirror("value", "value$0", 1, [], []));
},
 get$values: function() {
  return this.noSuchMethod$1($.createInvocationMirror("values", "values$0", 1, [], []));
},
 get$screenHeight: function() {
  return this.noSuchMethod$1($.createInvocationMirror("screenHeight", "screenHeight$0", 1, [], []));
},
 get$progressBar: function() {
  return this.noSuchMethod$1($.createInvocationMirror("progressBar", "progressBar$0", 1, [], []));
},
 get$type: function() {
  return this.noSuchMethod$1($.createInvocationMirror("type", "type$0", 1, [], []));
},
 get$_keyDown: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keyDown", "_keyDown$0", 1, [], []));
},
 get$Kinetic: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Kinetic", "Kinetic$0", 1, [], []));
},
 get$nodeB: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nodeB", "nodeB$0", 1, [], []));
},
 get$offsetY: function() {
  return this.noSuchMethod$1($.createInvocationMirror("offsetY", "offsetY$0", 1, [], []));
},
 get$positionalArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("positionalArguments", "positionalArguments$0", 1, [], []));
},
 get$_mouseDown: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseDown", "_mouseDown$0", 1, [], []));
},
 get$isGetter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isGetter", "isGetter$0", 1, [], []));
},
 get$owner: function() {
  return this.noSuchMethod$1($.createInvocationMirror("owner", "owner$0", 1, [], []));
},
 get$keyDown: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keyDown", "keyDown$0", 1, [], []));
},
 get$response: function() {
  return this.noSuchMethod$1($.createInvocationMirror("response", "response$0", 1, [], []));
},
 get$isMoving: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isMoving", "isMoving$0", 1, [], []));
},
 get$currentManagerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "currentManagerId$0", 1, [], []));
},
 get$_filtered: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_filtered", "_filtered$0", 1, [], []));
},
 get$_next: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_next", "_next$0", 1, [], []));
},
 get$pattern: function() {
  return this.noSuchMethod$1($.createInvocationMirror("pattern", "pattern$0", 1, [], []));
},
 get$button: function() {
  return this.noSuchMethod$1($.createInvocationMirror("button", "button$0", 1, [], []));
},
 get$nodeA: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nodeA", "nodeA$0", 1, [], []));
},
 get$sendPort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("sendPort", "sendPort$0", 1, [], []));
},
 get$_portId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_portId", "_portId$0", 1, [], []));
},
 get$fromCommandLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "fromCommandLine$0", 1, [], []));
},
 get$_futurePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "_futurePort$0", 1, [], []));
},
 get$children: function() {
  return this.noSuchMethod$1($.createInvocationMirror("children", "children$0", 1, [], []));
},
 get$webkitMovementX: function() {
  return this.noSuchMethod$1($.createInvocationMirror("webkitMovementX", "webkitMovementX$0", 1, [], []));
},
 get$on: function() {
  return this.noSuchMethod$1($.createInvocationMirror("on", "on$0", 1, [], []));
},
 get$ignoreCase: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ignoreCase", "ignoreCase$0", 1, [], []));
},
 get$isNegative: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNegative", "isNegative$0", 1, [], []));
},
 get$_mouseMove: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseMove", "_mouseMove$0", 1, [], []));
},
 get$element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("element", "element$0", 1, [], []));
},
 get$_registry: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_registry", "_registry$0", 1, [], []));
},
 get$layer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("layer", "layer$0", 1, [], []));
},
 get$top: function() {
  return this.noSuchMethod$1($.createInvocationMirror("top", "top$0", 1, [], []));
},
 get$Line: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Line", "Line$0", 1, [], []));
},
 get$fullscreenChange: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fullscreenChange", "fullscreenChange$0", 1, [], []));
},
 get$isNeutral: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isNeutral", "isNeutral$0", 1, [], []));
},
 get$attributes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("attributes", "attributes$0", 1, [], []));
},
 get$width: function() {
  return this.noSuchMethod$1($.createInvocationMirror("width", "width$0", 1, [], []));
},
 get$$$dom_namespaceUri: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_namespaceUri", "$$dom_namespaceUri$0", 1, [], []));
},
 get$multiLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("multiLine", "multiLine$0", 1, [], []));
},
 get$mouseUp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mouseUp", "mouseUp$0", 1, [], []));
},
 get$_mouseOutCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseOutCallback", "_mouseOutCallback$0", 1, [], []));
},
 get$clientWidth: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clientWidth", "clientWidth$0", 1, [], []));
},
 get$topEventLoop: function() {
  return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "topEventLoop$0", 1, [], []));
},
 get$body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("body", "body$0", 1, [], []));
},
 get$_fullscreenChange: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_fullscreenChange", "_fullscreenChange$0", 1, [], []));
},
 get$_fullscreenError: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_fullscreenError", "_fullscreenError$0", 1, [], []));
},
 get$$$dom_localName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_localName", "$$dom_localName$0", 1, [], []));
},
 get$home: function() {
  return this.noSuchMethod$1($.createInvocationMirror("home", "home$0", 1, [], []));
},
 get$_scopeIndices: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_scopeIndices", "_scopeIndices$0", 1, [], []));
},
 get$text: function() {
  return this.noSuchMethod$1($.createInvocationMirror("text", "text$0", 1, [], []));
},
 get$_stage: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_stage", "_stage$0", 1, [], []));
},
 get$_keys: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keys", "_keys$0", 1, [], []));
},
 get$documentElement: function() {
  return this.noSuchMethod$1($.createInvocationMirror("documentElement", "documentElement$0", 1, [], []));
},
 get$style: function() {
  return this.noSuchMethod$1($.createInvocationMirror("style", "style$0", 1, [], []));
},
 get$detail: function() {
  return this.noSuchMethod$1($.createInvocationMirror("detail", "detail$0", 1, [], []));
},
 get$$$dom_childNodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_childNodes", "$$dom_childNodes$0", 1, [], []));
},
 get$_listenerName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_listenerName", "_listenerName$0", 1, [], []));
},
 get$Image: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Image", "Image$0", 1, [], []));
},
 get$screen: function() {
  return this.noSuchMethod$1($.createInvocationMirror("screen", "screen$0", 1, [], []));
},
 get$_targetImage: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_targetImage", "_targetImage$0", 1, [], []));
},
 get$nextIsolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "nextIsolateId$0", 1, [], []));
},
 get$mouseDown: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mouseDown", "mouseDown$0", 1, [], []));
},
 get$millisecondsSinceEpoch: function() {
  return this.noSuchMethod$1($.createInvocationMirror("millisecondsSinceEpoch", "millisecondsSinceEpoch$0", 1, [], []));
},
 get$isEmpty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "isEmpty$0", 1, [], []));
},
 get$currentContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext", "currentContext$0", 1, [], []));
},
 get$destination: function() {
  return this.noSuchMethod$1($.createInvocationMirror("destination", "destination$0", 1, [], []));
},
 get$unitCount: function() {
  return this.noSuchMethod$1($.createInvocationMirror("unitCount", "unitCount$0", 1, [], []));
},
 get$_port: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_port", "_port$0", 1, [], []));
},
 get$Layer: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Layer", "Layer$0", 1, [], []));
},
 get$z: function() {
  return this.noSuchMethod$1($.createInvocationMirror("z", "z$0", 1, [], []));
},
 get$needSerialization: function() {
  return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "needSerialization$0", 1, [], []));
},
 get$down: function() {
  return this.noSuchMethod$1($.createInvocationMirror("down", "down$0", 1, [], []));
},
 get$offsetX: function() {
  return this.noSuchMethod$1($.createInvocationMirror("offsetX", "offsetX$0", 1, [], []));
},
 get$pos: function() {
  return this.noSuchMethod$1($.createInvocationMirror("pos", "pos$0", 1, [], []));
},
 get$$$dom_lastElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_lastElementChild", "$$dom_lastElementChild$0", 1, [], []));
},
 get$isInfinite: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isInfinite", "isInfinite$0", 1, [], []));
},
 get$Stage: function() {
  return this.noSuchMethod$1($.createInvocationMirror("Stage", "Stage$0", 1, [], []));
},
 get$$$dom_firstElementChild: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_firstElementChild", "$$dom_firstElementChild$0", 1, [], []));
},
 get$$$dom_body: function() {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_body", "$$dom_body$0", 1, [], []));
},
 get$canvasElement: function() {
  return this.noSuchMethod$1($.createInvocationMirror("canvasElement", "canvasElement$0", 1, [], []));
},
 get$resize: function() {
  return this.noSuchMethod$1($.createInvocationMirror("resize", "resize$0", 1, [], []));
},
 get$_liblib4$_callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib4$_callback$0", 1, [], []));
},
 get$clientHeight: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clientHeight", "clientHeight$0", 1, [], []));
},
 get$nodes: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nodes", "nodes$0", 1, [], []));
},
 get$shape: function() {
  return this.noSuchMethod$1($.createInvocationMirror("shape", "shape$0", 1, [], []));
},
 get$_tag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_tag", "_tag$0", 1, [], []));
},
 get$managers: function() {
  return this.noSuchMethod$1($.createInvocationMirror("managers", "managers$0", 1, [], []));
},
 get$_liblib4$_isolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "_liblib4$_isolateId$0", 1, [], []));
},
 get$isolates: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isolates", "isolates$0", 1, [], []));
},
 get$dt: function() {
  return this.noSuchMethod$1($.createInvocationMirror("dt", "dt$0", 1, [], []));
},
 get$timeStamp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("timeStamp", "timeStamp$0", 1, [], []));
},
 get$x: function() {
  return this.noSuchMethod$1($.createInvocationMirror("x", "x$0", 1, [], []));
},
 get$center: function() {
  return this.noSuchMethod$1($.createInvocationMirror("center", "center$0", 1, [], []));
},
 get$_textShape: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_textShape", "_textShape$0", 1, [], []));
},
 get$_clickCallback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_clickCallback", "_clickCallback$0", 1, [], []));
},
 get$stackTrace: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "stackTrace$0", 1, [], []));
},
 get$_resize: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_resize", "_resize$0", 1, [], []));
},
 get$navigator: function() {
  return this.noSuchMethod$1($.createInvocationMirror("navigator", "navigator$0", 1, [], []));
},
 get$isSetter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isSetter", "isSetter$0", 1, [], []));
},
 get$player: function() {
  return this.noSuchMethod$1($.createInvocationMirror("player", "player$0", 1, [], []));
},
 get$_workerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_workerId", "_workerId$0", 1, [], []));
},
 get$_keyUp: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keyUp", "_keyUp$0", 1, [], []));
},
 get$screenManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("screenManager", "screenManager$0", 1, [], []));
},
 get$_serialized: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_serialized", "_serialized$0", 1, [], []));
},
 get$screenWidth: function() {
  return this.noSuchMethod$1($.createInvocationMirror("screenWidth", "screenWidth$0", 1, [], []));
},
 get$ports: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ports", "ports$0", 1, [], []));
},
 set$timeReleased: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("timeReleased=", "timeReleased=$1", 2, [$0], []));
},
 set$_previous: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_previous=", "_previous=$1", 2, [$0], []));
},
 set$timePressed: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("timePressed=", "timePressed=$1", 2, [$0], []));
},
 set$responseType: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("responseType=", "responseType=$1", 2, [$0], []));
},
 set$_layer: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_layer=", "_layer=$1", 2, [$0], []));
},
 set$onUpdate: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("onUpdate=", "onUpdate=$1", 2, [$0], []));
},
 set$target: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("target=", "target=$1", 2, [$0], []));
},
 set$dirty: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("dirty=", "dirty=$1", 2, [$0], []));
},
 set$currentContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "currentContext=$1", 2, [$0], []));
},
 set$innerHTML: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHTML=", "innerHTML=$1", 2, [$0], []));
},
 set$_mouseOverCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseOverCallback=", "_mouseOverCallback=$1", 2, [$0], []));
},
 set$value: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("value=", "value=$1", 2, [$0], []));
},
 set$framePressed: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("framePressed=", "framePressed=$1", 2, [$0], []));
},
 set$src: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("src=", "src=$1", 2, [$0], []));
},
 set$progressBar: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("progressBar=", "progressBar=$1", 2, [$0], []));
},
 set$type: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("type=", "type=$1", 2, [$0], []));
},
 set$frameReleased: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("frameReleased=", "frameReleased=$1", 2, [$0], []));
},
 set$width: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("width=", "width=$1", 2, [$0], []));
},
 set$_mouseOutCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_mouseOutCallback=", "_mouseOutCallback=$1", 2, [$0], []));
},
 set$cursor: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("cursor=", "cursor=$1", 2, [$0], []));
},
 set$shape: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("shape=", "shape=$1", 2, [$0], []));
},
 set$buffer: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("buffer=", "buffer=$1", 2, [$0], []));
},
 set$_textShape: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_textShape=", "_textShape=$1", 2, [$0], []));
},
 set$text: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("text=", "text=$1", 2, [$0], []));
},
 set$rootContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "rootContext=$1", 2, [$0], []));
},
 set$innerHtml: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("innerHtml=", "innerHtml=$1", 2, [$0], []));
},
 set$home: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("home=", "home=$1", 2, [$0], []));
},
 set$_targetImage: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_targetImage=", "_targetImage=$1", 2, [$0], []));
},
 set$_clickCallback: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_clickCallback=", "_clickCallback=$1", 2, [$0], []));
},
 set$_stage: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_stage=", "_stage=$1", 2, [$0], []));
},
 set$height: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("height=", "height=$1", 2, [$0], []));
},
 set$_next: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_next=", "_next=$1", 2, [$0], []));
},
 set$length: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("length=", "length=$1", 2, [$0], []));
},
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "nextIsolateId=$1", 2, [$0], []));
},
 set$_path: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_path=", "_path=$1", 2, [$0], []));
}
};

$$.DoubleLinkedQueueEntry = {"":"Object;_previous=,_next=,_element>",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"":"DoubleLinkedQueueEntry;_previous,_next,_element",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"":"Object;_sentinel",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_0 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_0;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 every$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) !== true)
      return false;
  }
  return true;
},
 some$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      return true;
  }
  return false;
},
 map$1: function(f) {
  var other, entry, t1, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (t1 = $.getInterceptor$JSArray(other); !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    t1.addLast$1(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var other, entry, t1, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (t1 = $.getInterceptor$JSArray(other); !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      t1.addLast$1(other, entry.get$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":"Object;_sentinel,_currentEntry",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._HashSetImpl = {"":"Object;_backingMap>",
 clear$0: function() {
  this._backingMap.clear$0();
},
 add$1: function(value) {
  this._backingMap.operator$indexSet$2(value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  this._backingMap.forEach$1(new $._HashSetImpl_forEach_anon(f));
},
 map$1: function(f) {
  var result = $.Set_Set();
  this._backingMap.forEach$1(new $._HashSetImpl_map_anon(result, f));
  return result;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var result = $.Set_Set();
  this._backingMap.forEach$1(new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 every$1: function(f) {
  var keys = this._backingMap.get$keys();
  return $.getInterceptor$JSArray(keys).every$1(keys, f);
},
 some$1: function(f) {
  var keys = this._backingMap.get$keys();
  return $.getInterceptor$JSArray(keys).some$1(keys, f);
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 iterator$0: function() {
  return $._HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$();
},
 is$Collection: function() { return true; }
};

$$._HashSetIterator = {"":"Object;_entries,_nextValidIndex",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = $.getInterceptor$JSStringJSArray(t2);
  if ($.geB(t1, t3.get$length(t2)))
    return false;
  if ($.index(t2, this._nextValidIndex) === $.CONSTANT2)
    this._advance$0();
  return $.lt(this._nextValidIndex, t3.get$length(t2));
},
 next$0: function() {
  var t1, t3, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout1(1, t1);
  t3 = this._nextValidIndex;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout1: function(state0, t1) {
  var res = $.index(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._advance$0$bailout(1, t1);
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CONSTANT2);
},
 _advance$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      length$ = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._entries;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      var t1, length$, t2, entry;
      state0 = 0;
      do {
        t2 = this._nextValidIndex + 1;
        this._nextValidIndex = t2;
        if ($.geB(t2, length$))
          break;
        entry = $.index(t1, this._nextValidIndex);
      } while (entry == null || entry === $.CONSTANT2);
  }
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$._StringBufferImpl = {"":"Object;_buffer,_length",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor$JSArray(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(objects).iterator$0(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $.List_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"":"Object;",
 toString$0: function(receiver) {
  return receiver.toString$0();
},
 charCodeAt$1: function(receiver, a0) {
  return receiver.charCodeAt$1(a0);
},
 substring$1: function(receiver, a0) {
  return receiver.substring$1(a0);
},
 iterator$0: function(receiver) {
  return receiver.iterator$0();
},
 add$1: function(receiver, a0) {
  return receiver.add$1(a0);
},
 removeRange$2: function(receiver, a0, a1) {
  return receiver.removeRange$2(a0, a1);
},
 ceil$0: function(receiver) {
  return receiver.ceil$0();
},
 set$length: function(receiver, value) {
  return receiver.set$length(value);
},
 indexOf$2: function(receiver, a0, a1) {
  return receiver.indexOf$2(a0, a1);
},
 addAll$1: function(receiver, a0) {
  return receiver.addAll$1(a0);
},
 get$length: function(receiver) {
  return receiver.get$length();
},
 forEach$1: function(receiver, a0) {
  return receiver.forEach$1(a0);
},
 substring$2: function(receiver, a0, a1) {
  return receiver.substring$2(a0, a1);
},
 truncate$0: function(receiver) {
  return receiver.truncate$0();
},
 get$isEmpty: function(receiver) {
  return receiver.get$isEmpty();
},
 addLast$1: function(receiver, a0) {
  return receiver.addLast$1(a0);
},
 replaceAll$2: function(receiver, a0, a1) {
  return receiver.replaceAll$2(a0, a1);
},
 get$isNegative: function(receiver) {
  return receiver.get$isNegative();
},
 every$1: function(receiver, a0) {
  return receiver.every$1(a0);
},
 get$hashCode: function(receiver) {
  return receiver.get$hashCode();
},
 contains$1: function(receiver, a0) {
  return receiver.contains$1(a0);
},
 contains$2: function(receiver, a0, a1) {
  return receiver.contains$2(a0, a1);
},
 toDouble$0: function(receiver) {
  return receiver.toDouble$0();
},
 some$1: function(receiver, a0) {
  return receiver.some$1(a0);
},
 get$last: function(receiver) {
  return receiver.get$last();
},
 clear$0: function(receiver) {
  return receiver.clear$0();
},
 endsWith$1: function(receiver, a0) {
  return receiver.endsWith$1(a0);
},
 getRange$2: function(receiver, a0, a1) {
  return receiver.getRange$2(a0, a1);
},
 compareTo$1: function(receiver, a0) {
  return receiver.compareTo$1(a0);
},
 floor$0: function(receiver) {
  return receiver.floor$0();
},
 allMatches$1: function(receiver, a0) {
  return receiver.allMatches$1(a0);
},
 reduce$2: function(receiver, a0, a1) {
  return receiver.reduce$2(a0, a1);
},
 sort$1: function(receiver, a0) {
  return receiver.sort$1(a0);
},
 abs$0: function(receiver) {
  return receiver.abs$0();
},
 concat$1: function(receiver, a0) {
  return receiver.concat$1(a0);
},
 toInt$0: function(receiver) {
  return receiver.toInt$0();
},
 indexOf$1: function(receiver, a0) {
  return receiver.indexOf$1(a0);
},
 removeLast$0: function(receiver) {
  return receiver.removeLast$0();
},
 map$1: function(receiver, a0) {
  return receiver.map$1(a0);
},
 get$isNaN: function(receiver) {
  return receiver.get$isNaN();
},
 startsWith$1: function(receiver, a0) {
  return receiver.startsWith$1(a0);
},
 filter$1: function(receiver, a0) {
  return receiver.filter$1(a0);
},
 get$isInfinite: function(receiver) {
  return receiver.get$isInfinite();
},
 removeAt$1: function(receiver, a0) {
  return receiver.removeAt$1(a0);
}
};

$$.JSFunction = {"":"Object;",
 toString$0: function(receiver) {
  return "Closure";
},
 is$Function: true
};

$$.JSBool = {"":"Object;",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {"":"Object;",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {"":"Object;",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeAt$1: function(receiver, index) {
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0 || index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  $.checkGrowable(receiver, "removeAt");
  return receiver.splice(index, 1)[0];
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection); t1.get$hasNext() === true;)
    $.CONSTANT0.add$1(receiver, t1.next$0());
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 map$1: function(receiver, f) {
  return $.Collections_map(receiver, [], f);
},
 reduce$2: function(receiver, initialValue, combine) {
  return $.Collections_reduce(receiver, initialValue, combine);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 get$last: function(receiver) {
  var t1, t2;
  t1 = receiver.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  return receiver[t2];
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, "removeRange");
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.CONSTANT0.set$length(receiver, t2);
},
 some$1: function(receiver, f) {
  return $.Collections_some(receiver, f);
},
 every$1: function(receiver, f) {
  return $.Collections_every(receiver, f);
},
 sort$1: function(receiver, compare) {
  $.checkMutable(receiver, "sort");
  if (compare == null)
    compare = $.Comparable_compare;
  $.coreSort(receiver, compare);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($receiver, element) {
  return this.indexOf$2($receiver, element, 0);
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; i < receiver.length; ++i)
    if ($.eqB(other, receiver[i]))
      return true;
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {"":"Object;",
 compareTo$1: function(receiver, b) {
  var bIsNegative;
  if (!(typeof b === 'number'))
    throw $.$$throw($.ArgumentError$(b));
  if (receiver < b)
    return -1;
  else if (receiver > b)
    return 1;
  else if (receiver === b) {
    if (receiver === 0) {
      bIsNegative = $.CONSTANT1.get$isNegative(b);
      if ($.eqB(this.get$isNegative(receiver), bIsNegative))
        return 0;
      if (this.get$isNegative(receiver) === true)
        return -1;
      return 1;
    }
    return 0;
  } else if (this.get$isNaN(receiver) === true) {
    if ($.CONSTANT1.get$isNaN(b) === true)
      return 0;
    return 1;
  } else
    return -1;
},
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 toInt$0: function(receiver) {
  var truncated, t1;
  if (this.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$("NaN"));
  if (this.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$("Infinity"));
  truncated = this.truncate$0(receiver);
  if (typeof truncated !== 'number')
    return this.toInt$0$bailout(1, truncated);
  if (truncated == -0.0)
    t1 = 0;
  else
    t1 = truncated;
  return t1;
},
 toInt$0$bailout: function(state0, truncated) {
  return truncated == -0.0 ? 0 : truncated;
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 get$isInfinite: function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
},
 toDouble$0: function(receiver) {
  return receiver;
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {"":"JSNumber;"
};

$$.JSDouble = {"":"JSNumber;"
};

$$.JSString = {"":"Object;",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 concat$1: function(receiver, other) {
  return receiver + other;
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = other.length;
  if (otherLength > receiver.length)
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver, startIndex) {
  return this.substring$2($receiver, startIndex, null);
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($receiver, other) {
  return this.indexOf$2($receiver, other, 0);
},
 contains$2: function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
},
 contains$1: function($receiver, other) {
  return this.contains$2($receiver, other, 0);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 compareTo$1: function(receiver, other) {
  var t1;
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (receiver === other)
    t1 = 0;
  else
    t1 = receiver < other ? -1 : 1;
  return t1;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var hash, i, hash0, hash1;
  for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.AbstractWorkerEvents = {"":"Events;_ptr"
};

$$.ApplicationCacheEvents = {"":"Events;_ptr"
};

$$.BatteryManagerEvents = {"":"Events;_ptr"
};

$$.BodyElementEvents = {"":"ElementEvents;_ptr",
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.DedicatedWorkerContextEvents = {"":"WorkerContextEvents;_ptr"
};

$$.DocumentEvents = {"":"ElementEvents;_ptr"
};

$$._ChildrenElementList = {"":"Object;_liblib$_element>,_childElements",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $.List_List(t3);
  len = t1.length;
  i = 0;
  for (; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      output = env2;
      len = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._childElements;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(t1);
      output = $.List_List(t3.get$length(t1));
      len = t3.get$length(t1);
    case 2:
      var t1, t3, output, len, i, t2;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t2 = $.index(t1, i);
        if (i >= output.length)
          throw $.ioore(i);
        output[i] = t2;
      }
      return output;
  }
},
 contains$1: function(element) {
  var t1 = this._childElements;
  return $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = this._childElements, t2 = $.getInterceptor$JSArray(t2).iterator$0(t2); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 every$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 map$1: function(f) {
  var out, t1;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$isEmpty: function() {
  return this._liblib$_element.firstElementChild == null;
},
 get$length: function() {
  var t1 = this._childElements;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._liblib$_element.$$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 add$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  var t1 = this._toList$0();
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._liblib$_element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 clear$0: function() {
  this._liblib$_element.textContent = "";
},
 removeAt$1: function(index) {
  var result = this.operator$index$1(index);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._liblib$_element.lastElementChild;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"":"Object;_nodeList",
 contains$1: function(element) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out, t1;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.push(t2);
  }
  return out;
},
 every$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 set$length: function(newLength) {
  var t1 = this._nodeList;
  $.getInterceptor$JSArray(t1).set$length(t1, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(""));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$(""));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeAt$1: function(index) {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 get$last: function() {
  var t1 = this._nodeList;
  return $.getInterceptor$JSArray(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"":"Object;_liblib$_list,_index",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._liblib$_list;
  t2 = this._index;
  if (typeof t2 !== 'number')
    return this.next$0$bailout2(1, t2, t1);
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout2: function(state0, t2, t1) {
  this._index = $.add(t2, 1);
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  var t1, t2;
  t1 = this._index;
  t2 = this._liblib$_list;
  return $.lt(t1, $.getInterceptor$JSStringJSArray(t2).get$length(t2));
}
};

$$.ElementEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 click$0: function() {
  return this.get$click().call$0();
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
},
 get$mouseUp: function() {
  return this.operator$index$1("mouseup");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
},
 get$fullscreenChange: function() {
  return this.operator$index$1("webkitfullscreenchange");
},
 get$fullscreenError: function() {
  return this.operator$index$1("webkitfullscreenerror");
}
};

$$.EventSourceEvents = {"":"Events;_ptr",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.Events = {"":"Object;_ptr",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"":"Object;_ptr,_type",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener, false);
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener, false);
}
};

$$.FileReaderEvents = {"":"Events;_ptr",
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
}
};

$$.FileWriterEvents = {"":"Events;_ptr"
};

$$.FrameSetElementEvents = {"":"ElementEvents;_ptr",
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.HttpRequestEvents = {"":"Events;_ptr",
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
}
};

$$.HttpRequestUploadEvents = {"":"Events;_ptr",
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
}
};

$$.InputElementEvents = {"":"ElementEvents;_ptr"
};

$$.LocalWindowEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 click$0: function() {
  return this.get$click().call$0();
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
},
 get$mouseUp: function() {
  return this.operator$index$1("mouseup");
},
 get$play: function() {
  return this.operator$index$1("play");
},
 play$0: function() {
  return this.get$play().call$0();
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.MediaElementEvents = {"":"ElementEvents;_ptr",
 get$play: function() {
  return this.operator$index$1("play");
},
 play$0: function() {
  return this.get$play().call$0();
},
 get$show: function() {
  return this.operator$index$1("show");
},
 show$0: function() {
  return this.get$show().call$0();
}
};

$$.MediaStreamEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackEvents = {"":"Events;_ptr"
};

$$.MediaStreamTrackListEvents = {"":"Events;_ptr"
};

$$.MessagePortEvents = {"":"Events;_ptr"
};

$$._ChildNodeListLazy = {"":"Object;_this",
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(collection).iterator$0(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 removeAt$1: function(index) {
  var result = this.operator$index$1(index);
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.textContent = "";
},
 operator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  var t1 = this._this.childNodes;
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 get$length: function() {
  var t1 = this._this.childNodes;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
},
 operator$index$1: function(index) {
  return $.index(this._this.childNodes, index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.NotificationEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 click$0: function() {
  return this.get$click().call$0();
},
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 get$show: function() {
  return this.operator$index$1("show");
},
 show$0: function() {
  return this.get$show().call$0();
}
};

$$.PeerConnection00Events = {"":"Events;_ptr",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.RtcDataChannelEvents = {"":"Events;_ptr",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.RtcPeerConnectionEvents = {"":"Events;_ptr",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.SharedWorkerContextEvents = {"":"WorkerContextEvents;_ptr",
 get$connect: function() {
  return this.operator$index$1("connect");
},
 connect$3: function(arg0, arg1, arg2) {
  return this.get$connect().call$3(arg0, arg1, arg2);
}
};

$$.SpeechRecognitionEvents = {"":"Events;_ptr",
 get$start: function() {
  return this.operator$index$1("start");
},
 start$0: function() {
  return this.get$start().call$0();
},
 start$1: function(arg0) {
  return this.get$start().call$1(arg0);
}
};

$$.TextTrackEvents = {"":"Events;_ptr"
};

$$.TextTrackCueEvents = {"":"Events;_ptr"
};

$$.TextTrackListEvents = {"":"Events;_ptr"
};

$$.WebSocketEvents = {"":"Events;_ptr",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() {
  return this.get$close().call$0();
},
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) {
  return this.get$open().call$3(arg0, arg1, arg2);
}
};

$$.WorkerEvents = {"":"AbstractWorkerEvents;_ptr"
};

$$.WorkerContextEvents = {"":"Events;_ptr"
};

$$._AttributeMap = {"":"Object;_liblib$_element>",
 clear$0: function() {
  for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    this.remove$1(t1.next$0());
},
 forEach$1: function(f) {
  var t1, t2;
  for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    f.call$2(t2, this.operator$index$1(t2));
  }
},
 get$keys: function() {
  var attributes, keys, len, i;
  attributes = this._liblib$_element.attributes;
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  keys = $.List_List(null);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    if (this._matches$1(attributes[i]) === true) {
      if (i >= attributes.length)
        throw $.ioore(i);
      keys.push(attributes[i].get$$$dom_localName());
    }
  }
  return keys;
},
 get$keys$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      keys = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.attributes;
    case 1:
      state0 = 0;
      keys = $.List_List(null);
      len = $.getInterceptor$JSStringJSArray(attributes).get$length(attributes);
    case 2:
      var attributes, keys, len, i;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i)
        if (this._matches$1($.index(attributes, i)) === true)
          keys.push($.index(attributes, i).get$$$dom_localName());
      return keys;
  }
},
 get$values: function() {
  var attributes, values, len, i;
  attributes = this._liblib$_element.attributes;
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  values = $.List_List(null);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    if (this._matches$1(attributes[i]) === true) {
      if (i >= attributes.length)
        throw $.ioore(i);
      values.push(attributes[i].get$value());
    }
  }
  return values;
},
 get$values$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      values = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._liblib$_element.attributes;
    case 1:
      state0 = 0;
      values = $.List_List(null);
      len = $.getInterceptor$JSStringJSArray(attributes).get$length(attributes);
    case 2:
      var attributes, values, len, i;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i)
        if (this._matches$1($.index(attributes, i)) === true)
          values.push($.index(attributes, i).get$value());
      return values;
  }
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 is$Map: function() { return true; }
};

$$._ElementAttributeMap = {"":"_AttributeMap;_liblib$_element",
 containsKey$1: function(key) {
  return this._liblib$_element.$$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._liblib$_element.$$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._liblib$_element;
  value = t1.$$dom_getAttribute$1(key);
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 get$length: function() {
  var t1 = this.get$keys();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 _matches$1: function(node) {
  return node.get$$$dom_namespaceUri() == null;
}
};

$$._JsSerializer = {"":"_Serializer;_nextFreeRefId,_visited",
 visitSendPortSync$1: function(x) {
  if (!!x.is$_JsSendPortSync)
    return ["sendport", "nativejs", x._id];
  if (!!x.is$_LocalSendPortSync)
    return this.visitLocalSendPortSync$1(x);
  if (!!x.is$_RemoteSendPortSync)
    return ["sendport", "dart", x._isolateId, x._portId];
  throw $.$$throw("Unknown port type " + $.S(x));
},
 visitLocalSendPortSync$1: function(x) {
  return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
},
 visitSendPort$1: function(x) {
  throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
}
};

$$._JsDeserializer = {"":"_Deserializer;_deserialized",
 deserializeSendPort$1: function(x) {
  var tag = $.index(x, 1);
  switch (tag) {
    case "nativejs":
      return $._JsSendPortSync$($.index(x, 2));
    case "dart":
      return $.ReceivePortSync__lookup($.index(x, 2), $.index(x, 3));
    default:
      throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
  }
}
};

$$._JsSendPortSync = {"":"Object;_id>",
 callSync$1: function(message) {
  var serialized, result;
  serialized = $._JsSerializer$().traverse$1(message);
  result = ReceivePortSync.dispatchCall(this._id, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_JsSendPortSync: true,
 is$SendPortSync: true
};

$$._RemoteSendPortSync = {"":"Object;_isolateId>,_portId>",
 callSync$1: function(message) {
  var serialized, result;
  serialized = $._JsSerializer$().traverse$1(message);
  result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
  return $._JsDeserializer$().deserialize$1(result);
},
 is$_RemoteSendPortSync: true,
 is$SendPortSync: true
};

$$._LocalSendPortSync = {"":"Object;_receivePort>",
 callSync$1: function(message) {
  var t1, copy, result;
  t1 = $._JsSerializer$().traverse$1(message);
  copy = $._JsDeserializer$().deserialize$1(t1);
  result = this._receivePort._callback$1(copy);
  t1 = $._JsSerializer$().traverse$1(result);
  return $._JsDeserializer$().deserialize$1(t1);
},
 is$_LocalSendPortSync: true,
 is$SendPortSync: true
};

$$.ReceivePortSync = {"":"Object;_portId>,_callback>,_listener",
 _callback$1: function(arg0) {
  return this._callback.call$1(arg0);
},
 _callback$1: function(arg0) {
  return this._callback.call$1(arg0);
},
 _callback$2: function(arg0, arg1) {
  return this._callback.call$2(arg0, arg1);
},
 get$_listenerName: function() {
  return $.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId);
},
 receive$1: function(callback) {
  var t1;
  this._callback = callback;
  if (this._listener == null) {
    this._listener = new $.ReceivePortSync_receive_anon(this);
    t1 = $.index($.window().get$on(), this.get$_listenerName());
    $.getInterceptor$JSArray(t1).add$1(t1, this._listener);
  }
},
 close$0: function() {
  $.ReceivePortSync__portMap.remove$1(this._portId);
  if (!(this._listener == null))
    $.index($.window().get$on(), this.get$_listenerName()).remove$1(this._listener);
},
 toSendPort$0: function() {
  return $._LocalSendPortSync$_internal(this);
},
 ReceivePortSync$0: function() {
  if ($.ReceivePortSync__portIdCount == null) {
    $.ReceivePortSync__portIdCount = 0;
    $.ReceivePortSync__portMap = $.Map_Map();
  }
  var t1 = $.ReceivePortSync__portIdCount;
  $.ReceivePortSync__portIdCount = $.add(t1, 1);
  this._portId = t1;
  $.indexSet($.ReceivePortSync__portMap, this._portId, this);
}
};

$$._MessageTraverserVisitedMap = {"":"Object;",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"":"Object;",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Serializer = {"":"_MessageTraverser;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = this._visited.operator$index$1(list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = this._visited.operator$index$1(map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  this._visited.operator$indexSet$2(map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $.List_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $.List_List(len);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer = {"":"Object;",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      len = $.getInterceptor$JSStringJSArray(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._DOMWindowCrossFrame = {"":"Object;_window",
 get$parent: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.parent);
},
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
},
 close$0: function() {
  return this._window.close();
}
};

$$.FixedSizeListIterator = {"":"_VariableSizeListIterator;_liblib$_length,_array,_pos",
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {"":"Object;",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.next$0$bailout(2, t3, t1);
  this._pos = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$hasNext() !== true)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._array;
    case 1:
      state0 = 0;
      t3 = this._pos;
    case 2:
      var t1, t3;
      state0 = 0;
      this._pos = $.add(t3, 1);
      return $.index(t1, t3);
  }
}
};

$$.FilteredElementList = {"":"Object;_node,_childNodes",
 get$_filtered: function() {
  var t1 = this._childNodes;
  return $.List_List$from($.getInterceptor$JSArray(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor$JSArray(t1).forEach$1(t1, f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.getInterceptor$JSStringJSArray(this).get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$("Invalid list length"));
  this.removeRange$2(newLength, $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 get$add: function() {
  return new $.BoundClosure(this, 'add$1');
},
 addAll$1: function(collection) {
  $.getInterceptor$JSArray(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).add$1(t1, value);
},
 contains$1: function(element) {
  var t1, t2;
  if (typeof element === 'object' && element !== null && element.is$Element()) {
    t1 = this._childNodes;
    t2 = $.getInterceptor$JSStringJSArray(t1).contains$1(t1, element) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.getInterceptor$JSArray(this).get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 removeAt$1: function(index) {
  var result = this.operator$index$1(index);
  result.remove$0();
  return result;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 map$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).filter$1(t1, f);
},
 every$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).every$1(t1, f);
},
 some$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).some$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).iterator$0(t1);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSStringJSArray(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor$JSArray(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.DatabaseEvents = {"":"Events;_ptr"
};

$$.OpenDBRequestEvents = {"":"RequestEvents;_ptr"
};

$$.RequestEvents = {"":"Events;_ptr"
};

$$.TransactionEvents = {"":"Events;_ptr",
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.VersionChangeRequestEvents = {"":"RequestEvents;_ptr"
};

$$._Manager = {"":"Object;nextIsolateId=,currentManagerId>,nextManagerId,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"":"Object;id>,ports>,isolateStatics",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"":"Object;events",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor$JSArray(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"":"Object;isolate,fn,message",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":"Object;",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"":"Object;_liblib4$_isolateId>",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$Function: true,
 is$SendPort: true
};

$$._NativeJsSendPort = {"":"_BaseSendPort;_liblib4$_receivePort>,_liblib4$_isolateId",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._liblib4$_receivePort, other._liblib4$_receivePort);
},
 get$hashCode: function() {
  return this._liblib4$_receivePort.get$_liblib4$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":"_BaseSendPort;_workerId>,_receivePortId,_liblib4$_isolateId",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(message, replyTo, this));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._liblib4$_isolateId, other._liblib4$_isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._liblib4$_isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"":"Object;_liblib4$_id>,_liblib4$_callback>",
 _liblib4$_callback$1: function(arg0) {
  return this._liblib4$_callback.call$1(arg0);
},
 _liblib4$_callback$1: function(arg0) {
  return this._liblib4$_callback.call$1(arg0);
},
 _liblib4$_callback$2: function(arg0, arg1) {
  return this._liblib4$_callback.call$2(arg0, arg1);
},
 receive$1: function(onMessage) {
  this._liblib4$_callback = onMessage;
},
 close$0: function() {
  this._liblib4$_callback = null;
  $._globalState().get$currentContext().unregister$1(this._liblib4$_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._liblib4$_id, this);
}
};

$$._PendingSendPortFinder = {"":"_MessageTraverser0;ports>,_liblib4$_visited",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._liblib4$_visited, list) == null))
    return;
  $.indexSet(this._liblib4$_visited, list, true);
  $.getInterceptor$JSArray(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._liblib4$_visited, map) == null))
    return;
  $.indexSet(this._liblib4$_visited, map, true);
  t1 = map.get$values();
  $.getInterceptor$JSArray(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._liblib4$_port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsSerializer0 = {"":"_Serializer0;_liblib4$_nextFreeRefId,_liblib4$_visited",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._liblib4$_isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._liblib4$_isolateId, port._liblib4$_receivePort.get$_liblib4$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib4$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"":"_Copier;_liblib4$_visited",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._liblib4$_receivePort, port._liblib4$_isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._liblib4$_isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._liblib4$_port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._liblib4$_visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer0 = {"":"_Deserializer0;_liblib4$_deserialized",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":"Object;tagged",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor$JSArray(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $.List_List(null);
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i) {
    t1 = this.tagged;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.cleanup$0$bailout(2, i, t1, length$);
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i]['__MessageTraverser__attached_info__'] = null;
  }
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      length$ = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      i = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.tagged;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 1:
      state0 = 0;
      i = 0;
    case 2:
      var t1, length$, i;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, length$))
                break L0;
              t1 = this.tagged;
            case 2:
              state0 = 0;
              $.index(t1, i)['__MessageTraverser__attached_info__'] = null;
              ++i;
          }
      this.tagged = null;
  }
}
};

$$._MessageTraverserVisitedMap0 = {"":"Object;",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser0 = {"":"Object;",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._liblib4$_visited.reset$0();
  result = null;
  try {
    result = this._liblib4$_dispatch$1(x);
  } finally {
    this._liblib4$_visited.cleanup$0();
  }
  return result;
},
 _liblib4$_dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {"":"_MessageTraverser0;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._liblib4$_visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $.List_List(len);
  $.indexSet(this._liblib4$_visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._liblib4$_dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      copy = $.index(this._liblib4$_visited, list);
      if (!(copy == null))
        return copy;
      len = $.getInterceptor$JSStringJSArray(list).get$length(list);
    case 2:
      var list, copy, len, i, t1;
      state0 = 0;
      copy = $.List_List(len);
      $.indexSet(this._liblib4$_visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._liblib4$_dispatch$1($.index(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_0 = $.index(this._liblib4$_visited, map);
  t2 = t1.copy_0;
  if (!(t2 == null))
    return t2;
  t1.copy_0 = $.Map_Map();
  $.indexSet(this._liblib4$_visited, map, t1.copy_0);
  map.forEach$1(new $._Copier_visitMap_anon(t1, this));
  return t1.copy_0;
}
};

$$._Serializer0 = {"":"_MessageTraverser0;",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._liblib4$_visited, list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib4$_nextFreeRefId;
  this._liblib4$_nextFreeRefId = id + 1;
  $.indexSet(this._liblib4$_visited, list, id);
  return ["list", id, this._liblib4$_serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._liblib4$_visited, map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._liblib4$_nextFreeRefId;
  this._liblib4$_nextFreeRefId = id + 1;
  $.indexSet(this._liblib4$_visited, map, id);
  return ["map", id, this._liblib4$_serializeList$1(map.get$keys()), this._liblib4$_serializeList$1(map.get$values())];
},
 _liblib4$_serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._liblib4$_serializeList$1$bailout(1, list);
  len = list.length;
  result = $.List_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._liblib4$_dispatch$1(list[i]);
  }
  return result;
},
 _liblib4$_serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $.List_List(len);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._liblib4$_dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer0 = {"":"Object;",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._liblib4$_deserialized = $.HashMap_HashMap();
  return this._liblib4$_deserializeHelper$1(x);
},
 _liblib4$_deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case "ref":
      return this._liblib4$_deserializeRef$1(x);
    case "list":
      return this._liblib4$_deserializeList$1(x);
    case "map":
      return this._liblib4$_deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _liblib4$_deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._liblib4$_deserialized, id);
},
 _liblib4$_deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._liblib4$_deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._liblib4$_deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._liblib4$_deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _liblib4$_deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._liblib4$_deserialized, id, dartList);
      len = $.getInterceptor$JSStringJSArray(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._liblib4$_deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _liblib4$_deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._liblib4$_deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._liblib4$_deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._liblib4$_deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._liblib4$_deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._liblib4$_deserializeHelper$1(values[i]));
  }
  return result;
},
 _liblib4$_deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._liblib4$_deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor$JSStringJSArray(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._liblib4$_deserializeHelper$1($.index(keys, i)), this._liblib4$_deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._Random = {"":"Object;",
 nextDouble$0: function() {
  return Math.random();
}
};

$$.JsonUnsupportedObjectError = {"":"Object;unsupportedObject,cause",
 toString$0: function() {
  if (!(this.cause == null))
    return "Calling toJson method on object failed.";
  else
    return "Object toJson method returns non-serializable value.";
}
};

$$._JsonParser = {"":"Object;json,length>,position",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1("Junk at the end of JSON input");
  return result;
},
 parseValue$0: function() {
  var token = this.token$0();
  if (token == null)
    this.error$1("Nothing to parse");
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2("null", null);
    case 102:
      return this.expectKeyword$2("false", false);
    case 116:
      return this.expectKeyword$2("true", true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1("Unexpected token");
  }
},
 expectKeyword$2: function(word, value) {
  var i;
  for (i = 0; i < word.length; ++i) {
    if (!$.eqB(this.char$0(), $.CONSTANT3.charCodeAt$1(word, i)))
      this.error$1("Expected keyword '" + word + "'");
    this.position = $.add(this.position, 1);
  }
  return value;
},
 parseObject$0: function() {
  var object, key, t1;
  object = $.makeLiteralMap([]);
  if (typeof object !== 'object' || object === null || (object.constructor !== Array || !!object.immutable$list) && !object.is$JavaScriptIndexingBehavior())
    return this.parseObject$0$bailout(1, object);
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1("Expected ':' when parsing object");
      this.position = $.add(this.position, 1);
      t1 = this.parseValue$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= object.length)
        throw $.ioore(key);
      object[key] = t1;
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1("Expected '}' at end of object");
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseObject$0$bailout: function(state0, object) {
  var key;
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1("Expected ':' when parsing object");
      this.position = $.add(this.position, 1);
      $.indexSet(object, key, this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1("Expected '}' at end of object");
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 93)) {
    for (; true;) {
      list.push(this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 93))
      this.error$1("Expected ']' at end of list");
  }
  this.position = $.add(this.position, 1);
  return list;
},
 parseString$0: function(exception) {
  var charCodes, t1, t2, t3, c, codeString;
  if (!$.eqB(this.token$0(), 34))
    this.error$1("Expected string literal");
  this.position = $.add(this.position, 1);
  charCodes = $.List_List(null);
  for (t1 = this.length, t2 = this.json, t3 = $.getInterceptor$JSString(t2); true;) {
    c = this.char$0();
    if ($.eqB(c, 34)) {
      this.position = $.add(this.position, 1);
      break;
    }
    if ($.eqB(c, 92)) {
      this.position = $.add(this.position, 1);
      if ($.eqB(this.position, t1))
        this.error$1("\\ at the end of input");
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.gtB($.add(this.position, 5), t1))
            this.error$1("Invalid unicode esacape sequence");
          codeString = t3.substring$2(t2, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse("0x" + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1("Invalid unicode esacape sequence");
          }

          this.position = $.add(this.position, 4);
          break;
        default:
          this.error$1("Invalid esacape sequence in string literal");
      }
    }
    charCodes.push(c);
    this.position = $.add(this.position, 1);
  }
  return $.String_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  var startPos, char$, isInt, t1, number;
  if (!$.eqB(this.token$0(), 45))
    this.error$1("Expected number literal");
  startPos = this.position;
  char$ = this.char$0();
  if (char$ === 45)
    char$ = this.nextChar$0();
  if (char$ === 48)
    char$ = this.nextChar$0();
  else if ($.geB(char$, 48) && $.leB(char$, 57)) {
    char$ = this.nextChar$0();
    if (typeof char$ !== 'number')
      return this.parseNumber$0$bailout(1, startPos, char$);
    while (true) {
      if (!($.geB(char$, 48) && $.leB(char$, 57)))
        break;
      char$ = this.nextChar$0();
    }
  } else
    this.error$1("Expected digit when parsing number");
  if (char$ === 46) {
    char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(2, startPos, char$);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else {
      this.error$1("Expected digit following comma");
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = this.nextChar$0();
    if (char$ === 45 || char$ === 43)
      char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(3, char$, startPos);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else
      this.error$1("Expected digit following 'e' or 'E'");
  }
  t1 = this.json;
  number = $.getInterceptor$JSString(t1).substring$2(t1, startPos, this.position);
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 parseNumber$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      char$ = env1;
      startPos = env0;
      break;
    case 2:
      char$ = env1;
      startPos = env0;
      break;
    case 3:
      startPos = env1;
      char$ = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!$.eqB(this.token$0(), 45))
        this.error$1("Expected number literal");
      startPos = this.position;
      char$ = this.char$0();
      if (char$ === 45)
        char$ = this.nextChar$0();
    case 1:
      if (state0 === 0 && char$ === 48)
        char$ = this.nextChar$0();
      else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 1:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
              }
            else
              this.error$1("Expected digit when parsing number");
        }
    case 2:
      if (state0 === 2 || state0 === 0 && char$ === 46)
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
          case 2:
            if (state0 === 2 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 2:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else {
              this.error$1("Expected digit following comma");
              isInt = true;
            }
        }
      else
        isInt = true;
    case 3:
      var startPos, char$, isInt, t1, number;
      if (state0 === 3 || state0 === 0 && (char$ === 101 || char$ === 69))
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
            if (char$ === 45 || char$ === 43)
              char$ = this.nextChar$0();
          case 3:
            if (state0 === 3 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 3:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else
              this.error$1("Expected digit following 'e' or 'E'");
        }
      t1 = this.json;
      number = $.getInterceptor$JSString(t1).substring$2(t1, startPos, this.position);
      if (isInt)
        return $.int_parse(number);
      else
        return $.double_parse(number);
  }
},
 char$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.char$0$bailout(1, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.char$0$bailout(2, t1, t3);
  if (t1 >= t3)
    this.error$1("Unexpected end of JSON stream");
  t1 = this.json;
  return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
},
 char$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      t3 = this.length;
    case 2:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        this.error$1("Unexpected end of JSON stream");
      t1 = this.json;
      return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
  }
},
 nextChar$0: function() {
  var t1, t3, t2;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(2, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.nextChar$0$bailout(3, t1, t3);
  if (t1 >= t3)
    return 0;
  t2 = this.json;
  return $.getInterceptor$JSString(t2).charCodeAt$1(t2, t1);
},
 nextChar$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      this.position = $.add(t1, 1);
      t1 = this.position;
    case 2:
      state0 = 0;
      t3 = this.length;
    case 3:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        return 0;
      t1 = this.json;
      return $.getInterceptor$JSString(t1).charCodeAt$1(t1, this.position);
  }
},
 token$0: function() {
  var t1, t2, t3, t4, char$, token;
  t1 = this.json;
  t2 = $.getInterceptor$JSString(t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.token$0$bailout(1, t2, t3, t1);
  for (; true;) {
    t4 = this.position;
    if (typeof t4 !== 'number')
      return this.token$0$bailout(2, t4, t2, t3, t1);
    if (t4 >= t3)
      return;
    char$ = t2.charCodeAt$1(t1, t4);
    t4 = $._JsonParser_tokens;
    if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
      return this.token$0$bailout(3, t2, t3, char$, t1, t4);
    if (char$ !== (char$ | 0))
      throw $.iae(char$);
    if (char$ < 0 || char$ >= t4.length)
      throw $.ioore(char$);
    token = t4[char$];
    if (token === 32) {
      t4 = this.position;
      if (typeof t4 !== 'number')
        return this.token$0$bailout(4, t2, t3, t1, t4);
      this.position = t4 + 1;
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 token$0$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env2;
      t3 = env1;
      t2 = env0;
      break;
    case 2:
      t1 = env3;
      t3 = env2;
      t2 = env1;
      t4 = env0;
      break;
    case 3:
      t4 = env4;
      t1 = env3;
      char$ = env2;
      t3 = env1;
      t2 = env0;
      break;
    case 4:
      t4 = env3;
      t1 = env2;
      t3 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.json;
      t2 = $.getInterceptor$JSString(t1);
      t3 = this.length;
    case 1:
      state0 = 0;
    default:
      var t1, t2, t3, t4, char$, token;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    t4 = this.position;
                  case 2:
                    state0 = 0;
                    if ($.geB(t4, t3))
                      return;
                    char$ = t2.charCodeAt$1(t1, this.position);
                    t4 = $._JsonParser_tokens;
                  case 3:
                    state0 = 0;
                    token = $.index(t4, char$);
                  case 4:
                    if (state0 === 4 || state0 === 0 && token === 32)
                      switch (state0) {
                        case 0:
                          t4 = this.position;
                        case 4:
                          state0 = 0;
                          this.position = $.add(t4, 1);
                          break c$0;
                      }
                    if (token == null)
                      return 0;
                    return token;
                }
              }
          }
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  if (!($._JsonParser_tokens == null))
    return;
  $._JsonParser_tokens = $.List_List(126);
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$._JsonStringifier = {"":"Object;sb>,seen",
 checkCycle$1: function(object) {
  var t1, t2, i, t3;
  for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
    t3 = t1[i];
    if (t3 == null ? object == null : t3 === object)
      throw $.$$throw("Cyclic structure");
  }
  t1.push(object);
},
 stringifyValue$1: function(object, exception) {
  var customJson, t1, e;
  if (this.stringifyJsonValue$1(object) !== true) {
    this.checkCycle$1(object);
    try {
      customJson = object.toJson$0();
      if (this.stringifyJsonValue$1(customJson) !== true)
        throw $.$$throw($.JsonUnsupportedObjectError$(object));
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
    }

  }
},
 stringifyJsonValue$1: function(object) {
  var t1, t2, t3, i;
  t1 = {};
  if (typeof object === 'number') {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, $.CONSTANT1.toString$0(object));
    return true;
  } else if (object === true) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "true");
    return true;
  } else if (object === false) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "false");
    return true;
  } else if (object == null) {
    t1 = this.sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "null");
    return true;
  } else if (typeof object === 'string') {
    t1 = this.sb;
    t2 = $.getInterceptor$JSArray(t1);
    t2.add$1(t1, "\"");
    $._JsonStringifier_escape(t1, object);
    t2.add$1(t1, "\"");
    return true;
  } else if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.stringifyJsonValue$1$bailout(1, object);
    this.checkCycle$1(object);
    t2 = this.sb;
    t3 = $.getInterceptor$JSArray(t2);
    t3.add$1(t2, "[");
    if (object.length > 0) {
      this.stringifyValue$1(object[0]);
      for (i = 1; i < object.length; ++i) {
        t3.add$1(t2, ",");
        if (i >= object.length)
          throw $.ioore(i);
        this.stringifyValue$1(object[i]);
      }
    }
    t3.add$1(t2, "]");
    t1 = this.seen;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
    return true;
  } else if (typeof object === 'object' && object !== null && object.is$Map()) {
    this.checkCycle$1(object);
    t2 = this.sb;
    t3 = $.getInterceptor$JSArray(t2);
    t3.add$1(t2, "{");
    t1.first_0 = true;
    object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
    t3.add$1(t2, "}");
    t2 = this.seen;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2.pop();
    return true;
  } else
    return false;
},
 stringifyJsonValue$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      object = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
    case 1:
      var t1, t2, object, t3, i;
      if (state0 === 0 && typeof object === 'number') {
        t1 = this.sb;
        $.getInterceptor$JSArray(t1).add$1(t1, $.CONSTANT1.toString$0(object));
        return true;
      } else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 0 && object === true) {
              t1 = this.sb;
              $.getInterceptor$JSArray(t1).add$1(t1, "true");
              return true;
            } else
              switch (state0) {
                case 0:
                case 1:
                  if (state0 === 0 && object === false) {
                    t1 = this.sb;
                    $.getInterceptor$JSArray(t1).add$1(t1, "false");
                    return true;
                  } else
                    switch (state0) {
                      case 0:
                      case 1:
                        if (state0 === 0 && object == null) {
                          t1 = this.sb;
                          $.getInterceptor$JSArray(t1).add$1(t1, "null");
                          return true;
                        } else
                          switch (state0) {
                            case 0:
                            case 1:
                              if (state0 === 0 && typeof object === 'string') {
                                t1 = this.sb;
                                t2 = $.getInterceptor$JSArray(t1);
                                t2.add$1(t1, "\"");
                                $._JsonStringifier_escape(t1, object);
                                t2.add$1(t1, "\"");
                                return true;
                              } else
                                switch (state0) {
                                  case 0:
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
                                      switch (state0) {
                                        case 0:
                                        case 1:
                                          state0 = 0;
                                          this.checkCycle$1(object);
                                          t2 = this.sb;
                                          t3 = $.getInterceptor$JSArray(t2);
                                          t3.add$1(t2, "[");
                                          t1 = $.getInterceptor$JSStringJSArray(object);
                                          if ($.gtB(t1.get$length(object), 0)) {
                                            this.stringifyValue$1($.index(object, 0));
                                            for (i = 1; $.ltB(i, t1.get$length(object)); ++i) {
                                              t3.add$1(t2, ",");
                                              this.stringifyValue$1($.index(object, i));
                                            }
                                          }
                                          t3.add$1(t2, "]");
                                          t1 = this.seen;
                                          if (0 >= t1.length)
                                            throw $.ioore(0);
                                          t1.pop();
                                          return true;
                                      }
                                    else if (typeof object === 'object' && object !== null && object.is$Map()) {
                                      this.checkCycle$1(object);
                                      t2 = this.sb;
                                      t3 = $.getInterceptor$JSArray(t2);
                                      t3.add$1(t2, "{");
                                      t1.first_0 = true;
                                      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                      t3.add$1(t2, "}");
                                      t2 = this.seen;
                                      if (0 >= t2.length)
                                        throw $.ioore(0);
                                      t2.pop();
                                      return true;
                                    } else
                                      return false;
                                }
                          }
                    }
              }
        }
  }
}
};

$$.ElementInstanceEvents = {"":"Events;_ptr",
 get$click: function() {
  return this.operator$index$1("click");
},
 click$0: function() {
  return this.get$click().call$0();
},
 get$keyDown: function() {
  return this.operator$index$1("keydown");
},
 get$keyUp: function() {
  return this.operator$index$1("keyup");
},
 get$load: function() {
  return this.operator$index$1("load");
},
 load$1: function(arg0) {
  return this.get$load().call$1(arg0);
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
},
 get$mouseUp: function() {
  return this.operator$index$1("mouseup");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() {
  return this.get$reset().call$0();
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.AudioContextEvents = {"":"Events;_ptr",
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) {
  return this.get$complete().call$1(arg0);
}
};

$$.ScriptProcessorNodeEvents = {"":"Events;_ptr"
};

$$.GameLoop = {"":"Object;element>,_initialized,_interrupt,_frameCounter,_previousFrameTime,_frameTime,_dt,_keyboard,_mouse,_gamepad0,_keyboardEvents,_mouseEvents,_timers,onUpdate<,onResize,onFullscreenChange",
 get$width: function() {
  return this.element.get$width();
},
 get$height: function() {
  return this.element.get$height();
},
 get$frame: function() {
  return this._frameCounter;
},
 get$dt: function() {
  return this._dt;
},
 get$time: function() {
  return $.GameLoop_timeStampToSeconds($.Date_Date$now().get$millisecondsSinceEpoch());
},
 get$mouse: function() {
  return this._mouse;
},
 _processInputEvents$0: function() {
  var t1, t2, t3, down, time, event$, moveEvent;
  for (t1 = this._keyboardEvents, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;) {
    t3 = t2.next$0();
    down = $.eq(t3.get$type(), "keydown");
    time = $.div(t3.get$timeStamp(), 1000);
    event$ = $.GameLoopDigitalButtonEvent$(t3.get$keyCode(), down, this.get$frame(), time);
    this._keyboard.digitalButtonEvent$1(event$);
  }
  $.CONSTANT0.clear$0(t1);
  this.get$mouse()._resetAccumulators$0();
  for (t1 = this._mouseEvents, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;) {
    t3 = t2.next$0();
    moveEvent = $.eqB(t3.get$type(), "mousemove");
    down = $.eq(t3.get$type(), "mousedown");
    time = $.div(t3.get$timeStamp(), 1000);
    if (moveEvent) {
      event$ = $.GameLoopMouseEvent$(t3.get$offsetX(), t3.get$offsetY(), t3.get$webkitMovementX(), t3.get$webkitMovementY(), time, this.get$frame());
      this._mouse.gameLoopMouseEvent$1(event$);
    } else {
      event$ = $.GameLoopDigitalButtonEvent$(t3.get$button(), down, this.get$frame(), time);
      this._mouse.digitalButtonEvent$1(event$);
    }
  }
  $.CONSTANT0.clear$0(t1);
},
 _processTimers$0: function() {
  var t1, t2, i, lastElement;
  for (t1 = this._timers, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;)
    t2.next$0()._update$1(this._dt);
  for (i = t1.length - 1; i >= 0; --i) {
    t2 = t1.length;
    lastElement = t2 - 1;
    if (i >= t2)
      throw $.ioore(i);
    if (t1[i].get$_dead() === true) {
      if (i !== lastElement) {
        if (lastElement < 0)
          throw $.ioore(lastElement);
        t1[i] = t1[lastElement];
      }
      if (0 >= t2)
        throw $.ioore(0);
      t1.pop();
    }
  }
},
 _requestAnimationFrame$1: function(_) {
  var t1, t3;
  if (this._previousFrameTime == null) {
    this._frameTime = this.get$time();
    this._previousFrameTime = this._frameTime;
    this._processInputEvents$0();
    $.window().requestAnimationFrame$1(this.get$_requestAnimationFrame());
    return;
  }
  if (this._interrupt)
    return;
  $.window().requestAnimationFrame$1(this.get$_requestAnimationFrame());
  this._frameCounter = this._frameCounter + 1;
  this._previousFrameTime = this._frameTime;
  this._frameTime = this.get$time();
  t1 = this._frameTime;
  if (typeof t1 !== 'number')
    return this._requestAnimationFrame$1$bailout(1, t1);
  t3 = this._previousFrameTime;
  if (typeof t3 !== 'number')
    return this._requestAnimationFrame$1$bailout(2, t1, t3);
  this._dt = t1 - t3;
  this._processInputEvents$0();
  this._processTimers$0();
  if (!(this.onUpdate == null))
    this.onUpdate$1(this);
},
 _requestAnimationFrame$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this._previousFrameTime == null) {
        this._frameTime = this.get$time();
        this._previousFrameTime = this._frameTime;
        this._processInputEvents$0();
        $.window().requestAnimationFrame$1(this.get$_requestAnimationFrame());
        return;
      }
      if (this._interrupt)
        return;
      $.window().requestAnimationFrame$1(this.get$_requestAnimationFrame());
      this._frameCounter = this._frameCounter + 1;
      this._previousFrameTime = this._frameTime;
      this._frameTime = this.get$time();
      t1 = this._frameTime;
    case 1:
      state0 = 0;
      t3 = this._previousFrameTime;
    case 2:
      var t1, t3;
      state0 = 0;
      this._dt = $.sub(t1, t3);
      this._processInputEvents$0();
      this._processTimers$0();
      if (!(this.onUpdate == null))
        this.onUpdate$1(this);
  }
},
 get$_requestAnimationFrame: function() {
  return new $.BoundClosure(this, '_requestAnimationFrame$1');
},
 _fullscreenChange$1: function(_) {
  var t1 = this.onFullscreenChange == null;
  if (t1)
    return;
  if (t1)
    return;
},
 get$_fullscreenChange: function() {
  return new $.BoundClosure(this, '_fullscreenChange$1');
},
 _fullscreenError$1: function(_) {
  if (this.onFullscreenChange == null)
    return;
  this.onFullscreenChange$1(this);
},
 get$_fullscreenError: function() {
  return new $.BoundClosure(this, '_fullscreenError$1');
},
 _keyDown$1: function(event$) {
  this._keyboardEvents.push(event$);
},
 get$_keyDown: function() {
  return new $.BoundClosure(this, '_keyDown$1');
},
 _keyUp$1: function(event$) {
  this._keyboardEvents.push(event$);
},
 get$_keyUp: function() {
  return new $.BoundClosure(this, '_keyUp$1');
},
 _mouseDown$1: function(event$) {
  this._mouseEvents.push(event$);
},
 get$_mouseDown: function() {
  return new $.BoundClosure(this, '_mouseDown$1');
},
 _mouseUp$1: function(event$) {
  this._mouseEvents.push(event$);
},
 get$_mouseUp: function() {
  return new $.BoundClosure(this, '_mouseUp$1');
},
 _mouseMove$1: function(event$) {
  this._mouseEvents.push(event$);
},
 get$_mouseMove: function() {
  return new $.BoundClosure(this, '_mouseMove$1');
},
 _resize$1: function(_) {
  if (!(this.onResize == null))
    this.onResize$1(this);
},
 get$_resize: function() {
  return new $.BoundClosure(this, '_resize$1');
},
 start$0: function() {
  var t1, t2;
  if (!this._initialized) {
    t1 = $.document().get$on().get$fullscreenError();
    $.getInterceptor$JSArray(t1).add$1(t1, this.get$_fullscreenError());
    t1 = $.document().get$on().get$fullscreenChange();
    $.getInterceptor$JSArray(t1).add$1(t1, this.get$_fullscreenChange());
    t1 = $.window().get$on().get$keyDown();
    $.getInterceptor$JSArray(t1).add$1(t1, this.get$_keyDown());
    t1 = $.window().get$on().get$keyUp();
    $.getInterceptor$JSArray(t1).add$1(t1, this.get$_keyUp());
    t1 = $.window().get$on().get$resize();
    $.getInterceptor$JSArray(t1).add$1(t1, this.get$_resize());
    t1 = this.element;
    t2 = t1.get$on().get$mouseMove();
    $.getInterceptor$JSArray(t2).add$1(t2, this.get$_mouseMove());
    t2 = t1.get$on().get$mouseDown();
    $.getInterceptor$JSArray(t2).add$1(t2, this.get$_mouseDown());
    t2 = t1.get$on().get$mouseUp();
    $.getInterceptor$JSArray(t2).add$1(t2, this.get$_mouseUp());
    this._initialized = true;
  }
  this._interrupt = false;
  $.window().requestAnimationFrame$1(this.get$_requestAnimationFrame());
},
 onUpdate$1: function(arg0) {
  return this.onUpdate.call$1(arg0);
},
 onResize$1: function(arg0) {
  return this.onResize.call$1(arg0);
},
 onFullscreenChange$1: function(arg0) {
  return this.onFullscreenChange.call$1(arg0);
},
 GameLoop$1: function(element) {
  this._keyboard = $.GameLoopKeyboard$(this);
  this._mouse = $.GameLoopMouse$(this);
  this._gamepad0 = $.GameLoopGamepad$(this);
}
};

$$.GameLoopDigitalButton = {"":"Object;buttonId,framePressed<,frameReleased<,timePressed<,timeReleased<",
 get$down: function() {
  return $.gt(this.framePressed, this.frameReleased);
}
};

$$.GameLoopDigitalButtonEvent = {"":"Object;down>,frame,buttonId,time",
 toString$0: function() {
  return "Button: " + $.S(this.buttonId) + " DOWN: " + $.S(this.down) + " [" + $.S(this.frame) + "@" + $.S(this.time) + "]";
}
};

$$.GameLoopDigitalInput = {"":"Object;",
 digitalButtonEvent$1: function(event$) {
  var t1, t3, button;
  t1 = this.buttons;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.digitalButtonEvent$1$bailout(1, event$, t1);
  t3 = event$.buttonId;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  button = t1[t3];
  if (button == null)
    return;
  if (event$.down === true) {
    t1 = button.get$down();
    if (typeof t1 !== 'boolean')
      return this.digitalButtonEvent$1$bailout(2, event$, t1, button);
    if (!t1) {
      button.set$framePressed(event$.frame);
      button.set$timePressed(event$.time);
    }
  } else {
    button.set$frameReleased(event$.frame);
    button.set$timeReleased(event$.time);
  }
},
 digitalButtonEvent$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      event$ = env0;
      break;
    case 2:
      button = env2;
      t1 = env1;
      event$ = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.buttons;
    case 1:
      state0 = 0;
      button = $.index(t1, event$.buttonId);
      if (button == null)
        return;
    case 2:
      var t1, event$, button;
      if (state0 === 2 || state0 === 0 && event$.down === true)
        switch (state0) {
          case 0:
            t1 = button.get$down();
          case 2:
            state0 = 0;
            if ($.eqB(t1, false)) {
              button.set$framePressed(event$.frame);
              button.set$timePressed(event$.time);
            }
        }
      else {
        button.set$frameReleased(event$.frame);
        button.set$timeReleased(event$.time);
      }
  }
},
 GameLoopDigitalInput$2: function(gameLoop, buttonIds) {
  var t1, t2, t3, t4;
  t1 = $.getInterceptor$JSArray(buttonIds).iterator$0(buttonIds);
  t2 = this.buttons;
  if (typeof t2 !== 'object' || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.is$JavaScriptIndexingBehavior())
    return this.GameLoopDigitalInput$2$bailout(1, t1, t2);
  for (; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    t4 = $.GameLoopDigitalButton$(t3);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = t4;
  }
},
 GameLoopDigitalInput$2$bailout: function(state0, t1, t2) {
  var t3;
  for (; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    $.indexSet(t2, t3, $.GameLoopDigitalButton$(t3));
  }
}
};

$$.GameLoopKeyboard = {"":"GameLoopDigitalInput;gameLoop,buttons"
};

$$.GameLoopMouseEvent = {"":"Object;x>,y>,dx,dy,time,frame"
};

$$.GameLoopMouse = {"":"GameLoopDigitalInput;_dx,_dy,_x,_y,_time,_frame,gameLoop,buttons",
 get$x: function() {
  return this._x;
},
 get$y: function() {
  return this._y;
},
 gameLoopMouseEvent$1: function(event$) {
  var t1, t2, t3, t4;
  this._x = event$.x;
  this._y = event$.y;
  this._time = event$.time;
  this._frame = event$.frame;
  t1 = this._dx;
  t2 = event$.dx;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  this._dx = t1 + t2;
  t3 = this._dy;
  t4 = event$.dy;
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  this._dy = t3 + t4;
},
 _resetAccumulators$0: function() {
  this._dx = 0;
  this._dy = 0;
}
};

$$.GameLoopGamepad = {"":"Object;gameLoop,buttons,sticks"
};

$$.Callback = {"":"Object;_manualDispose,_liblib1$_id>,_liblib1$_callback>",
 _liblib1$_callback$1: function(arg0) {
  return this._liblib1$_callback.call$1(arg0);
},
 _liblib1$_callback$1: function(arg0) {
  return this._liblib1$_callback.call$1(arg0);
},
 _liblib1$_callback$2: function(arg0, arg1) {
  return this._liblib1$_callback.call$2(arg0, arg1);
},
 get$_serialized: function() {
  return ["funcref", this._liblib1$_id, $.get$_proxiedObjectTable().get$sendPort()];
},
 _initialize$1: function(manualDispose) {
  var t1;
  this._manualDispose = manualDispose;
  t1 = $.get$_proxiedObjectTable();
  this._liblib1$_id = $.getInterceptor$JSArray(t1).add$1(t1, this._liblib1$_callback);
  $.get$_proxiedObjectTable().globalize$1(this._liblib1$_id);
},
 dispose$0: function() {
  $.get$_proxiedObjectTable().invalidate$1(this._liblib1$_id);
},
 Callback$many$1: function(f) {
  this._liblib1$_callback = f;
  this._initialize$1(true);
},
 is$Callback: true
};

$$.Proxy = {"":"Object;_port>,_liblib1$_id>",
 operator$index$1: function(arg) {
  return $.Proxy__forward(this, "[]", "method", [arg]);
},
 operator$indexSet$2: function(key, value) {
  return $.Proxy__forward(this, "[]=", "method", [key, value]);
},
 operator$eq$1: function(other) {
  var t1;
  if (this === other)
    t1 = true;
  else
    t1 = typeof other === 'object' && other !== null && !!other.is$Proxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
  return t1;
},
 noSuchMethod$1: function(invocation) {
  var member, args, t1, kind;
  member = invocation.get$memberName();
  args = invocation.get$positionalArguments();
  if (args == null)
    args = [];
  if (invocation.get$isGetter() === true) {
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "get:") === true)
      member = t1.substring$1(member, 4);
    kind = "get";
  } else if (invocation.get$isSetter() === true) {
    t1 = $.getInterceptor$JSString(member);
    if (t1.endsWith$1(member, "=") === true)
      member = t1.substring$2(member, 0, $.sub(t1.get$length(member), 1));
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "set:") === true)
      member = t1.substring$1(member, 4);
    kind = "set";
  } else {
    t1 = $.getInterceptor$JSString(member);
    if (t1.startsWith$1(member, "get:") === true) {
      member = t1.substring$1(member, 4);
      kind = "get";
    } else if (t1.startsWith$1(member, "set:") === true) {
      member = t1.substring$1(member, 4);
      kind = "set";
    } else
      kind = "method";
  }
  return $.Proxy__forward(this, member, kind, args);
},
 is$Proxy: true
};

$$._FunctionProxy = {"":"Proxy;_call,_port,_liblib1$_id",
 _FunctionProxy$_internal$2: function(port, id) {
  this._call = new $.anon1(port, id);
  $.indexSet($.get$_FunctionProxy__map(), this._call, this);
}
};

$$._ProxiedObjectTable = {"":"Object;_name,_nextId,_deletedCount,_registry>,_port>,_globalIds,_handleStack,_scopeIndices>",
 enterScope$0: function() {
  $.CONSTANT0.addLast$1(this._scopeIndices, this._handleStack.length);
},
 exitScope$0: function() {
  var t1, start, t2, t3, t4, i, t5;
  t1 = this._scopeIndices;
  if (0 >= t1.length)
    throw $.ioore(0);
  start = t1.pop();
  if (start !== (start | 0))
    return this.exitScope$0$bailout(1, start);
  for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, t4 = $.getInterceptor$JSStringJSArray(t3), i = start; t5 = t2.length, i < t5; ++i) {
    if (i < 0)
      throw $.ioore(i);
    if (t4.contains$1(t3, t2[i]) !== true) {
      if (i >= t2.length)
        throw $.ioore(i);
      t1.remove$1(t2[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  $.CONSTANT0.removeRange$2(t2, start, t5 - start);
},
 exitScope$0$bailout: function(state0, start) {
  var t1, t2, t3, t4, i, t5, t6;
  for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, t4 = $.getInterceptor$JSStringJSArray(t3), i = start; t5 = $.ltB(i, t2.length), t6 = t2.length, t5; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t6)
      throw $.ioore(i);
    if (t4.contains$1(t3, t2[i]) !== true) {
      if (i >= t2.length)
        throw $.ioore(i);
      t1.remove$1(t2[i]);
      this._deletedCount = this._deletedCount + 1;
    }
  }
  if (typeof start !== 'number')
    throw $.iae(start);
  $.CONSTANT0.removeRange$2(t2, start, t6 - start);
},
 globalize$1: function(id) {
  var t1 = this._globalIds;
  return $.getInterceptor$JSArray(t1).add$1(t1, id);
},
 invalidate$1: function(id) {
  var t1, old;
  t1 = this._registry;
  old = $.index(t1, id);
  this._globalIds.remove$1(id);
  t1.remove$1(id);
  this._deletedCount = this._deletedCount + 1;
  return old;
},
 add$1: function(x) {
  var t1, t2, id;
  if (this._scopeIndices.length === 0)
    throw $.$$throw("Must be inside scope to allocate.");
  t1 = this._name + "-";
  t2 = this._nextId;
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(1, x, t2, t1);
  this._nextId = t2 + 1;
  id = t1 + $.S(t2);
  $.indexSet(this._registry, id, x);
  $.CONSTANT0.addLast$1(this._handleStack, id);
  return id;
},
 add$1$bailout0: function(state0, x, t2, t1) {
  var id;
  this._nextId = $.add(t2, 1);
  id = t1 + $.S(t2);
  $.indexSet(this._registry, id, x);
  $.CONSTANT0.addLast$1(this._handleStack, id);
  return id;
},
 get$1: function(id) {
  return $.index(this._registry, id);
},
 get$sendPort: function() {
  return this._port.toSendPort$0();
},
 _ProxiedObjectTable$0: function() {
  this._port.receive$1(new $.anon0(this));
}
};

$$.Game = {"":"Object;gameLoop,screenManager>,renderContext,resources,loadedResources,totalResources,onLoadComplete,loadingScreen",
 onLoadComplete$0: function() {
  return this.onLoadComplete.call$0();
},
 update$1: function(gameLoop) {
  this.screenManager.update$1(gameLoop);
  this.screenManager.draw$0();
},
 get$update: function() {
  return new $.BoundClosure(this, 'update$1');
},
 load$0: function() {
  $.AudioManager_setup();
  var t1 = this.resources.get$values();
  this.totalResources = $.getInterceptor$JSArray(t1).reduce$2(t1, 0, new $.Game_load_anon());
  for (t1 = $.index(this.resources, "textures"), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    $.TextureManager_load(t1.next$0(), this.get$fileLoaded());
  for (t1 = $.index(this.resources, "audio"), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    $.AudioManager_load(t1.next$0(), this.get$fileLoaded());
},
 get$load: function() {
  return new $.BoundClosure0(this, 'load$0');
},
 fileLoaded$1: function(resourceLoaded) {
  this.loadedResources = this.loadedResources + 1;
  this.loadingScreen.updateProgress$2(this.loadedResources, this.totalResources);
  if (this.loadedResources === this.totalResources && !(this.onLoadComplete == null))
    this.onLoadComplete$0();
},
 get$fileLoaded: function() {
  return new $.BoundClosure(this, 'fileLoaded$1');
},
 start$0: function() {
  this.screenManager = $.ScreenManager$("canvas-container", $.Size$(480, 640));
  this.loadingScreen = $.LoadingScreen$(this.screenManager);
  this.screenManager.addScreen$1(this.loadingScreen);
  this.load$0();
  this.gameLoop = $.GameLoop$(this.screenManager.get$canvasElement());
  var t1 = this.get$update();
  this.gameLoop.set$onUpdate(t1);
  this.gameLoop.start$0();
}
};

$$.Texture = {"":"Object;name,image>,onLoadCallbacks,loaded",
 runLoadCallbacks$0: function() {
  var t1, t2;
  this.loaded = true;
  for (t1 = this.onLoadCallbacks, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;)
    t2.next$0().call$1(this);
  $.CONSTANT0.clear$0(t1);
},
 onLoad$1: function(callback) {
  if (this.loaded) {
    callback.call$1(this);
    return;
  }
  this.onLoadCallbacks.push(callback);
},
 Texture$2: function(name$, image) {
  var t1 = this.image.get$on().get$load();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.anon4(this));
}
};

$$.vec2 = {"":"Object;x=,y=",
 makeZero$0: function() {
  this.x = 0;
  this.y = 0;
  return this;
},
 makeCopy$1: function(other) {
  this.x = other.get$x();
  this.y = other.get$y();
  return this;
},
 makeRaw$2: function(x_, y_) {
  this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
  this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
  return this;
},
 toString$0: function() {
  return $.S(this.x) + "," + $.S(this.y);
},
 operator$sub$1: function(other) {
  return $.vec2$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()));
},
 operator$add$1: function(other) {
  return $.vec2$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$div$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec2$raw($.div(this.x, other), $.div(this.y, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec2)
    return $.vec2$raw($.div(this.x, other.x), $.div(this.y, other.y));
},
 operator$mul$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec2$raw($.mul(this.x, other), $.mul(this.y, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec2)
    return $.vec2$raw($.mul(this.x, other.x), $.mul(this.y, other.y));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 normalize$0: function() {
  var l = this.get$length();
  if ($.eqB(l, 0))
    return this;
  this.x = $.div(this.x, l);
  this.y = $.div(this.y, l);
  return this;
},
 set$xy: function(arg) {
  this.x = arg.get$x();
  this.y = arg.get$y();
},
 get$isInfinite: function() {
  var t1, is_infinite;
  t1 = this.x;
  is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  if (!is_infinite) {
    t1 = this.y;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  return is_infinite;
},
 get$isNaN: function() {
  var t1, is_nan;
  t1 = this.x;
  is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  if (!is_nan) {
    t1 = this.y;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  return is_nan;
},
 get$xy: function() {
  return $.vec2$(this.x, this.y);
},
 add$1: function(arg) {
  var t1, t3, t5, t7;
  t1 = this.x;
  if (typeof t1 !== 'number')
    return this.add$1$bailout3(1, arg, t1);
  t3 = arg.get$x();
  if (typeof t3 !== 'number')
    return this.add$1$bailout3(2, arg, t3, t1);
  this.x = t1 + t3;
  t5 = this.y;
  if (typeof t5 !== 'number')
    return this.add$1$bailout3(3, arg, t5);
  t7 = arg.get$y();
  if (typeof t7 !== 'number')
    return this.add$1$bailout3(4, t5, t7);
  this.y = t5 + t7;
  return this;
},
 add$1$bailout3: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      arg = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      arg = env0;
      break;
    case 3:
      t5 = env1;
      arg = env0;
      break;
    case 4:
      t7 = env1;
      t5 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.x;
    case 1:
      state0 = 0;
      t3 = arg.get$x();
    case 2:
      state0 = 0;
      this.x = $.add(t1, t3);
      t5 = this.y;
    case 3:
      state0 = 0;
      t7 = arg.get$y();
    case 4:
      var t1, arg, t3, t5, t7;
      state0 = 0;
      this.y = $.add(t5, t7);
      return this;
  }
},
 vec2$zero$0: function() {
  this.makeZero$0();
},
 vec2$copy$1: function(other) {
  this.makeCopy$1(other);
},
 vec2$raw$2: function(x_, y_) {
  this.makeRaw$2(x_, y_);
},
 vec2$2: function(x_, y_) {
  var t1;
  this.y = 0;
  this.x = 0;
  if (typeof x_ === 'object' && x_ !== null && !!x_.is$vec2) {
    this.set$xy(x_.get$xy());
    return;
  }
  if (typeof x_ === 'number' && typeof y_ === 'number') {
    this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
    this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
    return;
  }
  if (typeof x_ === 'number') {
    t1 = $.CONSTANT1.toDouble$0(x_);
    this.y = t1;
    this.x = t1;
    return;
  }
  throw $.$$throw($.ArgumentError$("Invalid arguments"));
},
 is$vec2: true
};

$$.vec3 = {"":"Object;x=,y=,z=",
 makeZero$0: function() {
  this.x = 0;
  this.y = 0;
  this.z = 0;
  return this;
},
 makeCopy$1: function(other) {
  this.x = other.get$x();
  this.y = other.get$y();
  this.z = other.get$z();
  return this;
},
 makeRaw$3: function(x_, y_, z_) {
  this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
  this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
  this.z = $.getInterceptor$JSNumber(z_).toDouble$0(z_);
  return this;
},
 toString$0: function() {
  return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z);
},
 operator$sub$1: function(other) {
  return $.vec3$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()), $.sub(this.z, other.get$z()));
},
 operator$add$1: function(other) {
  return $.vec3$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()), $.add(this.z, other.get$z()));
},
 operator$div$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec3$raw($.div(this.x, other), $.div(this.y, o), $.div(this.z, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec3)
    return $.vec3$raw($.div(this.x, other.x), $.div(this.y, other.y), $.div(this.z, other.z));
},
 operator$mul$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec3$raw($.mul(this.x, other), $.mul(this.y, o), $.mul(this.z, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec3)
    return $.vec3$raw($.mul(this.x, other.x), $.mul(this.y, other.y), $.mul(this.z, other.z));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
    case 2:
      this.z = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.z;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 normalize$0: function() {
  var l = this.get$length();
  if ($.eqB(l, 0))
    return this;
  this.x = $.div(this.x, l);
  this.y = $.div(this.y, l);
  this.z = $.div(this.z, l);
  return this;
},
 get$isInfinite: function() {
  var t1, is_infinite;
  t1 = this.x;
  is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  if (!is_infinite) {
    t1 = this.y;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  if (!is_infinite) {
    t1 = this.z;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  return is_infinite;
},
 get$isNaN: function() {
  var t1, is_nan;
  t1 = this.x;
  is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  if (!is_nan) {
    t1 = this.y;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  if (!is_nan) {
    t1 = this.z;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  return is_nan;
},
 add$1: function(arg) {
  var t1, t3, t5, t7, t9, t11;
  t1 = this.x;
  if (typeof t1 !== 'number')
    return this.add$1$bailout5(1, arg, t1);
  t3 = arg.get$x();
  if (typeof t3 !== 'number')
    return this.add$1$bailout5(2, arg, t1, t3);
  this.x = t1 + t3;
  t5 = this.y;
  if (typeof t5 !== 'number')
    return this.add$1$bailout5(3, arg, t5);
  t7 = arg.get$y();
  if (typeof t7 !== 'number')
    return this.add$1$bailout5(4, arg, t7, t5);
  this.y = t5 + t7;
  t9 = this.z;
  if (typeof t9 !== 'number')
    return this.add$1$bailout5(5, t9, arg);
  t11 = arg.get$z();
  if (typeof t11 !== 'number')
    return this.add$1$bailout5(6, t9, t11);
  this.z = t9 + t11;
  return this;
},
 add$1$bailout5: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      arg = env0;
      break;
    case 2:
      t3 = env2;
      t1 = env1;
      arg = env0;
      break;
    case 3:
      t5 = env1;
      arg = env0;
      break;
    case 4:
      t5 = env2;
      t7 = env1;
      arg = env0;
      break;
    case 5:
      arg = env1;
      t9 = env0;
      break;
    case 6:
      t11 = env1;
      t9 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.x;
    case 1:
      state0 = 0;
      t3 = arg.get$x();
    case 2:
      state0 = 0;
      this.x = $.add(t1, t3);
      t5 = this.y;
    case 3:
      state0 = 0;
      t7 = arg.get$y();
    case 4:
      state0 = 0;
      this.y = $.add(t5, t7);
      t9 = this.z;
    case 5:
      state0 = 0;
      t11 = arg.get$z();
    case 6:
      var t1, arg, t3, t5, t7, t9, t11;
      state0 = 0;
      this.z = $.add(t9, t11);
      return this;
  }
},
 vec3$zero$0: function() {
  this.makeZero$0();
},
 vec3$copy$1: function(other) {
  this.makeCopy$1(other);
},
 vec3$raw$3: function(x_, y_, z_) {
  this.makeRaw$3(x_, y_, z_);
},
 is$vec3: true
};

$$.vec4 = {"":"Object;x=,y=,z=,w=",
 makeZero$0: function() {
  this.x = 0;
  this.y = 0;
  this.z = 0;
  this.w = 0;
  return this;
},
 makeCopy$1: function(other) {
  this.x = other.get$x();
  this.y = other.get$y();
  this.z = other.get$z();
  this.w = other.get$w();
  return this;
},
 makeRaw$4: function(x_, y_, z_, w_) {
  this.x = $.getInterceptor$JSNumber(x_).toDouble$0(x_);
  this.y = $.getInterceptor$JSNumber(y_).toDouble$0(y_);
  this.z = $.getInterceptor$JSNumber(z_).toDouble$0(z_);
  this.w = $.getInterceptor$JSNumber(w_).toDouble$0(w_);
  return this;
},
 toString$0: function() {
  return $.S(this.x) + "," + $.S(this.y) + "," + $.S(this.z) + "," + $.S(this.w);
},
 operator$sub$1: function(other) {
  return $.vec4$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()), $.sub(this.z, other.get$z()), $.sub(this.w, other.get$w()));
},
 operator$add$1: function(other) {
  return $.vec4$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()), $.add(this.z, other.get$z()), $.add(this.w, other.get$w()));
},
 operator$div$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec4$raw($.div(this.x, other), $.div(this.y, o), $.div(this.z, o), $.div(this.w, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec4)
    return $.vec4$raw($.div(this.x, other.x), $.div(this.y, other.y), $.div(this.z, other.z), $.div(this.w, other.w));
},
 operator$mul$1: function(other) {
  var o;
  if (typeof other === 'number') {
    o = $.CONSTANT1.toDouble$0(other);
    return $.vec4$raw($.mul(this.x, other), $.mul(this.y, o), $.mul(this.z, o), $.mul(this.w, o));
  }
  if (typeof other === 'object' && other !== null && !!other.is$vec4)
    return $.vec4$raw($.mul(this.x, other.x), $.mul(this.y, other.y), $.mul(this.z, other.z), $.mul(this.w, other.w));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
    case 3:
      return this.w;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
    case 2:
      this.z = v;
      break;
    case 3:
      this.w = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.z;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.w;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 normalize$0: function() {
  var l = this.get$length();
  if ($.eqB(l, 0))
    return this;
  this.x = $.div(this.x, l);
  this.y = $.div(this.y, l);
  this.z = $.div(this.z, l);
  this.w = $.div(this.w, l);
  return this;
},
 get$isInfinite: function() {
  var t1, is_infinite;
  t1 = this.x;
  is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  if (!is_infinite) {
    t1 = this.y;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  if (!is_infinite) {
    t1 = this.z;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  if (!is_infinite) {
    t1 = this.w;
    is_infinite = $.getInterceptor$JSNumber(t1).get$isInfinite(t1) === true;
  } else
    is_infinite = true;
  return is_infinite;
},
 get$isNaN: function() {
  var t1, is_nan;
  t1 = this.x;
  is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  if (!is_nan) {
    t1 = this.y;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  if (!is_nan) {
    t1 = this.z;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  if (!is_nan) {
    t1 = this.w;
    is_nan = $.getInterceptor$JSNumber(t1).get$isNaN(t1) === true;
  } else
    is_nan = true;
  return is_nan;
},
 add$1: function(arg) {
  var t1, t3, t5, t7, t9, t11, t13, t15;
  t1 = this.x;
  if (typeof t1 !== 'number')
    return this.add$1$bailout4(1, arg, t1);
  t3 = arg.get$x();
  if (typeof t3 !== 'number')
    return this.add$1$bailout4(2, arg, t1, t3);
  this.x = t1 + t3;
  t5 = this.y;
  if (typeof t5 !== 'number')
    return this.add$1$bailout4(3, arg, t5);
  t7 = arg.get$y();
  if (typeof t7 !== 'number')
    return this.add$1$bailout4(4, arg, t7, t5);
  this.y = t5 + t7;
  t9 = this.z;
  if (typeof t9 !== 'number')
    return this.add$1$bailout4(5, arg, t9);
  t11 = arg.get$z();
  if (typeof t11 !== 'number')
    return this.add$1$bailout4(6, arg, t9, t11);
  this.z = t9 + t11;
  t13 = this.w;
  if (typeof t13 !== 'number')
    return this.add$1$bailout4(7, arg, t13);
  t15 = arg.get$w();
  if (typeof t15 !== 'number')
    return this.add$1$bailout4(8, t15, t13);
  this.w = t13 + t15;
  return this;
},
 add$1$bailout4: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      arg = env0;
      break;
    case 2:
      t3 = env2;
      t1 = env1;
      arg = env0;
      break;
    case 3:
      t5 = env1;
      arg = env0;
      break;
    case 4:
      t5 = env2;
      t7 = env1;
      arg = env0;
      break;
    case 5:
      t9 = env1;
      arg = env0;
      break;
    case 6:
      t11 = env2;
      t9 = env1;
      arg = env0;
      break;
    case 7:
      t13 = env1;
      arg = env0;
      break;
    case 8:
      t13 = env1;
      t15 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.x;
    case 1:
      state0 = 0;
      t3 = arg.get$x();
    case 2:
      state0 = 0;
      this.x = $.add(t1, t3);
      t5 = this.y;
    case 3:
      state0 = 0;
      t7 = arg.get$y();
    case 4:
      state0 = 0;
      this.y = $.add(t5, t7);
      t9 = this.z;
    case 5:
      state0 = 0;
      t11 = arg.get$z();
    case 6:
      state0 = 0;
      this.z = $.add(t9, t11);
      t13 = this.w;
    case 7:
      state0 = 0;
      t15 = arg.get$w();
    case 8:
      var t1, arg, t3, t5, t7, t9, t11, t13, t15;
      state0 = 0;
      this.w = $.add(t13, t15);
      return this;
  }
},
 vec4$zero$0: function() {
  this.makeZero$0();
},
 vec4$copy$1: function(other) {
  this.makeCopy$1(other);
},
 vec4$raw$4: function(x_, y_, z_, w_) {
  this.makeRaw$4(x_, y_, z_, w_);
},
 is$vec4: true
};

$$.Size = {"":"Object;width=,height=",
 Size$2$height$width: function(height, width) {
  this.width = width;
  this.height = height;
}
};

$$.ScreenManager = {"":"Object;_screens,canvasElement>,_stage=",
 get$screens: function() {
  return this._screens;
},
 get$screenWidth: function() {
  return this.canvasElement.get$clientWidth();
},
 get$screenHeight: function() {
  return this.canvasElement.get$clientHeight();
},
 addScreen$1: function(screenToAdd) {
  var t1 = this.get$screens();
  $.getInterceptor$JSArray(t1).add$1(t1, screenToAdd);
  $.scoped(new $.ScreenManager_addScreen_anon(this, screenToAdd));
},
 update$1: function(gameLoop) {
  var t1;
  for (t1 = this.get$screens(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().update$1(gameLoop);
},
 draw$0: function() {
  for (var t1 = this.get$screens(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().draw$0();
},
 cleanup$0: function() {
  for (var t1 = this.get$screens(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().cleanup$0();
  var t1 = this.get$screens();
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 setScreen$1: function(screen$) {
  var t1;
  $.scoped(new $.ScreenManager_setScreen_anon(this));
  for (t1 = this.get$screens(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().cleanup$0();
  t1 = this.get$screens();
  $.getInterceptor$JSArray(t1).clear$0(t1);
  this.addScreen$1(screen$);
},
 ScreenManager$2: function(canvasId, canvasSize) {
  this.canvasElement = $.document().query$1("#" + $.S(canvasId));
  $.scoped(new $.anon3(this, canvasId, canvasSize));
}
};

$$.GameScreen = {"":"Object;screenManager>,_layer=,dirty=",
 get$width: function() {
  return this.screenManager.get$screenWidth();
},
 get$height: function() {
  return this.screenManager.get$screenHeight();
},
 get$layer: function() {
  return this._layer;
},
 update$1: function(gameLoop) {
  this.updateElements$1(gameLoop);
},
 draw$0: function() {
  var t1 = this.get$elements();
  if ($.getInterceptor$JSArray(t1).some$1(t1, new $.GameScreen_draw_anon()) === true || this.dirty === true) {
    for (t1 = this.get$elements(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
      t1.next$0().set$dirty(false);
    this.dirty = false;
    this.drawElements$0();
    $.scoped(new $.GameScreen_draw_anon0(this));
  }
},
 cleanup$0: function() {
  for (var t1 = this.get$elements(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().cleanup$0();
  var t1 = this.get$elements();
  $.getInterceptor$JSArray(t1).clear$0(t1);
},
 get$elements: function() {
  return this._elements;
},
 addScreenElement$1: function(elementToAdd) {
  var t1 = this.get$elements();
  $.getInterceptor$JSArray(t1).add$1(t1, elementToAdd);
},
 removeElement$1: function(elementToRemove) {
  var t1, t2, t3;
  t1 = this.get$elements();
  t2 = $.getInterceptor$JSArray(t1);
  t3 = this.get$elements();
  t2.removeAt$1(t1, $.getInterceptor$JSStringJSArray(t3).indexOf$1(t3, elementToRemove));
  this.dirty = true;
  elementToRemove.cleanup$0();
  $.scoped(new $.GameScreen_removeElement_anon(elementToRemove));
},
 updateElements$1: function(gameLoop) {
  var t1;
  for (t1 = this.get$elements(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().update$1(gameLoop);
},
 drawElements$0: function() {
  for (var t1 = this.get$elements(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;)
    t1.next$0().draw$0();
},
 GameScreen$1: function(screenManager) {
  this.screenManager = screenManager;
  $.scoped(new $.anon2(this));
}
};

$$.ScreenElement = {"":"Object;shape=,dirty=",
 get$screen: function() {
  return this._screen;
},
 get$pos: function() {
  return $.scoped(new $.ScreenElement_pos_anon0(this));
},
 set$pos: function(value) {
  return $.scoped(new $.ScreenElement_pos_anon(this, value));
},
 get$scale: function() {
  return $.scoped(new $.ScreenElement_scale_anon(this));
},
 set$scale: function(value) {
  return $.scoped(new $.ScreenElement_scale_anon0(this, value));
},
 cleanup$0: function() {
},
 moveToTop$0: function() {
  $.scoped(new $.ScreenElement_moveToTop_anon(this));
},
 moveToBottom$0: function() {
  $.scoped(new $.ScreenElement_moveToBottom_anon(this));
}
};

$$.Audio = {"":"Object;name,onLoadCallbacks,loaded,_failed,_liblib2$_buffer,_audioContext",
 runLoadCallbacks$0: function() {
  var t1, t2;
  this.loaded = true;
  for (t1 = this.onLoadCallbacks, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;)
    t2.next$0().call$1(this);
  $.CONSTANT0.clear$0(t1);
},
 play$1$when: function(when) {
  var t1, source;
  if (this.loaded && !this._failed) {
    $.print("playing");
    t1 = this._audioContext;
    source = t1.createBufferSource$0();
    source.set$buffer(this._liblib2$_buffer);
    source.connect$3(t1.get$destination(), 0, 0);
    source.start$1(when);
  }
},
 play$0: function() {
  return this.play$1$when(0);
},
 load$1: function(buffer) {
  this._liblib2$_buffer = buffer;
  this.loaded = true;
},
 get$load: function() {
  return new $.BoundClosure(this, 'load$1');
},
 onLoadFailure$0: function() {
  $.print("Failed to load " + $.S(this.name));
  this._failed = true;
},
 onLoad$1: function(callback) {
  if (this.loaded) {
    callback.call$1(this);
    return;
  }
  this.onLoadCallbacks.push(callback);
}
};

$$.LoadingScreen = {"":"GameScreen;progressBar=,screenManager,_layer,dirty,_elements",
 updateProgress$2: function(current, total) {
  var percentage = $.div(current, total);
  $.scoped(new $.LoadingScreen_updateProgress_anon(percentage, this));
  $.print("Loaded " + $.S(percentage) + "%");
},
 LoadingScreen$1: function(screenManager) {
  $.scoped(new $.anon(this));
}
};

$$.HomeScreen = {"":"GameScreen;screenManager,_layer,dirty,_elements",
 showGame$0: function() {
  $.document().get$body().get$style().set$cursor("default");
  var t1 = this.screenManager;
  t1.setScreen$1($.GameplayScreen$(t1));
  $.print("Now showing game");
},
 HomeScreen$1: function(screenManager) {
  var background, new_game_button, heading;
  background = $.ImageScreenElement$($.TextureManager_get("background.png"), this);
  this.addScreenElement$1(background);
  background.moveToBottom$0();
  new_game_button = $.Button$($.vec2$(0, 200), "new_game.png", new $.anon5(this), this);
  new_game_button.set$scale($.Size$(0.5, 0.5));
  new_game_button.set$pos($.vec2$($.sub($.div(screenManager.get$screenWidth(), 2), $.div(new_game_button.get$size().get$width(), 2)), $.sub($.div(screenManager.get$screenHeight(), 2), $.div(new_game_button.get$size().get$height(), 2))));
  this.addScreenElement$1(new_game_button);
  heading = $.ImageScreenElement$($.TextureManager_get("heading.png"), this);
  heading.set$pos($.vec2$($.sub($.div(screenManager.get$screenWidth(), 2), $.div(heading.get$size().get$width(), 2)), 150));
  this.addScreenElement$1(heading);
}
};

$$.Button = {"":"ImageScreenElement;_liblib3$_callback>,_mouseOverCallback=,_mouseOutCallback=,_clickCallback=,_texture,shape,dirty,_screen",
 _liblib3$_callback$1: function(arg0) {
  return this._liblib3$_callback.call$1(arg0);
},
 _liblib3$_callback$1: function(arg0) {
  return this._liblib3$_callback.call$1(arg0);
},
 _liblib3$_callback$2: function(arg0, arg1) {
  return this._liblib3$_callback.call$2(arg0, arg1);
},
 update$1: function(gameLoop) {
},
 setCallback$1: function(newCallback) {
  this._liblib3$_callback = newCallback;
},
 click$0: function() {
  $.AudioManager_get("click.ogg").play$0();
  this._liblib3$_callback$1(this);
},
 cleanup$0: function() {
  $.scoped(new $.Button_cleanup_anon(this));
  $.ScreenElement.prototype.cleanup$0.call(this);
},
 Button$4: function(pos, texturePath, callback, gameScreen) {
  this.set$pos(pos);
  this._liblib3$_callback = callback;
  $.scoped(new $.anon6(this));
}
};

$$.ImageScreenElement = {"":"ScreenElement;_texture,shape,dirty,_screen",
 get$texture: function() {
  return this._texture;
},
 get$size: function() {
  var t1 = $.mul(this.get$texture().get$image().get$width(), this.get$scale().get$width());
  return $.Size$($.mul(this.get$texture().get$image().get$height(), this.get$scale().get$height()), t1);
},
 get$center: function() {
  return $.vec2$($.add(this.get$pos().get$x(), $.div(this.get$size().get$width(), 2)), $.add(this.get$pos().get$y(), $.div(this.get$size().get$height(), 2)));
},
 onTextureLoad$1: function(texture) {
  $.scoped(new $.ImageScreenElement_onTextureLoad_anon(this, texture));
},
 get$onTextureLoad: function() {
  return new $.BoundClosure(this, 'onTextureLoad$1');
},
 update$1: function(gameLoop) {
},
 draw$0: function() {
},
 ImageScreenElement$2: function(texture, gameScreen) {
  this._texture = texture;
  this._texture.onLoad$1(this.get$onTextureLoad());
}
};

$$.GameplayScreen = {"":"GameScreen;forts>,running,screenManager,_layer,dirty,_elements",
 setupWorld$0: function() {
  var t1, t2, worldSize, rnf, i, node, nodeSize, isPosValid, t3, xPos, t4, t5, numberOfNeighbours, orphanForts, player, playerFortId, enemy, t6, t7, enemyFortId;
  for (t1 = this.forts, t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;)
    this.removeElement$1(t2.next$0());
  $.CONSTANT0.clear$0(t1);
  worldSize = $.Size$(480, 640);
  rnf = $.Random_Random(null);
  for (i = 0; i < 10; ++i) {
    t2 = {};
    node = $.FortNode$(this);
    node.set$scale($.Size$(0.5, 0.5));
    nodeSize = node.get$size();
    t2.nodePos_0 = $.vec2$(0, 0);
    for (isPosValid = false; isPosValid !== true;) {
      t3 = $.div(nodeSize.get$width(), 2);
      xPos = $.add($.mul($.add($.sub($.sub(worldSize.width, nodeSize.get$width()), t3), 1), rnf.nextDouble$0()), t3);
      t3 = $.div(nodeSize.get$height(), 2);
      t2.nodePos_0 = $.vec2$(xPos, $.add($.mul($.add($.sub($.sub(worldSize.height, nodeSize.get$height()), t3), 1), rnf.nextDouble$0()), t3));
      isPosValid = $.CONSTANT0.every$1(t1, new $.GameplayScreen_setupWorld_anon(t2, nodeSize));
    }
    node.set$pos(t2.nodePos_0);
    t1.push(node);
    this.addScreenElement$1(node);
  }
  for (t2 = $.CONSTANT0.iterator$0(t1); t2.get$hasNext() === true;) {
    t3 = {};
    t4 = t2.next$0();
    $.CONSTANT0.sort$1(t1, new $.GameplayScreen_setupWorld_anon0(t4));
    t5 = rnf.nextDouble$0();
    if (typeof t5 !== 'number')
      throw $.iae(t5);
    numberOfNeighbours = $.CONSTANT1.toInt$0(2 * t5 + 2);
    t3.neighbourCount_1 = 0;
    t4.addNeighbours$1($.CONSTANT0.filter$1(t1, new $.GameplayScreen_setupWorld_anon1(t3, t4, numberOfNeighbours)));
  }
  orphanForts = $.CONSTANT0.filter$1(t1, new $.GameplayScreen_setupWorld_anon2());
  for (t2 = $.getInterceptor$JSArray(orphanForts), t3 = t2.iterator$0(orphanForts); t3.get$hasNext() === true;) {
    t4 = t3.next$0();
    $.CONSTANT0.removeAt$1(t1, $.CONSTANT0.indexOf$1(t1, t4));
    this.removeElement$1(t4);
  }
  $.print("Pruned " + $.S(t2.get$length(orphanForts)) + " forts.");
  player = $.Player_get(1);
  t3 = t1.length - 1 - 0 + 1;
  t4 = rnf.nextDouble$0();
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  playerFortId = t3 * t4 + 0;
  t5 = $.CONSTANT1.toInt$0(playerFortId);
  if (t5 !== (t5 | 0))
    throw $.iae(t5);
  if (t5 < 0 || t5 >= t1.length)
    throw $.ioore(t5);
  t1[t5].changePlayer$1(player);
  enemy = $.Player_get(2);
  t6 = t1.length - 1 - 0 + 1;
  t7 = rnf.nextDouble$0();
  if (typeof t7 !== 'number')
    throw $.iae(t7);
  enemyFortId = t6 * t7 + 0;
  for (; enemyFortId === playerFortId;) {
    t2 = t1.length - 1 - 0 + 1;
    t3 = rnf.nextDouble$0();
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    enemyFortId = t2 * t3 + 0;
  }
  t2 = $.CONSTANT1.toInt$0(enemyFortId);
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2].changePlayer$1(enemy);
},
 update$1: function(gameLoop) {
  var t1, playerForts, enemyForts;
  t1 = this.forts;
  playerForts = $.CONSTANT0.filter$1(t1, new $.GameplayScreen_update_anon());
  enemyForts = $.CONSTANT0.filter$1(t1, new $.GameplayScreen_update_anon0());
  if (this.running) {
    t1 = $.getInterceptor$JSStringJSArray(playerForts).get$length(playerForts);
    if (typeof t1 !== 'number')
      return this.update$1$bailout(1, gameLoop, t1, enemyForts);
    if (t1 === 0)
      this.displayGameOver$0();
    else {
      t1 = $.getInterceptor$JSStringJSArray(enemyForts).get$length(enemyForts);
      if (typeof t1 !== 'number')
        return this.update$1$bailout(2, gameLoop, t1);
      if (t1 === 0)
        this.displayVictory$0();
      else
        $.GameScreen.prototype.update$1.call(this, gameLoop);
    }
  }
},
 update$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      enemyForts = env2;
      t1 = env1;
      gameLoop = env0;
      break;
    case 2:
      t1 = env1;
      gameLoop = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.forts;
      playerForts = $.CONSTANT0.filter$1(t1, new $.GameplayScreen_update_anon());
      enemyForts = $.CONSTANT0.filter$1(t1, new $.GameplayScreen_update_anon0());
    default:
      var t1, playerForts, enemyForts, gameLoop;
      if (state0 === 2 || state0 === 1 || state0 === 0 && this.running)
        switch (state0) {
          case 0:
            t1 = $.getInterceptor$JSStringJSArray(playerForts).get$length(playerForts);
          case 1:
            state0 = 0;
          case 2:
            if (state0 === 0 && $.eqB(t1, 0))
              this.displayGameOver$0();
            else
              switch (state0) {
                case 0:
                  t1 = $.getInterceptor$JSStringJSArray(enemyForts).get$length(enemyForts);
                case 2:
                  state0 = 0;
                  if ($.eqB(t1, 0))
                    this.displayVictory$0();
                  else
                    $.GameScreen.prototype.update$1.call(this, gameLoop);
              }
        }
  }
},
 displayGameOver$0: function() {
  var text, new_game_button;
  this.running = false;
  $.print("Game Over!");
  text = $.TextElement$(this, "Game Over");
  text.set$fontSize(72);
  text.set$pos($.vec2$($.sub($.div(this.screenManager.get$screenWidth(), 2), $.div(text.get$size().get$width(), 2)), 100));
  this.addScreenElement$1(text);
  new_game_button = $.Button$($.vec2$(0, 200), "new_game.png", new $.GameplayScreen_displayGameOver_anon(this), this);
  new_game_button.set$scale($.Size$(0.5, 0.5));
  new_game_button.set$pos($.vec2$($.sub($.div(this.screenManager.get$screenWidth(), 2), $.div(new_game_button.get$size().get$width(), 2)), $.sub($.div(this.screenManager.get$screenHeight(), 2), $.div(new_game_button.get$size().get$height(), 2))));
  this.addScreenElement$1(new_game_button);
},
 displayVictory$0: function() {
  var text, new_game_button;
  this.running = false;
  $.print("You have won!");
  text = $.TextElement$(this, "You won!");
  text.set$fontSize(72);
  text.set$pos($.vec2$($.sub($.div(this.screenManager.get$screenWidth(), 2), $.div(text.get$size().get$width(), 2)), 100));
  this.addScreenElement$1(text);
  new_game_button = $.Button$($.vec2$(0, 200), "new_game.png", new $.GameplayScreen_displayVictory_anon(this), this);
  new_game_button.set$scale($.Size$(0.5, 0.5));
  new_game_button.set$pos($.vec2$($.sub($.div(this.screenManager.get$screenWidth(), 2), $.div(new_game_button.get$size().get$width(), 2)), $.sub($.div(this.screenManager.get$screenHeight(), 2), $.div(new_game_button.get$size().get$height(), 2))));
  this.addScreenElement$1(new_game_button);
},
 GameplayScreen$1: function(screenManager) {
  var background;
  $.Player_setup(this);
  this.setupWorld$0();
  background = $.ImageScreenElement$($.TextureManager_get("background.png"), this);
  this.addScreenElement$1(background);
  background.moveToBottom$0();
}
};

$$.FortNode = {"":"Button;neighbours>,units,_textShape=,player>,unitTimer,attackTimer,_liblib3$_callback,_mouseOverCallback,_mouseOutCallback,_clickCallback,_texture,shape,dirty,_screen",
 get$unitCount: function() {
  var t1 = $.CONSTANT0.filter$1(this.units, new $.FortNode_unitCount_anon());
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 draw$0: function() {
  $.scoped(new $.FortNode_draw_anon(this));
},
 defendingUnits$0: function() {
  return $.CONSTANT0.filter$1(this.units, new $.FortNode_defendingUnits_anon());
},
 attack$1: function(attackingUnit) {
  if ($.gtB(this.get$unitCount(), 0))
    this.removeUnit$1(this.firstOrDefault$1(this.defendingUnits$0()));
  else {
    this.changePlayer$1(attackingUnit.get$owner());
    attackingUnit.get$owner().resetTarget$0();
  }
},
 update$1: function(gameLoop) {
  this.generateNewUnits$1(gameLoop);
  this.moveUnitsToNearbyTargets$1(gameLoop);
},
 generateNewUnits$1: function(gameLoop) {
  var newUnit;
  if ($.ltB(this.get$unitCount(), 5) && this.player.get$isNeutral() !== true)
    if ($.ltB(this.unitTimer, 3))
      this.unitTimer = $.add(this.unitTimer, gameLoop.get$dt());
    else {
      this.unitTimer = 0;
      newUnit = $.Agent$(this, this.get$screen());
      this.units.push(newUnit);
      this.get$screen().addScreenElement$1(newUnit);
      this.dirty = true;
    }
},
 moveUnitsToNearbyTargets$1: function(gameLoop) {
  var path, availableUnit;
  if (this.player.get$isNeutral() === true)
    return;
  if (!(this.player.get$target() == null) && this.isNeighbour$1(this.player.get$target()) === true)
    if ($.ltB(this.attackTimer, 2))
      this.attackTimer = $.add(this.attackTimer, gameLoop.get$dt());
    else {
      this.attackTimer = 0;
      path = this.getNeighbour$1(this.player.get$target());
      availableUnit = this.firstOrDefault$1($.CONSTANT0.filter$1(this.units, new $.FortNode_moveUnitsToNearbyTargets_anon()));
      if (!(availableUnit == null))
        availableUnit.marchTowards$1(path);
    }
  else
    this.attackTimer = 0;
},
 firstOrDefault$1: function(collection) {
  var iterator = $.getInterceptor$JSArray(collection).iterator$0(collection);
  if (iterator.get$hasNext() === true)
    return iterator.next$0();
  return;
},
 isNeighbour$1: function(node) {
  return $.CONSTANT0.some$1(this.neighbours, new $.FortNode_isNeighbour_anon(node));
},
 getNeighbour$1: function(node) {
  var t1 = $.CONSTANT0.filter$1(this.neighbours, new $.FortNode_getNeighbour_anon(node));
  return $.getInterceptor$JSArray(t1).iterator$0(t1).next$0();
},
 canAcceptUnits$0: function() {
  return $.ltB(this.get$unitCount(), 5) && this.player.get$isNeutral() !== true;
},
 addUnit$1: function(agent) {
  this.units.push(agent);
},
 removeUnit$1: function(agent) {
  var t1 = this.units;
  $.CONSTANT0.removeAt$1(t1, $.CONSTANT0.indexOf$1(t1, agent));
},
 onClick$1: function(button) {
  $.Player_CurrentPlayer.setTarget$1(this);
},
 get$onClick: function() {
  return new $.BoundClosure(this, 'onClick$1');
},
 changePlayer$1: function(newPlayer) {
  this.player = newPlayer;
  $.scoped(new $.FortNode_changePlayer_anon(newPlayer, this));
},
 addNeighbour$1: function(newNeighbour) {
  var t1 = this.neighbours;
  if ($.CONSTANT0.every$1(t1, new $.FortNode_addNeighbour_anon(newNeighbour)) === true)
    t1.push($.FortPath$(this, newNeighbour, this.get$screen()));
},
 addNeighbours$1: function(newNeighbours) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(newNeighbours).iterator$0(newNeighbours); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this.addNeighbour$1(t2);
    t2.addNeighbour$1(this);
  }
},
 FortNode$1: function(gameScreen) {
  this.changePlayer$1($.Player_get(0));
  this.setCallback$1(this.get$onClick());
  $.scoped(new $.anon9(this));
}
};

$$.FortPath = {"":"ScreenElement;nodeA>,nodeB>,shape,dirty,_screen",
 hasNode$1: function(node) {
  return $.eqB(this.nodeA, node) || $.eqB(this.nodeB, node);
},
 alternateNode$1: function(node) {
  var t1 = this.nodeA;
  return $.eqB(node, t1) ? this.nodeB : t1;
},
 draw$0: function() {
},
 update$1: function(gameLoop) {
},
 FortPath$3: function(nodeA, nodeB, screen$) {
  $.scoped(new $.anon8(this, screen$));
}
};

$$.Player = {"":"ScreenElement;playerId,target=,_targetImage=,shape,dirty,_screen",
 get$isNeutral: function() {
  return this.playerId === 0;
},
 getPlayerImage$0: function() {
  switch (this.playerId) {
    case 0:
      return "node_neutral.png";
    case 1:
      return "node_player.png";
    case 2:
      return "node_enemy.png";
  }
},
 setTarget$1: function(node) {
  this.target = node;
  this.dirty = true;
},
 resetTarget$0: function() {
  this.setTarget$1(null);
},
 update$1: function(gameLoop) {
},
 draw$0: function() {
  $.scoped(new $.Player_draw_anon(this));
},
 Player$2: function(playerId, gameScreen) {
  $.indexSet($.get$Player_players(), this.playerId, this);
  $.scoped(new $.anon10(this, $.TextureManager_get("order.png")));
  gameScreen.addScreenElement$1(this);
}
};

$$.Enemy = {"":"Player;attackTimer,nextAttack,gameplayScreen,playerId,target,_targetImage,shape,dirty,_screen",
 update$1: function(gameLoop) {
  var t1, enemyForts, rnf, counter, t2, t3, t4, t6, decisionFort, neighbourForts, newTarget;
  if (this.target == null) {
    t1 = this.gameplayScreen.get$forts();
    enemyForts = $.getInterceptor$JSArray(t1).filter$1(t1, new $.Enemy_update_anon(this));
    if (typeof enemyForts !== 'string' && (typeof enemyForts !== 'object' || enemyForts === null || enemyForts.constructor !== Array && !enemyForts.is$JavaScriptIndexingBehavior()))
      return this.update$1$bailout0(1, enemyForts);
    rnf = $.Random_Random(null);
    t1 = $.getInterceptor$JSStringJSArray(enemyForts);
    counter = 3;
    while (true) {
      if (!(this.target == null && counter > 0))
        break;
      --counter;
      t2 = enemyForts.length;
      t3 = t2 - 1 - 0 + 1;
      t4 = rnf.nextDouble$0();
      if (typeof t4 !== 'number')
        return this.update$1$bailout0(3, rnf, t3, t4, counter, t1, enemyForts);
      t6 = $.CONSTANT1.toInt$0(t3 * t4 + 0);
      if (t6 !== (t6 | 0))
        throw $.iae(t6);
      if (t6 < 0 || t6 >= enemyForts.length)
        throw $.ioore(t6);
      decisionFort = enemyForts[t6];
      t6 = decisionFort.get$neighbours();
      t6 = $.getInterceptor$JSArray(t6).map$1(t6, new $.Enemy_update_anon0(decisionFort));
      neighbourForts = $.getInterceptor$JSArray(t6).filter$1(t6, new $.Enemy_update_anon1(this));
      if (typeof neighbourForts !== 'string' && (typeof neighbourForts !== 'object' || neighbourForts === null || neighbourForts.constructor !== Array && !neighbourForts.is$JavaScriptIndexingBehavior()))
        return this.update$1$bailout0(4, rnf, neighbourForts, counter, t1, enemyForts);
      t2 = $.getInterceptor$JSStringJSArray(neighbourForts);
      t3 = neighbourForts.length;
      if (t3 > 0) {
        t2 = t3 - 1 - 0 + 1;
        t4 = rnf.nextDouble$0();
        if (typeof t4 !== 'number')
          return this.update$1$bailout0(7, rnf, t2, neighbourForts, t4, counter, t1, enemyForts);
        t6 = $.CONSTANT1.toInt$0(t2 * t4 + 0);
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= neighbourForts.length)
          throw $.ioore(t6);
        newTarget = neighbourForts[t6];
        $.print("Enemy has found a target");
        this.setTarget$1(newTarget);
      }
    }
  }
},
 update$1$bailout0: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      enemyForts = env0;
      break;
    case 2:
      enemyForts = env4;
      t2 = env3;
      t1 = env2;
      counter = env1;
      rnf = env0;
      break;
    case 3:
      enemyForts = env5;
      t1 = env4;
      counter = env3;
      t5 = env2;
      t4 = env1;
      rnf = env0;
      break;
    case 4:
      enemyForts = env4;
      t1 = env3;
      counter = env2;
      neighbourForts = env1;
      rnf = env0;
      break;
    case 5:
      enemyForts = env6;
      t1 = env5;
      counter = env4;
      t3 = env3;
      t2 = env2;
      neighbourForts = env1;
      rnf = env0;
      break;
    case 6:
      enemyForts = env5;
      t1 = env4;
      t2 = env3;
      counter = env2;
      neighbourForts = env1;
      rnf = env0;
      break;
    case 7:
      enemyForts = env6;
      t1 = env5;
      counter = env4;
      t5 = env3;
      neighbourForts = env2;
      t4 = env1;
      rnf = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, enemyForts, rnf, counter, t2, t4, t5, fortId, decisionFort, t7, neighbourForts, t3, targetId, newTarget;
      if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this.target == null)
        switch (state0) {
          case 0:
            t1 = this.gameplayScreen.get$forts();
            enemyForts = $.getInterceptor$JSArray(t1).filter$1(t1, new $.Enemy_update_anon(this));
          case 1:
            state0 = 0;
            rnf = $.Random_Random(null);
            t1 = $.getInterceptor$JSStringJSArray(enemyForts);
            counter = 3;
          default:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(this.target == null && counter > 0))
                      break L0;
                    --counter;
                    t2 = t1.get$length(enemyForts);
                  case 2:
                    state0 = 0;
                    t4 = $.add($.sub($.sub(t2, 1), 0), 1);
                    t5 = rnf.nextDouble$0();
                  case 3:
                    state0 = 0;
                    fortId = $.add($.mul(t4, t5), 0);
                    decisionFort = $.index(enemyForts, $.getInterceptor$JSNumber(fortId).toInt$0(fortId));
                    t7 = decisionFort.get$neighbours();
                    t7 = $.getInterceptor$JSArray(t7).map$1(t7, new $.Enemy_update_anon0(decisionFort));
                    neighbourForts = $.getInterceptor$JSArray(t7).filter$1(t7, new $.Enemy_update_anon1(this));
                  case 4:
                    state0 = 0;
                    t2 = $.getInterceptor$JSStringJSArray(neighbourForts);
                    t3 = t2.get$length(neighbourForts);
                  case 5:
                    state0 = 0;
                  default:
                    if (state0 === 7 || state0 === 6 || state0 === 0 && $.gtB(t3, 0))
                      switch (state0) {
                        case 0:
                          t2 = t2.get$length(neighbourForts);
                        case 6:
                          state0 = 0;
                          t4 = $.add($.sub($.sub(t2, 1), 0), 1);
                          t5 = rnf.nextDouble$0();
                        case 7:
                          state0 = 0;
                          targetId = $.add($.mul(t4, t5), 0);
                          newTarget = $.index(neighbourForts, $.getInterceptor$JSNumber(targetId).toInt$0(targetId));
                          $.print("Enemy has found a target");
                          this.setTarget$1(newTarget);
                      }
                }
        }
  }
},
 Enemy$1: function(gameplayScreen) {
  this.gameplayScreen = gameplayScreen;
}
};

$$.Agent = {"":"ImageScreenElement;home=,target=,_path<,owner>,_texture,shape,dirty,_screen",
 get$isMoving: function() {
  return !(this._path == null);
},
 get$isAttacking: function() {
  var t1 = this.target;
  return !(t1 == null) && !$.eqB(t1.get$player(), this.owner);
},
 marchTowards$1: function(path) {
  var t1, t2;
  this._path = path;
  t1 = !$.eqB(this._path.get$nodeA(), this.home);
  t2 = this._path;
  this.target = t1 ? t2.get$nodeA() : t2.get$nodeB();
},
 draw$0: function() {
},
 update$1: function(gameLoop) {
  $.scoped(new $.Agent_update_anon(this, gameLoop));
},
 Agent$2: function(home$, gameScreen) {
  this.set$pos(this.home.get$pos());
  this.owner = this.home.get$player();
}
};

$$.TextElement = {"":"ScreenElement;text=,shape,dirty,_screen",
 get$size: function() {
  return $.scoped(new $.TextElement_size_anon(this));
},
 set$fontSize: function(value) {
  return $.scoped(new $.TextElement_fontSize_anon(this, value));
},
 draw$0: function() {
},
 update$1: function(gameLoop) {
},
 TextElement$2: function(gameScreen, text) {
  $.scoped(new $.anon7(this));
  $.print("Text element of: " + $.S(this.text));
}
};

$$.main_anon = {"":"Closure;game_0",
 call$0: function() {
  var t1 = this.game_0.get$screenManager();
  t1.addScreen$1($.HomeScreen$(t1));
}
};

$$.Maps__emitMap_anon = {"":"Closure;box_0,result_1,visiting_2",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_0 !== true) {
    t2 = this.result_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_0 = false;
  t1 = this.result_1;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":"Closure;values_1,copies_2",
 call$1: function(value) {
  var t1, t3, length$, i, t2;
  t1 = this.values_1;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t3.add$1(t1, value);
  t1 = this.copies_2;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_1;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor$JSArray(t1).add$1(t1, value);
      t1 = this.copies_2;
      $.getInterceptor$JSArray(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":"Closure;copies_3",
 call$1: function(i) {
  return $.index(this.copies_3, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":"Closure;copies_4",
 call$2: function(i, x) {
  $.indexSet(this.copies_4, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":"Closure;",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":"Closure;findSlot_5,readSlot_6,writeSlot_7",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_5.call$1(e);
    t1.copy_0 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = {};
    this.writeSlot_7.call$2(slot, t1.copy_0);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_0;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_5.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, length$, copy0, slot, i, copy, t2);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      t3 = env8;
      copy = env7;
      i = env6;
      slot = env5;
      copy0 = env4;
      length$ = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_5.call$1(e);
        t1.copy_0 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_0;
        if (!(t2 == null))
          return t2;
        t1.copy_0 = {};
        this.writeSlot_7.call$2(slot, t1.copy_0);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_0;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor$JSStringJSArray(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_5.call$1(e);
            t3 = this.readSlot_6;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_7;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":"Closure;box_0,walk_8",
 call$2: function(key, value) {
  this.box_0.copy_0[key] = this.walk_8.call$1(value);
}
};

$$.anon = {"":"Closure;this_0",
 call$0: function() {
  var kinetic, t1, t2, progressBarBase, progressBarBackground, loading, t3;
  kinetic = $.context().get$Kinetic();
  t1 = kinetic.get$Rect();
  t2 = this.this_0;
  progressBarBase = $.retain($.Proxy_Proxy(t1, $.map($.makeLiteralMap(["fill", "rgba(189,189,189,1)", "x", $.sub($.div(t2.get$width(), 2), 200), "y", $.sub($.div(t2.get$height(), 2), 15), "width", 400, "height", 30, "cornerRadius", 10, "shadow", $.makeLiteralMap(["color", "#666", "blur", 5, "offset", [2, 2]])])), $, $, $));
  progressBarBackground = $.retain($.Proxy_Proxy(kinetic.get$Rect(), $.map($.makeLiteralMap(["fill", $.makeLiteralMap(["start", $.makeLiteralMap(["x", 0, "y", 0]), "end", $.makeLiteralMap(["x", 0, "y", 30]), "colorStops", [0, "rgba(255,255,255, 0.1)", 0.4, "rgba(255,255,255, 0.7)", 1, "rgba(255,255,255,0.4)"]]), "x", $.sub($.div(t2.get$width(), 2), 200), "y", $.sub($.div(t2.get$height(), 2), 15), "width", 400, "height", 30, "cornerRadius", 10])), $, $, $));
  t2.set$progressBar($.retain($.Proxy_Proxy(kinetic.get$Rect(), $.map($.makeLiteralMap(["fill", $.makeLiteralMap(["start", $.makeLiteralMap(["x", 0, "y", 0]), "end", $.makeLiteralMap(["x", 0, "y", 30]), "colorStops", [0, "#9ED1FF", 0.4, "#ADD9FF", 1, "#4DA4F3"]]), "x", $.add(progressBarBackground.getX$0(), 4), "y", $.add(progressBarBackground.getY$0(), 4), "width", 392, "height", 22, "cornerRadius", 4, "scale", $.makeLiteralMap(["x", 0, "y", 1])])), $, $, $)));
  loading = $.retain($.Proxy_Proxy(kinetic.get$Text(), $.map($.makeLiteralMap(["text", "Loading...", "x", progressBarBackground.getX$0(), "y", $.sub($.sub(progressBarBackground.getY$0(), 30), 4), "fontSize", 24, "textFill", "#E7F2DF", "textShadow", $.makeLiteralMap(["color", "#555", "blur", 1, "offset", [1, 1], "opacity", 0.7])])), $, $, $));
  t3 = t2.get$layer();
  $.getInterceptor$JSArray(t3).add$1(t3, progressBarBase);
  t3 = t2.get$layer();
  $.getInterceptor$JSArray(t3).add$1(t3, progressBarBackground);
  t3 = t2.get$layer();
  $.getInterceptor$JSArray(t3).add$1(t3, t2.get$progressBar());
  t2 = t2.get$layer();
  $.getInterceptor$JSArray(t2).add$1(t2, loading);
}
};

$$.anon2 = {"":"Closure;this_0",
 call$0: function() {
  var t1 = $.retain($.Proxy_Proxy($.context().get$Kinetic().get$Layer(), $, $, $, $));
  this.this_0.set$_layer(t1);
}
};

$$.invokeClosure_anon = {"":"Closure;closure_0",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":"Closure;closure_1,arg1_2",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"":"Closure;closure_3,arg2_4,arg1_5",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$.anon0 = {"":"Closure;this_0",
 call$1: function(msg, exception) {
  var receiver, method, t1, args, result, e;
  try {
    receiver = $.index(this.this_0.get$_registry(), $.index(msg, 0));
    method = $.index(msg, 1);
    t1 = $.index(msg, 2);
    args = $.getInterceptor$JSArray(t1).map$1(t1, $._deserialize);
    if ($.eqB(method, "#call")) {
      result = null;
      t1 = args;
      switch ($.getInterceptor$JSStringJSArray(t1).get$length(t1)) {
        case 0:
          result = $._serialize(receiver.call$0());
          break;
        case 1:
          result = $._serialize(receiver.call$1($.index(args, 0)));
          break;
        case 2:
          result = $._serialize(receiver.call$2($.index(args, 0), $.index(args, 1)));
          break;
        case 3:
          result = $._serialize(receiver.call$3($.index(args, 0), $.index(args, 1), $.index(args, 2)));
          break;
        case 4:
          result = $._serialize(receiver.call$4($.index(args, 0), $.index(args, 1), $.index(args, 2), $.index(args, 3)));
          break;
        default:
          throw $.$$throw("Unsupported number of arguments.");
      }
      t1 = ["return", result];
      return t1;
    } else
      throw $.$$throw("Invocation unsupported on non-function Dart proxies");
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    return ["throws", $.S(e)];
  }

}
};

$$._HashSetImpl_forEach_anon = {"":"Closure;f_0",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"":"Closure;f_0",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.DoubleLinkedQueue_length_anon = {"":"Closure;box_0",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_0 = $.add(t1.counter_0, 1);
}
};

$$.ReceivePortSync_receive_anon = {"":"Closure;this_0",
 call$1: function(e) {
  var data, replyTo, t1, message, result;
  data = $.JSON_parse(e.get$detail());
  replyTo = $.index(data, 0);
  t1 = $.index(data, 1);
  message = $._JsDeserializer$().deserialize$1(t1);
  result = this.this_0._callback$1(message);
  $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
}
};

$$.Storage_values_anon = {"":"Closure;values_0",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, v);
}
};

$$._HashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$._LinkedHashMapImpl_values_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$.Storage_keys_anon = {"":"Closure;keys_0",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor$JSArray(t1).add$1(t1, k);
}
};

$$._HashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.i_0;
  t2.i_0 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._LinkedHashMapImpl_keys_anon = {"":"Closure;box_0,list_1",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_1;
  t2 = this.box_0;
  t3 = t2.index_0;
  t2.index_0 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._RemoteSendPortSync__call_anon = {"":"Closure;box_0",
 call$1: function(e) {
  var result = $.JSON_parse(e.get$detail());
  this.box_0.result_0 = result;
}
};

$$.NoSuchMethodError_toString_anon = {"":"Closure;box_0",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_1, 0)) {
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_0;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_1 = $.add(t1.i_1, 1);
}
};

$$._JsonStringifier_stringifyJsonValue_anon = {"":"Closure;box_0,this_1",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.box_0;
  t2 = t1.first_0 !== true;
  t3 = this.this_1;
  if (t2) {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, ",\"");
  } else {
    t2 = t3.get$sb();
    $.getInterceptor$JSArray(t2).add$1(t2, "\"");
  }
  t2 = this.this_1;
  $._JsonStringifier_escape(t2.get$sb(), key);
  t3 = t2.get$sb();
  $.getInterceptor$JSArray(t3).add$1(t3, "\":");
  t2.stringifyValue$1(value);
  t1.first_0 = false;
}
};

$$._deserialize_deserializeFunction = {"":"Closure;",
 call$1: function(message) {
  var id, port;
  id = $.index(message, 1);
  port = $.index(message, 2);
  if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $._FunctionProxy$_internal(port, id)._call;
}
};

$$._deserialize_deserializeObject = {"":"Closure;",
 call$1: function(message) {
  var id, port;
  id = $.index(message, 1);
  port = $.index(message, 2);
  if ($.eqB(port, $.get$_proxiedObjectTable().get$sendPort()))
    return $.get$_proxiedObjectTable().get$1(id);
  else
    return $.Proxy$_internal(port, id);
}
};

$$.ConstantMap_values_anon = {"":"Closure;this_0,result_1",
 call$1: function(key) {
  var t1 = this.result_1;
  return $.getInterceptor$JSArray(t1).add$1(t1, $.index(this.this_0, key));
}
};

$$.ConstantMap_forEach_anon = {"":"Closure;f_0,this_1",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.FilteredElementList__filtered_anon = {"":"Closure;",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._HashSetImpl_filter_anon = {"":"Closure;f_0,result_1",
 call$2: function(key, value) {
  var t1;
  if (this.f_0.call$1(key) === true) {
    t1 = this.result_1;
    $.getInterceptor$JSArray(t1).add$1(t1, key);
  }
}
};

$$._ChildrenElementList_filter_anon = {"":"Closure;output_0,f_1",
 call$1: function(element) {
  var t1;
  if (this.f_1.call$1(element) === true) {
    t1 = this.output_0;
    $.getInterceptor$JSArray(t1).add$1(t1, element);
  }
}
};

$$.FilteredElementList_removeRange_anon = {"":"Closure;",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.anon1 = {"":"Closure;port_0,id_1",
 call$4: function(arg0, arg1, arg2, arg3) {
  var t1, t2, t3, t4, args, message, result;
  t1 = $ === arg0;
  if (t1)
    arg0 = null;
  t1 = !t1;
  t2 = $ === arg1;
  if (t2)
    arg1 = null;
  t2 = !t2;
  t3 = $ === arg2;
  if (t3)
    arg2 = null;
  t3 = !t3;
  t4 = $ === arg3;
  if (t4)
    arg3 = null;
  if (!t4)
    args = [arg0, arg1, arg2, arg3];
  else if (t3)
    args = [arg0, arg1, arg2];
  else if (t2)
    args = [arg0, arg1];
  else
    args = t1 ? [arg0] : [];
  message = [this.id_1, "", "apply", $.CONSTANT0.map$1(args, $._serialize)];
  result = this.port_0.callSync$1(message);
  if ($.eqB($.index(result, 0), "throws"))
    throw $.$$throw($.index(result, 1));
  return $._deserialize($.index(result, 1));
},
 call$0: function() {
  return this.call$4($, $, $, $);
},
 call$1: function(arg0) {
  return this.call$4(arg0, $, $, $);
},
 call$2: function(arg0, arg1) {
  return this.call$4(arg0, arg1, $, $);
},
 call$3: function(arg0, arg1, arg2) {
  return this.call$4(arg0, arg1, arg2, $);
}
};

$$._HashSetImpl_map_anon = {"":"Closure;result_0,f_1",
 call$2: function(key, value) {
  var t1 = this.result_0;
  $.getInterceptor$JSArray(t1).add$1(t1, this.f_1.call$1(key));
}
};

$$._initialize_anon = {"":"Closure;",
 call$1: function(_) {
  return $._enterScope();
}
};

$$._initialize_anon0 = {"":"Closure;",
 call$1: function(args) {
  return $._exitScope($.index(args, 0));
}
};

$$._HashSetImpl_addAll_anon = {"":"Closure;this_0",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
}
};

$$.Proxy__serializeDataTree_anon = {"":"Closure;",
 call$1: function(e) {
  return $.Proxy__serializeDataTree(e);
}
};

$$.anon3 = {"":"Closure;this_0,canvasId_1,canvasSize_2",
 call$0: function() {
  var t1, t2, t3, t4;
  t1 = $.context().get$Kinetic().get$Stage();
  t2 = this.canvasId_1;
  t3 = this.canvasSize_2;
  t4 = $.retain($.Proxy_Proxy(t1, $.map($.makeLiteralMap(["container", t2, "width", t3.get$width(), "height", t3.get$height()])), $, $, $));
  this.this_0.set$_stage(t4);
}
};

$$._DateImpl_toString_fourDigits = {"":"Closure;",
 call$1: function(n) {
  var absN, sign;
  absN = $.getInterceptor$JSNumber(n).abs$0(n);
  sign = $.ltB(n, 0) ? "-" : "";
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + "0" + $.S(absN);
  if ($.geB(absN, 10))
    return sign + "00" + $.S(absN);
  return sign + "000" + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {"":"Closure;",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return "0" + $.S(n);
  return "00" + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {"":"Closure;",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return "0" + $.S(n);
}
};

$$.GameScreen_draw_anon = {"":"Closure;",
 call$1: function(element) {
  return element.get$dirty();
}
};

$$.GameScreen_draw_anon0 = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2;
  t1 = this.this_0;
  t2 = t1.get$_layer();
  $.getInterceptor$JSArray(t2).clear$0(t2);
  t1.get$_layer().draw$0();
}
};

$$.Game_load_anon = {"":"Closure;",
 call$2: function(total, resources) {
  return $.add(total, $.getInterceptor$JSStringJSArray(resources).get$length(resources));
}
};

$$.AudioManager_load_anon = {"":"Closure;callback_0,audio_1,audioName_2,xhr_3",
 call$1: function(event$, exception) {
  var t1, t2, t3, t4;
  try {
    $.print("Loaded audio file " + $.S(this.audioName_2));
    t1 = $.AudioManager_audioContext;
    t2 = this.xhr_3.get$response();
    t3 = this.callback_0;
    t4 = this.audio_1;
    t1.decodeAudioData$3(t2, new $.AudioManager_load__anon(t3, t4), new $.AudioManager_load__anon0(t3, t4));
  } catch (exception) {
    $.unwrapException(exception);
    t1 = this.audio_1;
    t1.onLoadFailure$0();
    t2 = this.callback_0;
    if (!(t2 == null))
      t2.call$1(t1);
  }

}
};

$$.AudioManager_load__anon = {"":"Closure;callback_4,audio_5",
 call$1: function(buffer) {
  var t1, t2, t3, t4;
  t1 = this.audio_5;
  t1.load$1(buffer);
  t2 = this.callback_4;
  if (!(t2 == null))
    t2.call$1(t1);
  t2 = $.get$AudioManager__audiosLoading();
  t3 = $.getInterceptor$JSArray(t2);
  t4 = $.get$AudioManager__audiosLoading();
  t3.removeAt$1(t2, $.getInterceptor$JSStringJSArray(t4).indexOf$1(t4, t1));
  t1 = $.get$AudioManager__audiosLoading();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0) && !($.AudioManager_onLoadComplete == null))
    $.AudioManager_onLoadComplete.call$0();
}
};

$$.AudioManager_load__anon0 = {"":"Closure;callback_6,audio_7",
 call$1: function(buffer) {
  var t1, t2;
  t1 = this.audio_7;
  t1.onLoadFailure$0();
  t2 = this.callback_6;
  if (!(t2 == null))
    t2.call$1(t1);
}
};

$$.TextureManager_load_anon = {"":"Closure;callback_0,texture_1",
 call$1: function(event$) {
  var t1, t2, t3;
  t1 = this.callback_0;
  if (!(t1 == null))
    t1.call$1(this.texture_1);
  t1 = $.get$TextureManager__texturesLoading();
  t2 = $.getInterceptor$JSArray(t1);
  t3 = $.get$TextureManager__texturesLoading();
  t2.removeAt$1(t1, $.getInterceptor$JSStringJSArray(t3).indexOf$1(t3, this.texture_1));
  t1 = $.get$TextureManager__texturesLoading();
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0) && !($.TextureManager_onLoadComplete == null))
    $.TextureManager_onLoadComplete.call$0();
}
};

$$.anon4 = {"":"Closure;this_0",
 call$1: function(event$) {
  return this.this_0.runLoadCallbacks$0();
}
};

$$.LoadingScreen_updateProgress_anon = {"":"Closure;percentage_0,this_1",
 call$0: function() {
  this.this_1.get$progressBar().transitionTo$1($.map($.makeLiteralMap(["scale", $.makeLiteralMap(["x", this.percentage_0, "y", 1]), "duration", 0.1])));
}
};

$$.ScreenManager_addScreen_anon = {"":"Closure;this_0,screenToAdd_1",
 call$0: function() {
  var t1 = this.this_0.get$_stage();
  $.getInterceptor$JSArray(t1).add$1(t1, this.screenToAdd_1.get$layer());
}
};

$$.anon5 = {"":"Closure;this_0",
 call$1: function(button) {
  return this.this_0.showGame$0();
}
};

$$.ImageScreenElement_onTextureLoad_anon = {"":"Closure;this_0,texture_1",
 call$0: function() {
  var t1, t2;
  t1 = $.retain($.Proxy_Proxy($.context().get$Kinetic().get$Image(), $.map($.makeLiteralMap(["image", this.texture_1.get$image()])), $, $, $));
  t2 = this.this_0;
  t2.set$shape(t1);
  t1 = t2.get$screen().get$layer();
  $.getInterceptor$JSArray(t1).add$1(t1, t2.get$shape());
}
};

$$.ScreenElement_pos_anon = {"":"Closure;this_0,value_1",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.this_0;
  t2 = t1.get$shape();
  t3 = this.value_1;
  t2.setPosition$2(t3.get$x(), t3.get$y());
  t1.set$dirty(true);
}
};

$$.ScreenElement_scale_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2;
  t1 = this.this_0;
  t2 = t1.get$shape().getScale$0().get$x();
  return $.Size$(t1.get$shape().getScale$0().get$y(), t2);
}
};

$$.ScreenElement_scale_anon0 = {"":"Closure;this_0,value_1",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.this_0;
  t2 = t1.get$shape();
  t3 = this.value_1;
  t2.setScale$2(t3.get$width(), t3.get$height());
  t1.set$dirty(true);
}
};

$$.Button_cleanup_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1 = this.this_0;
  t1.get$shape().off$1("mouseover");
  t1.get$shape().off$1("mouseout");
  t1.get$shape().off$1("click");
  t1.get$shape().off$1("tap");
  t1.get$_mouseOverCallback().dispose$0();
  t1.get$_mouseOutCallback().dispose$0();
  t1.get$_clickCallback().dispose$0();
}
};

$$.anon6 = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2;
  t1 = $.Callback$many(new $._anon());
  t2 = this.this_0;
  t2.set$_mouseOverCallback(t1);
  t2.set$_mouseOutCallback($.Callback$many(new $._anon0()));
  t2.set$_clickCallback($.Callback$many(new $._anon1(t2)));
  t2.get$shape().on$2("mouseover", t2.get$_mouseOverCallback());
  t2.get$shape().on$2("mouseout", t2.get$_mouseOutCallback());
  t2.get$shape().on$2("click", t2.get$_clickCallback());
  t2.get$shape().on$2("tap", t2.get$_clickCallback());
}
};

$$._anon = {"":"Closure;",
 call$1: function(event$) {
  $.document().get$body().get$style().set$cursor("pointer");
}
};

$$._anon0 = {"":"Closure;",
 call$1: function(event$) {
  $.document().get$body().get$style().set$cursor("default");
}
};

$$._anon1 = {"":"Closure;this_1",
 call$1: function(event$) {
  this.this_1.click$0();
}
};

$$.ScreenElement_moveToBottom_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1 = this.this_0;
  t1.get$shape().moveToBottom$0();
  t1.set$dirty(true);
}
};

$$.ScreenManager_setScreen_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1 = this.this_0.get$_stage();
  $.getInterceptor$JSArray(t1).clear$0(t1);
}
};

$$.GameplayScreen_update_anon = {"":"Closure;",
 call$1: function(fort) {
  return $.eq(fort.get$player(), $.Player_CurrentPlayer);
}
};

$$.GameplayScreen_update_anon0 = {"":"Closure;",
 call$1: function(fort) {
  return $.eq(fort.get$player(), $.Player_EnemyPlayer);
}
};

$$.GameplayScreen_displayVictory_anon = {"":"Closure;this_0",
 call$1: function(button) {
  var t1 = this.this_0.get$screenManager();
  t1.setScreen$1($.GameplayScreen$(t1));
  return;
}
};

$$.TextElement_size_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2;
  t1 = this.this_0;
  t2 = t1.get$shape().getWidth$0();
  return $.Size$(t1.get$shape().getHeight$0(), t2);
}
};

$$.TextElement_fontSize_anon = {"":"Closure;this_0,value_1",
 call$0: function() {
  var t1 = this.this_0;
  t1.get$shape().setFontSize$1(this.value_1);
  t1.set$dirty(true);
}
};

$$.anon7 = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2, t3;
  t1 = $.context().get$Kinetic().get$Text();
  t2 = this.this_0;
  t2.set$shape($.retain($.Proxy_Proxy(t1, $.map($.makeLiteralMap(["text", t2.get$text(), "fontSize", 12, "textFill", "#000", "padding", 20, "align", "center", "textShadow", $.makeLiteralMap(["color", "#FFF", "blur", 1, "offset", [1, 1], "opacity", 0.7])])), $, $, $)));
  t3 = t2.get$screen().get$layer();
  $.getInterceptor$JSArray(t3).add$1(t3, t2.get$shape());
}
};

$$.GameplayScreen_setupWorld_anon = {"":"Closure;box_0,nodeSize_2",
 call$1: function(element) {
  return $.gt($.distance(this.box_0.nodePos_0, element.get$pos()), $.add(this.nodeSize_2.get$width(), 10));
}
};

$$.GameplayScreen_setupWorld_anon0 = {"":"Closure;fort_3",
 call$2: function(a, b) {
  var t1, t2;
  t1 = a.get$pos();
  t2 = this.fort_3;
  t1 = $.distance(t1, t2.get$pos());
  return $.getInterceptor$JSStringJSNumber(t1).compareTo$1(t1, $.distance(b.get$pos(), t2.get$pos()));
}
};

$$.GameplayScreen_setupWorld_anon1 = {"":"Closure;box_1,fort_4,numberOfNeighbours_5",
 call$1: function(element) {
  var t1, t2;
  if (!$.eqB(element, this.fort_4)) {
    t1 = this.box_1;
    t2 = t1.neighbourCount_1;
    t1.neighbourCount_1 = $.add(t2, 1);
    t2 = $.ltB(t2, this.numberOfNeighbours_5);
    t1 = t2;
  } else
    t1 = false;
  return t1;
}
};

$$.GameplayScreen_setupWorld_anon2 = {"":"Closure;",
 call$1: function(fort) {
  var t1 = fort.get$neighbours();
  return $.eq($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0);
}
};

$$.FortNode_changePlayer_anon = {"":"Closure;newPlayer_0,this_1",
 call$0: function() {
  this.this_1.get$shape().setImage$1($.TextureManager_get(this.newPlayer_0.getPlayerImage$0()).get$image());
}
};

$$.FortNode_addNeighbour_anon = {"":"Closure;newNeighbour_0",
 call$1: function(path) {
  return path.hasNode$1(this.newNeighbour_0) !== true;
}
};

$$.anon8 = {"":"Closure;this_0,screen_1",
 call$0: function() {
  var t1, t2, t3;
  t1 = $.context().get$Kinetic().get$Line();
  t2 = this.this_0;
  t2.set$shape($.retain($.Proxy_Proxy(t1, $.map($.makeLiteralMap(["points", $.array([t2.get$nodeA().get$center().get$x(), t2.get$nodeA().get$center().get$y(), t2.get$nodeB().get$center().get$x(), t2.get$nodeB().get$center().get$y()]), "stroke", "#9CA69D", "strokeWidth", 3])), $, $, $)));
  t3 = this.screen_1.get$layer();
  $.getInterceptor$JSArray(t3).add$1(t3, t2.get$shape());
  t2.get$shape().moveToBottom$0();
}
};

$$.ScreenElement_pos_anon0 = {"":"Closure;this_0",
 call$0: function() {
  var t1 = this.this_0;
  return $.vec2$(t1.get$shape().getX$0(), t1.get$shape().getY$0());
}
};

$$.FortNode_moveUnitsToNearbyTargets_anon = {"":"Closure;",
 call$1: function(unit) {
  return unit.get$isMoving() !== true;
}
};

$$.FortNode_getNeighbour_anon = {"":"Closure;node_0",
 call$1: function(path) {
  var t1, t2;
  t1 = path.get$nodeA();
  t2 = this.node_0;
  return $.eqB(t1, t2) || $.eqB(path.get$nodeB(), t2);
}
};

$$.FortNode_isNeighbour_anon = {"":"Closure;node_0",
 call$1: function(path) {
  var t1, t2;
  t1 = path.get$nodeA();
  t2 = this.node_0;
  return $.eqB(t1, t2) || $.eqB(path.get$nodeB(), t2);
}
};

$$.Agent_update_anon = {"":"Closure;this_0,gameLoop_1",
 call$0: function() {
  var t1, offset, t2, t3, tempTarget;
  t1 = this.this_0;
  if (t1.get$isMoving() === true) {
    if (t1.get$shape().isVisible$0() !== true)
      t1.get$shape().show$0();
    offset = $.mul($.mul($.normalize($.sub(t1.get$target().get$center(), t1.get$center()), null), 1), this.gameLoop_1.get$dt());
    t1.get$shape().move$2(offset.get$x(), offset.get$y());
    if ($.ltB($.distance(t1.get$center(), t1.get$target().get$center()), 20))
      if (t1.get$isAttacking() === true) {
        t1.get$target().attack$1(t1);
        t1.get$home().removeUnit$1(t1);
        t1.get$screen().removeElement$1(t1);
      } else {
        t2 = t1.get$target().canAcceptUnits$0() === true;
        t3 = t1.get$home();
        if (t2) {
          t3.removeUnit$1(t1);
          t1.get$target().addUnit$1(t1);
          t1.set$home(t1.get$target());
          t1.set$_path(null);
        } else {
          t3.removeUnit$1(t1);
          t1.get$target().addUnit$1(t1);
          tempTarget = t1.get$target();
          t1.set$target(t1.get$home());
          t1.set$home(tempTarget);
        }
      }
    t1.set$dirty(true);
  }
  if (t1.get$isMoving() !== true && t1.get$isAttacking() !== true && t1.get$shape().isVisible$0() === true)
    t1.get$shape().hide$0();
}
};

$$.FortNode_defendingUnits_anon = {"":"Closure;",
 call$1: function(unit) {
  return unit.get$isMoving() !== true && unit.get$isAttacking() !== true;
}
};

$$.FortNode_unitCount_anon = {"":"Closure;",
 call$1: function(unit) {
  return unit.get$isMoving() !== true && unit.get$isAttacking() !== true;
}
};

$$.FortNode_draw_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.this_0;
  t2 = t1.get$_textShape();
  t3 = t1.get$unitCount();
  t2.setText$1($.getInterceptor(t3).toString$0(t3));
  t1.get$_textShape().setPosition$2($.sub(t1.get$center().get$x(), $.div(t1.get$_textShape().getWidth$0(), 2)), $.sub(t1.get$center().get$y(), $.div(t1.get$_textShape().getHeight$0(), 2)));
  t2 = t1.get$player().get$isNeutral() === true;
  t1 = t1.get$_textShape();
  if (t2)
    t1.hide$0();
  else
    t1.show$0();
}
};

$$.anon9 = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2;
  t1 = $.retain($.Proxy_Proxy($.context().get$Kinetic().get$Text(), $.map($.makeLiteralMap(["text", "test", "fontSize", 24, "textFill", "#000", "textShadow", $.makeLiteralMap(["color", "#FFF", "blur", 1, "offset", [1, 1], "opacity", 0.7])])), $, $, $));
  t2 = this.this_0;
  t2.set$_textShape(t1);
  t2.get$_textShape().hide$0();
  t1 = t2.get$screen().get$layer();
  $.getInterceptor$JSArray(t1).add$1(t1, t2.get$_textShape());
}
};

$$.GameScreen_removeElement_anon = {"":"Closure;elementToRemove_0",
 call$0: function() {
  this.elementToRemove_0.get$shape().remove$0();
}
};

$$.Enemy_update_anon = {"":"Closure;this_0",
 call$1: function(fort) {
  return $.eq(fort.get$player(), this.this_0);
}
};

$$.Enemy_update_anon0 = {"":"Closure;decisionFort_1",
 call$1: function(neighbour) {
  return neighbour.alternateNode$1(this.decisionFort_1);
}
};

$$.Enemy_update_anon1 = {"":"Closure;this_2",
 call$1: function(node) {
  return !$.eqB(node.get$player(), this.this_2);
}
};

$$.anon10 = {"":"Closure;this_0,texture_1",
 call$0: function() {
  var t1, t2;
  t1 = $.retain($.Proxy_Proxy($.context().get$Kinetic().get$Image(), $.map($.makeLiteralMap(["image", this.texture_1.get$image(), "scale", 0.5])), $, $, $));
  t2 = this.this_0;
  t2.set$_targetImage(t1);
  t1 = t2.get$screen().get$layer();
  $.getInterceptor$JSArray(t1).add$1(t1, t2.get$_targetImage());
  t2.get$_targetImage().hide$0();
}
};

$$.Player_draw_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.this_0;
  t2 = !(t1.get$target() == null);
  t3 = t1.get$_targetImage();
  if (t2) {
    t3.show$0();
    t1.get$_targetImage().moveToTop$0();
    t1.get$_targetImage().setPosition$2($.sub(t1.get$target().get$center().get$x(), $.mul($.mul(t1.get$_targetImage().getWidth$0(), t1.get$_targetImage().getScale$0().get$x()), 0.5)), $.sub(t1.get$target().get$pos().get$y(), $.mul($.mul(t1.get$_targetImage().getHeight$0(), t1.get$_targetImage().getScale$0().get$y()), 0.75)));
  } else
    t3.hide$0();
}
};

$$.ScreenElement_moveToTop_anon = {"":"Closure;this_0",
 call$0: function() {
  var t1 = this.this_0;
  t1.get$shape().moveToTop$0();
  t1.set$dirty(true);
}
};

$$.GameplayScreen_displayGameOver_anon = {"":"Closure;this_0",
 call$1: function(button) {
  var t1 = this.this_0.get$screenManager();
  t1.setScreen$1($.GameplayScreen$(t1));
  return;
}
};

$$._BaseSendPort_call_anon = {"":"Closure;port_0,completer_1",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"":"Closure;message_0,replyTo_1,this_2",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_2;
  t2 = this.replyTo_1;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_0, "replyTo", t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"":"Closure;callback_0",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"":"Closure;box_0,values_1,completer_2,result_3,pos_4",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_1;
  $.indexSet(t1, this.pos_4, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_0, 1);
  t2.remaining_0 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_2.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":"Closure;future_5,completer_6,result_7",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_5.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._liblib4$_dispatch$1(e);
}
};

$$._PendingSendPortFinder_visitList_anon = {"":"Closure;this_0",
 call$1: function(e) {
  return this.this_0._liblib4$_dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"":"Closure;this_1,message_2,replyTo_3",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_1;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_liblib4$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_liblib4$_receivePort().get$_liblib4$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_liblib4$_isolateId());
  msg = this.message_2;
  t1.msg_0 = msg;
  t1.reply_1 = t3;
  if (shouldSerialize) {
    t1.msg_0 = $._serializeMessage(t1.msg_0);
    t1.reply_1 = $._serializeMessage(t1.reply_1);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"":"Closure;box_0,this_4,shouldSerialize_5",
 call$0: function() {
  var t1, t2;
  t1 = this.this_4;
  if (!(t1.get$_liblib4$_receivePort().get$_liblib4$_callback() == null)) {
    if (this.shouldSerialize_5 === true) {
      t2 = this.box_0;
      t2.msg_0 = $._deserializeMessage(t2.msg_0);
      t2.reply_1 = $._deserializeMessage(t2.reply_1);
    }
    t1 = t1.get$_liblib4$_receivePort();
    t2 = this.box_0;
    t1._liblib4$_callback$2(t2.msg_0, t2.reply_1);
  }
}
};

$$._Copier_visitMap_anon = {"":"Closure;box_0,this_1",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_0;
  t2 = this.this_1;
  $.indexSet(t1, t2._liblib4$_dispatch$1(key), t2._liblib4$_dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"":"Closure;this_0",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.Closure = {"":"Object;",
 toString$0: function() {
  return "Closure";
},
 is$Function: true
};

$$.BoundClosure = {"":"Closure;self,target", call$1: function(p0) {
  return this.self[this.target](p0);
}
};
$$.BoundClosure0 = {"":"Closure;self,target", call$0: function() {
  return this.self[this.target]();
}
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CONSTANT1.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.JSON_stringify = function(object) {
  return $._JsonStringifier_stringify(object);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.CONSTANT1.truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CONSTANT;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.GameLoopDigitalButton$ = function(buttonId) {
  return new $.GameLoopDigitalButton(buttonId, 0, 0, 0, 0);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.CONSTANT3.endsWith$1(message, "is null") === true || $.CONSTANT3.endsWith$1(message, "is undefined") === true || $.CONSTANT3.endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.CONSTANT0.iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg2, arg1));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.propertyTypeCastError = function(value, property) {
  var actualType, t1;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$JSString(property);
  throw $.$$throw($.CastErrorImplementation$(actualType, t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT7));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT7)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(null);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length$ = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.CONSTANT3.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT3.substring$1(receiver, startIndex));
  else {
    substr = $.CONSTANT3.substring$1(receiver, startIndex);
    t1 = $.getInterceptor$JSString(other).allMatches$1(other, substr);
    return $.getInterceptor$JSArray(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Opera", 0);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor$JSString(t1).contains$2(t1, "MSIE", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor$JSString(t1).contains$2(t1, "Firefox", 0);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.coreSort = function(l, compare) {
  $._Sort__doSort(l, 0, l.length - 1, compare);
  return;
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$._CustomEventFactoryProvider_createCustomEvent = function(type, canBubble, cancelable, detail) {
  var e = $.document().$$dom_createEvent$1("CustomEvent");
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer_StringBuffer("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.getInterceptor(output).toString$0(output);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, length$, charCodes, needsEscape, i, charCode, t2;
  t1 = $.getInterceptor$JSStringJSArray(s);
  length$ = t1.get$length(s);
  charCodes = $.List_List(null);
  for (needsEscape = false, i = 0; $.ltB(i, length$); ++i) {
    charCode = t1.charCodeAt$1(s, i);
    if ($.ltB(charCode, 32)) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.and($.shr(charCode, 12), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and($.shr(charCode, 8), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and($.shr(charCode, 4), 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          t2 = $.and(charCode, 15);
          if ($.ltB(t2, 10)) {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== 'number')
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if ($.eqB(charCode, 34) || $.eqB(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  t1 = $.getInterceptor$JSArray(sb);
  t1.add$1(sb, needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.main = function() {
  var game = $.Game$();
  game.resources = $.makeLiteralMap(["textures", ["background.png", "heading.png", "new_game.png", "about.png", "node_neutral.png", "node_player.png", "node_enemy.png", "agent.png", "order.png"], "audio", ["click.ogg"]]);
  game.start$0();
  game.onLoadComplete = new $.main_anon(game);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.queryAll = function(selector) {
  return $.document().queryAll$1(selector);
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.AudioContext_AudioContext = function() {
  return new (window.AudioContext || window.webkitAudioContext)();
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.getInterceptor$JSStringJSArray(json).get$length(json), 0);
  t1._JsonParser$1(json);
  return t1;
};

$.Game$ = function() {
  return new $.Game(null, null, null, null, 0, 0, null, null);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.GameLoop_timeStampToSeconds = function(timeStamp) {
  return $.div(timeStamp, 1000);
};

$.GameLoop$ = function(element) {
  var t1 = new $.GameLoop(element, false, false, 0, null, 0, null, null, null, null, $.List_List(null), $.List_List(null), $.List_List(null), null, null, null);
  t1.GameLoop$1(element);
  return t1;
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, listener, t2;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  listener = new $._RemoteSendPortSync__call_anon(t1);
  t2 = $.index($.window().get$on(), source);
  $.getInterceptor$JSArray(t2).add$1(t2, listener);
  $._dispatchEvent(target, [source, message]);
  $.index($.window().get$on(), source).remove$1(listener);
  return t1.result_0;
};

$.Callback$many = function(f) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$many$1(f);
  return t1;
};

$.ScreenManager$ = function(canvasId, canvasSize) {
  var t1 = new $.ScreenManager($.List_List(null), null, null);
  t1.ScreenManager$2(canvasId, canvasSize);
  return t1;
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.LoadingScreen$ = function(screenManager) {
  var t1 = new $.LoadingScreen(null, null, null, true, $.List_List(null));
  t1.GameScreen$1(screenManager);
  t1.LoadingScreen$1(screenManager);
  return t1;
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List(null);
  t4 = $.List_List(null);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, $.Set_Set(), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $._getNewIsolateId();
  return $.ReceivePortSync__cachedIsolateId;
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  if ($.eqB(isolateId, $.ReceivePortSync__isolateId()))
    return $.index($.ReceivePortSync__portMap, portId).toSendPort$0();
  else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$.Set_Set = function() {
  return $._HashSetImpl$();
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._dispatchEvent = function(receiver, message) {
  var event$ = $.CustomEvent_CustomEvent(receiver, false, false, $.JSON_stringify(message));
  $.window().$$dom_dispatchEvent$1(event$);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if ($.eqB(element, t1.next$0()))
      return true;
  return false;
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t2 = $.getInterceptor$JSArray(result);
  t2.add$1(result, isList ? "[" : "{");
  for (t3 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; t3.get$hasNext() === true; first = false) {
    t4 = t3.next$0();
    if (!first)
      t2.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t2.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$._globalState = function() {
  return $globalState;
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var result;
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  result = receiver._port.callSync$1([receiver._liblib1$_id, member, kind, $.getInterceptor$JSArray(args).map$1(args, $._serialize)]);
  switch ($.index(result, 0)) {
    case "return":
      return $._deserialize($.index(result, 1));
    case "throws":
      throw $.$$throw($._deserialize($.index(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy(_port, _id);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT0.iterator$0(codePoints); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_parseDouble = function(string) {
  var result;
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  result = parseFloat(string);
  if ($.CONSTANT1.get$isNaN(result) === true && !$.eqB(string, "NaN"))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$._FunctionProxy$_internal = function(port, id) {
  var t1 = new $._FunctionProxy(null, port, id);
  t1._FunctionProxy$_internal$2(port, id);
  return t1;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, i, result, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, i = 0, result = ""; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.CONSTANT1.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(source).iterator$0(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT0.iterator$0(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.CONSTANT3.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Proxy_Proxy$_json = function(data) {
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot create Proxy out of scope.");
  return $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(data)));
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Proxy__serializeDataTree = function(data) {
  var entries, t1, t2;
  if (typeof data === 'object' && data !== null && data.is$Map()) {
    entries = $.List_List(null);
    for (t1 = data.get$keys(), t1 = $.getInterceptor$JSArray(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      entries.push([t2, $.Proxy__serializeDataTree(data.operator$index$1(t2))]);
    }
    return ["map", entries];
  } else if (typeof data === 'object' && data !== null && (data.constructor === Array || data.is$List()))
    return ["list", $.getInterceptor$JSArray(data).map$1(data, new $.Proxy__serializeDataTree_anon())];
  else
    return ["simple", $._serialize(data)];
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$.Proxy_Proxy = function(constructor$, arg1, arg2, arg3, arg4) {
  var t1, t2, t3, t4, arguments$;
  t1 = $ === arg1;
  if (t1)
    arg1 = null;
  t1 = !t1;
  t2 = $ === arg2;
  if (t2)
    arg2 = null;
  t2 = !t2;
  t3 = $ === arg3;
  if (t3)
    arg3 = null;
  t3 = !t3;
  t4 = $ === arg4;
  if (t4)
    arg4 = null;
  if (!t4)
    arguments$ = [arg1, arg2, arg3, arg4];
  else if (t3)
    arguments$ = [arg1, arg2, arg3];
  else if (t2)
    arguments$ = [arg1, arg2];
  else
    arguments$ = t1 ? [arg1] : [];
  return $.Proxy_Proxy$withArgList(constructor$, arguments$);
};

$.Proxy_Proxy$withArgList = function(constructor$, arguments$) {
  var t1, serialized;
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot create Proxy out of scope.");
  t1 = [constructor$];
  $.CONSTANT0.addAll$1(t1, arguments$);
  serialized = $.CONSTANT0.map$1(t1, $._serialize);
  return $._deserialize($._jsPortCreate.callSync$1(serialized));
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Size$ = function(height, width) {
  var t1 = new $.Size(null, null);
  t1.Size$2$height$width(height, width);
  return t1;
};

$.TextureManager_load = function(textureName, callback) {
  var img, texture, t1;
  img = $.ImageElement_ImageElement(null, "images\\" + $.S(textureName), null);
  texture = $.Texture$(textureName, img);
  $.indexSet($.get$TextureManager__textures(), textureName, texture);
  t1 = $.get$TextureManager__texturesLoading();
  $.getInterceptor$JSArray(t1).add$1(t1, texture);
  t1 = img.get$on().get$load();
  $.getInterceptor$JSArray(t1).add$1(t1, new $.TextureManager_load_anon(callback, texture));
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.vec2$ = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  t1.vec2$2(x_, y_);
  return t1;
};

$.HomeScreen$ = function(screenManager) {
  var t1 = new $.HomeScreen(null, null, true, $.List_List(null));
  t1.GameScreen$1(screenManager);
  t1.HomeScreen$1(screenManager);
  return t1;
};

$.Texture$ = function(name$, image) {
  var t1 = new $.Texture(name$, image, $.List_List(null), false);
  t1.Texture$2(name$, image);
  return t1;
};

$.Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Collections_reduce = function(iterable, initialValue, combine) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    initialValue = combine.call$2(initialValue, t1.next$0());
  return initialValue;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.vec2$raw = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  t1.vec2$raw$2(x_, y_);
  return t1;
};

$.ImageScreenElement$ = function(texture, gameScreen) {
  var t1 = new $.ImageScreenElement(null, null, true, gameScreen);
  t1.ImageScreenElement$2(texture, gameScreen);
  return t1;
};

$.vec2$zero = function() {
  var t1 = new $.vec2(null, null);
  t1.vec2$zero$0();
  return t1;
};

$.TextureManager_get = function(textureName) {
  return $.index($.get$TextureManager__textures(), textureName);
};

$.Collections_every = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor$JSArray(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = $.document().$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor$JSStringJSArray(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT8);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_0 = futures.length;
  values = $.List_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, values, completer, result, i));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.vec2$copy = function(other) {
  var t1 = new $.vec2(null, null);
  t1.vec2$copy$1(other);
  return t1;
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, false, [], [], []);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$.Button$ = function(pos, texturePath, callback, gameScreen) {
  var t1, t2;
  t1 = $.TextureManager_get(texturePath);
  t2 = new $.Button(null, null, null, null, null, null, true, gameScreen);
  t2.ImageScreenElement$2(t1, gameScreen);
  t2.Button$4(pos, texturePath, callback, gameScreen);
  return t2;
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$0();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._initialize = function(exception) {
  var t1;
  if (!($._jsPortSync == null))
    return;
  try {
    $._jsPortSync = $.window().lookupPort$1("dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Instantiate a Date with arguments.\n  function instantiateDate(args) {\n    // 7 arguments because the longest constructor is : new Date(year, month,\n    // day, hour, minute, second, millisecond)\n    if (args.length === 0) {\n      return new Date();\n    } else if (args.length === 1) {\n      return new Date(args[0]);\n    } else if (args.length === 2) {\n      return new Date(args[0], args[1]);\n    } else if (args.length === 3) {\n      return new Date(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      return new Date(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      return new Date(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5]);\n    } else if (args.length === 7) {\n      return new Date(args[0], args[1], args[2], args[3], args[4], args[5],\n                     args[6]);\n    }\n    return null;\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    var ret = null;\n    // Date can only be instantiated with the new operator.\n    if (constructor === Date) {\n      ret = instantiateDate(args);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = $.window().lookupPort$1("dart-js-context");
  }
  $._jsPortCreate = $.window().lookupPort$1("dart-js-create");
  $._jsPortDebug = $.window().lookupPort$1("dart-js-debug");
  $._jsPortEquals = $.window().lookupPort$1("dart-js-equals");
  $._jsPortInstanceof = $.window().lookupPort$1("dart-js-instanceof");
  $._jsPortConvert = $.window().lookupPort$1("dart-js-convert");
  $._jsEnterJavaScriptScope = $.window().lookupPort$1("dart-js-enter-scope");
  $._jsExitJavaScriptScope = $.window().lookupPort$1("dart-js-exit-scope");
  $._jsGlobalize = $.window().lookupPort$1("dart-js-globalize");
  $._jsInvalidate = $.window().lookupPort$1("dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  $.window().registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  $.window().registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  if ($.eqB($._depth(), 0))
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $._deserialize($._jsPortSync.callSync$1([]));
};

$._depth = function() {
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  var t1 = $.get$_proxiedObjectTable().get$_scopeIndices();
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$._exitScope = function(depth) {
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.vec3$copy = function(other) {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$copy$1(other);
  return t1;
};

$.retain = function(proxy) {
  $._jsGlobalize.callSync$1($._serialize(proxy));
  return proxy;
};

$._inject = function(code) {
  var script, t1;
  script = $.ScriptElement_ScriptElement();
  script.set$type("text/javascript");
  script.set$innerHTML(code);
  t1 = $.document().get$body().get$nodes();
  $.getInterceptor$JSArray(t1).add$1(t1, script);
};

$.map = function(data) {
  return $.Proxy_Proxy$_json(data);
};

$.array = function(list) {
  return $.Proxy_Proxy$_json(list);
};

$._serialize = function(message) {
  var t1, proxy;
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  else {
    if (typeof message === 'object' && message !== null && message.is$Element()) {
      t1 = message.ownerDocument;
      t1 = t1 == null || $.eqB(t1, $.document());
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === 'object' && message !== null && !!message.is$Callback)
      return message.get$_serialized();
    else if (typeof message === 'function' || typeof message === 'object' && message !== null && !!message.is$Function)
      if ($.get$_FunctionProxy__map().containsKey$1(message) === true) {
        proxy = $.index($.get$_FunctionProxy__map(), message);
        return ["funcref", proxy.get$_liblib1$_id(), proxy.get$_port()];
      } else
        throw $.$$throw("A function must be converted to a Callback before it can be serialized.");
    else if (typeof message === 'object' && message !== null && !!message.is$Proxy)
      return ["objref", message._liblib1$_id, message._port];
    else {
      t1 = $.get$_proxiedObjectTable();
      return ["objref", $.getInterceptor$JSArray(t1).add$1(t1, message), $.get$_proxiedObjectTable().get$sendPort()];
    }
  }
};

$._deserialize = function(message) {
  var t1, t2;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  if (message == null)
    return;
  else if (typeof message === 'string' || typeof message === 'number' || typeof message === 'boolean')
    return message;
  else if (typeof message === 'object' && message !== null && !!message.is$SendPortSync)
    return message;
  switch ($.index(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement($.index(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$.vec3$raw = function(x_, y_, z_) {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$raw$3(x_, y_, z_);
  return t1;
};

$.vec3$zero = function() {
  var t1 = new $.vec3(null, null, null);
  t1.vec3$zero$0();
  return t1;
};

$._serializeElement = function(e) {
  var id, t1, top$, oldValue, newValue, t2;
  if (e.get$attributes().containsKey$1("data-dart_id") === true)
    id = $.index(e.get$attributes(), "data-dart_id");
  else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.add(t1, 1);
    id = "dart-" + $.S(t1);
    $.indexSet(e.get$attributes(), "data-dart_id", id);
  }
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        oldValue = $.index(top$.get$attributes(), "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).concat$1(oldValue, "a");
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        break;
      }
      if (top$.get$parent() == null) {
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", "a");
        t1 = $.document().get$documentElement().get$elements();
        $.getInterceptor$JSArray(t1).add$1(t1, top$);
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return id;
};

$._deserializeElement = function(id) {
  var list, t1, e, top$, oldValue, newValue, t2;
  list = $.queryAll("[data-dart_id=\"" + $.S(id) + "\"]");
  t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.gtB(t1.get$length(list), 1))
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.eqB(t1.get$length(list), 0))
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = $.index(list, 0);
  t1 = $.document().get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top$ = e; true;) {
      if (top$.get$attributes().containsKey$1("data-dart_temporary_attached") === true) {
        oldValue = $.index(top$.get$attributes(), "data-dart_temporary_attached");
        newValue = $.getInterceptor$JSString(oldValue).substring$1(oldValue, 1);
        $.indexSet(top$.get$attributes(), "data-dart_temporary_attached", newValue);
        t1 = $.index(top$.get$attributes(), "data-dart_temporary_attached");
        if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0)) {
          top$.get$attributes().remove$1("data-dart_temporary_attached");
          top$.remove$0();
        }
        break;
      }
      t1 = top$.get$parent();
      t2 = $.document().get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top$ = top$.get$parent();
    }
  return e;
};

$.normalize = function(x, out) {
  var t1;
  if (typeof x === 'number') {
    t1 = $.sign(x, null);
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    return 1 * t1;
  }
  if (typeof x === 'object' && x !== null && !!x.is$vec2) {
    if (out == null)
      out = $.vec2$copy(x);
    x.normalize$0();
    return out;
  }
  if (typeof x === 'object' && x !== null && !!x.is$vec3) {
    if (out == null)
      out = $.vec3$copy(x);
    x.normalize$0();
    return out;
  }
  if (typeof x === 'object' && x !== null && !!x.is$vec4) {
    if (out == null)
      out = $.vec4$copy(x);
    x.normalize$0();
    return out;
  }
  return;
};

$.distance = function(x, y) {
  var t1 = $.sub(x, y);
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.sign = function(arg, out) {
  var t1;
  if (typeof arg === 'number')
    return $._ScalerHelpers_sign(arg);
  if (typeof arg === 'object' && arg !== null && !!arg.is$vec2) {
    if (out == null)
      out = $.vec2$zero();
    t1 = $._ScalerHelpers_sign(arg.x);
    $.propertyTypeCast(out, 'is$vec2');
    out.set$x(t1);
    out.set$y($._ScalerHelpers_sign(arg.y));
    return out;
  }
  if (typeof arg === 'object' && arg !== null && !!arg.is$vec3) {
    if (out == null)
      out = $.vec3$zero();
    t1 = $._ScalerHelpers_sign(arg.x);
    $.propertyTypeCast(out, 'is$vec3');
    out.set$x(t1);
    out.set$y($._ScalerHelpers_sign(arg.y));
    out.set$z($._ScalerHelpers_sign(arg.z));
    return out;
  }
  if (typeof arg === 'object' && arg !== null && !!arg.is$vec4) {
    if (out == null)
      out = $.vec4$zero();
    t1 = $._ScalerHelpers_sign(arg.x);
    $.propertyTypeCast(out, 'is$vec4');
    out.set$x(t1);
    out.set$y($._ScalerHelpers_sign(arg.y));
    out.set$z($._ScalerHelpers_sign(arg.z));
    out.set$w($._ScalerHelpers_sign(arg.w));
    return out;
  }
  throw $.$$throw($.ArgumentError$(arg));
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!$.isJsArray(charCodes))
    charCodes = $.List_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$._HashSetImpl$ = function() {
  var t1 = new $._HashSetImpl(null);
  t1._HashSetImpl$0();
  return t1;
};

$.List_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(null);
  for (t1 = $.getInterceptor$JSArray(other).iterator$0(other); t1.get$hasNext() === true;)
    list.push(t1.next$0());
  return list;
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$._HashSetIterator$ = function(set_) {
  var t1 = new $._HashSetIterator(set_._backingMap._keys, -1);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.Comparable_compare = function(a, b) {
  return $.getInterceptor$JSStringJSNumber(a).compareTo$1(a, b);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.AudioManager_setup = function(exception) {
  try {
    $.AudioManager_audioContext = $.AudioContext_AudioContext();
    $.AudioManager_gainNode = $.AudioManager_audioContext.createGain$0();
  } catch (exception) {
    $.unwrapException(exception);
    $.AudioManager_enabled = false;
    $.print("Web Audio is not enabled for this browser");
  }

  if ($.AudioManager_audioContext == null) {
    $.AudioManager_enabled = false;
    $.print("Web Audio is not enabled for this browser");
  }
};

$.AudioManager_load = function(audioName, callback) {
  var audio, xhr, t1;
  audio = $.Audio$(audioName, $.AudioManager_audioContext);
  if ($.AudioManager_enabled === true) {
    xhr = $.HttpRequest_HttpRequest();
    xhr.open$3("GET", "audio\\" + $.S(audioName), true);
    xhr.set$responseType("arraybuffer");
    $.indexSet($.get$AudioManager__audios(), audioName, audio);
    t1 = $.get$AudioManager__audiosLoading();
    $.getInterceptor$JSArray(t1).add$1(t1, audio);
    t1 = xhr.get$on().get$load();
    $.getInterceptor$JSArray(t1).add$1(t1, new $.AudioManager_load_anon(callback, audio, audioName, xhr));
    xhr.send$0();
    $.print("Started fetching audio file " + $.S(audioName));
  } else {
    audio.onLoadFailure$0();
    if (!(callback == null))
      callback.call$1(audio);
  }
};

$.DatabaseEvents$ = function(_ptr) {
  return new $.DatabaseEvents(_ptr);
};

$.Audio$ = function(name$, _audioContext) {
  return new $.Audio(name$, $.List_List(null), false, false, null, _audioContext);
};

$.GameplayScreen$ = function(screenManager) {
  var t1 = new $.GameplayScreen($.List_List(null), true, null, null, true, $.List_List(null));
  t1.GameScreen$1(screenManager);
  t1.GameplayScreen$1(screenManager);
  return t1;
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.FortNode$ = function(gameScreen) {
  var t1, t2, t3, t4;
  t1 = $.List_List(null);
  t2 = $.List_List(null);
  t3 = $.vec2$(0, 0);
  t4 = $.TextureManager_get("node_neutral.png");
  t2 = new $.FortNode(t1, t2, null, null, 0, 0, null, null, null, null, null, null, true, gameScreen);
  t2.ImageScreenElement$2(t4, gameScreen);
  t2.Button$4(t3, "node_neutral.png", null, gameScreen);
  t2.FortNode$1(gameScreen);
  return t2;
};

$.AudioManager_get = function(audioName) {
  return $.index($.get$AudioManager__audios(), audioName);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.Random_Random = function(seed) {
  return $.CONSTANT6;
};

$.Player$ = function(playerId, gameScreen) {
  var t1 = new $.Player(playerId, null, null, null, true, gameScreen);
  t1.Player$2(playerId, gameScreen);
  return t1;
};

$.Player_setup = function(gameScreen) {
  $.Player_NeutralPlayer = $.Player$(0, gameScreen);
  $.Player_CurrentPlayer = $.Player$(1, gameScreen);
  $.Player_EnemyPlayer = $.Enemy$(gameScreen);
};

$.Player_get = function(playerId) {
  return $.index($.get$Player_players(), playerId);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.FortPath$ = function(nodeA, nodeB, screen$) {
  var t1 = new $.FortPath(nodeA, nodeB, null, true, screen$);
  t1.FortPath$3(nodeA, nodeB, screen$);
  return t1;
};

$.Agent$ = function(home$, gameScreen) {
  var t1, t2;
  t1 = $.TextureManager_get("agent.png");
  t2 = new $.Agent(home$, null, null, null, null, null, true, gameScreen);
  t2.ImageScreenElement$2(t1, gameScreen);
  t2.Agent$2(home$, gameScreen);
  return t2;
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.vec4$zero = function() {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$zero$0();
  return t1;
};

$.vec4$copy = function(other) {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$copy$1(other);
  return t1;
};

$.vec4$raw = function(x_, y_, z_, w_) {
  var t1 = new $.vec4(null, null, null, null);
  t1.vec4$raw$4(x_, y_, z_, w_);
  return t1;
};

$.OpenDBRequestEvents$ = function(_ptr) {
  return new $.OpenDBRequestEvents(_ptr);
};

$.RequestEvents$ = function(_ptr) {
  return new $.RequestEvents(_ptr);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.TransactionEvents$ = function(_ptr) {
  return new $.TransactionEvents(_ptr);
};

$.VersionChangeRequestEvents$ = function(_ptr) {
  return new $.VersionChangeRequestEvents(_ptr);
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  return $._CustomEventFactoryProvider_createCustomEvent(type, canBubble, cancelable, detail);
};

$.RtcDataChannelEvents$ = function(_ptr) {
  return new $.RtcDataChannelEvents(_ptr);
};

$.ApplicationCacheEvents$ = function(_ptr) {
  return new $.ApplicationCacheEvents(_ptr);
};

$._Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.RtcPeerConnectionEvents$ = function(_ptr) {
  return new $.RtcPeerConnectionEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.Enemy$ = function(gameplayScreen) {
  var t1 = new $.Enemy(0, 0, null, 2, null, null, null, true, gameplayScreen);
  t1.Player$2(2, gameplayScreen);
  t1.Enemy$1(gameplayScreen);
  return t1;
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.getInterceptor$JSStringJSArray(array).get$length(array), array, 0);
};

$.GameLoopKeyboard$ = function(gameLoop) {
  var t1, t2;
  t1 = $.get$GameLoopKeyboard__buttonIds();
  t2 = new $.GameLoopKeyboard(gameLoop, $.Map_Map());
  t2.GameLoopDigitalInput$2(gameLoop, t1);
  return t2;
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.GameLoopMouse$ = function(gameLoop) {
  var t1, t2;
  t1 = $.get$GameLoopMouse__buttonIds();
  t2 = new $.GameLoopMouse(0, 0, 0, 0, 0, 0, gameLoop, $.Map_Map());
  t2.GameLoopDigitalInput$2(gameLoop, t1);
  return t2;
};

$.GameLoopGamepad$ = function(gameLoop) {
  return new $.GameLoopGamepad(gameLoop, null, null);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.TextElement$ = function(gameScreen, text) {
  var t1 = new $.TextElement(text, null, true, gameScreen);
  t1.TextElement$2(gameScreen, text);
  return t1;
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.getInterceptor$JSArray(m).forEach$1(m, new $.Maps__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $.Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.ScriptElement_ScriptElement = function() {
  return $.document().$$dom_createElement$1("script");
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._ScalerHelpers_sign = function(x) {
  if ($.gtB(x, 0))
    return 1;
  else if ($.eqB(x, 0))
    return 0;
  else
    return -1;
};

$.GameLoopDigitalButtonEvent$ = function(buttonId, down, frame, time) {
  return new $.GameLoopDigitalButtonEvent(down, frame, buttonId, time);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.GameLoopMouseEvent$ = function(x, y, dx, dy, time, frame) {
  return new $.GameLoopMouseEvent(x, y, dx, dy, time, frame);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor$JSStringJSArray(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.indexSet(a, j, a[j0]);
      j = j0;
    }
    $.indexSet(a, j, el);
  }
};

$._Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, t2, great0, less0;
  sixth = $.tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.indexSet(a, index1, el1);
  $.indexSet(a, index3, el3);
  $.indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 >= a.length)
    throw $.ioore(t1);
  $.indexSet(a, left, a[t1]);
  $.indexSet(a, t1, el2);
  t1 = great + 1;
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  $.indexSet(a, right, a[t1]);
  $.indexSet(a, t1, el4);
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.indexSet(a, k, a[less]);
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              $.indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.indexSet(a, less, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.indexSet(a, k, a[great]);
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.getInterceptor$JSStringJSArray(a).get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.getInterceptor$JSStringJSArray(a).get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var t2, completer, result, values, i, future;
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT8);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List(t2.get$length(futures));
  for (i = 0; $.ltB(i, t2.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, values, completer, result, i));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
Isolate.$finishClasses($$);
$$ = {};
$.CONSTANT4 = new Isolate.$isolateProperties.JSInt();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT8 = Isolate.makeConstantList([]);
$.CONSTANT3 = new Isolate.$isolateProperties.JSString();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT7 = new Isolate.$isolateProperties.Object();
$.CONSTANT5 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CONSTANT8);
$.CONSTANT2 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT6 = new Isolate.$isolateProperties._Random();
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT1 = new Isolate.$isolateProperties.JSNumber();
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT2;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.AudioManager_audioContext = null;
$.AudioManager_onLoadComplete = null;
$.AudioManager_gainNode = null;
$.AudioManager_enabled = true;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.KeyCode_ENTER = 13;
$.KeyCode_SHIFT = 16;
$.KeyCode_CTRL = 17;
$.KeyCode_ALT = 18;
$.KeyCode_SPACE = 32;
$.KeyCode_LEFT = 37;
$.KeyCode_UP = 38;
$.KeyCode_RIGHT = 39;
$.KeyCode_DOWN = 40;
$.FortNode_ATTACK_WAIT = 2;
$.FortNode_MAX_UNITS = 5;
$.FortNode_UNIT_WAIT = 3;
$._getTypeNameOf = null;
$.KeyCode_ZERO = 48;
$.KeyCode_ONE = 49;
$.KeyCode_TWO = 50;
$.KeyCode_THREE = 51;
$.KeyCode_FOUR = 52;
$.KeyCode_FIVE = 53;
$.KeyCode_SIX = 54;
$.KeyCode_SEVEN = 55;
$.KeyCode_EIGHT = 56;
$.KeyCode_NINE = 57;
$.TextureManager_onLoadComplete = null;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$.KeyCode_A = 65;
$.KeyCode_B = 66;
$.Player_CurrentPlayer = null;
$.KeyCode_C = 67;
$.KeyCode_D = 68;
$.Player_EnemyPlayer = null;
$.KeyCode_E = 69;
$.Player_NEUTRAL = 0;
$.KeyCode_F = 70;
$.Player_PLAYER = 1;
$.KeyCode_G = 71;
$.Player_ENEMY = 2;
$.KeyCode_H = 72;
$.Player_NeutralPlayer = null;
$.KeyCode_I = 73;
$.KeyCode_J = 74;
$.KeyCode_K = 75;
$._ReceivePortImpl__nextFreeId = 1;
$.KeyCode_L = 76;
$.KeyCode_M = 77;
$.KeyCode_N = 78;
$.KeyCode_O = 79;
$.KeyCode_P = 80;
$.KeyCode_Q = 81;
$.KeyCode_R = 82;
$.KeyCode_S = 83;
$.KeyCode_T = 84;
$.KeyCode_U = 85;
$.KeyCode_V = 86;
$.KeyCode_W = 87;
$.KeyCode_X = 88;
$.KeyCode_Y = 89;
$.KeyCode_Z = 90;
$.Agent_MOVE_SPEED = 1;
$.Agent_NODE_DISTANCE = 20;
$.KeyCode_TILDE = 192;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.JSInvocationMirror_SETTER = 2;
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$._JsonParser_BACKSPACE = 8;
$._JsonParser_TAB = 9;
$._JsonParser_NEW_LINE = 10;
$._JsonParser_FORM_FEED = 12;
$._JsonParser_CARRIAGE_RETURN = 13;
$._JsonParser_SPACE = 32;
$._JsonParser_QUOTE = 34;
$._JsonParser_PLUS = 43;
$._JsonParser_COMMA = 44;
$._JsonParser_MINUS = 45;
$._JsonParser_DOT = 46;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_0 = 48;
$._JsonParser_CHAR_1 = 49;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_CHAR_3 = 51;
$._JsonParser_CHAR_4 = 52;
$._JsonParser_CHAR_5 = 53;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_CHAR_9 = 57;
$._JsonParser_COLON = 58;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_LBRACKET = 91;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_RBRACKET = 93;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CHAR_E = 101;
$._cachedBrowserPrefix = null;
$._JsonParser_CHAR_F = 102;
$._JsonParser_CHAR_N = 110;
$._JsonParser_CHAR_R = 114;
$._JsonParser_CHAR_T = 116;
$._JsonParser_CHAR_U = 117;
$._JsonParser_LBRACE = 123;
$._JsonParser_RBRACE = 125;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_NUMBER_LITERAL = 45;
$._JsonParser_NULL_LITERAL = 110;
$._jsPortSync = null;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$._jsPortDebug = null;
$._JsonParser_WHITESPACE = 32;
$._jsPortEquals = null;
$._JsonParser_LAST_ASCII = 125;
$._jsPortInstanceof = null;
$._JsonParser_NULL_STRING = "null";
$._jsPortConvert = null;
$._JsonParser_TRUE_STRING = "true";
$._jsEnterJavaScriptScope = null;
$._JsonParser_FALSE_STRING = "false";
$._jsExitJavaScriptScope = null;
$._JsonParser_tokens = null;
$._jsGlobalize = null;
$._jsPortCreate = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$._DART_ID = "data-dart_id";
$._DART_TEMPORARY_ATTACHED = "data-dart_temporary_attached";
$.GameLoopKeyboard_A = 65;
$.GameLoopKeyboard_B = 66;
$.GameLoopKeyboard_C = 67;
$.GameLoopKeyboard_D = 68;
$.GameLoopKeyboard_E = 69;
$.GameLoopKeyboard_F = 70;
$.GameLoopKeyboard_G = 71;
$.GameLoopKeyboard_H = 72;
$.GameLoopKeyboard_I = 73;
$.GameLoopKeyboard_J = 74;
$.GameLoopKeyboard_K = 75;
$.GameLoopKeyboard_L = 76;
$.GameLoopKeyboard_M = 77;
$.GameLoopKeyboard_N = 78;
$.GameLoopKeyboard_O = 79;
$.GameLoopKeyboard_P = 80;
$.GameLoopKeyboard_Q = 81;
$.GameLoopKeyboard_R = 82;
$.GameLoopKeyboard_S = 83;
$.GameLoopKeyboard_T = 84;
$.GameLoopKeyboard_U = 85;
$.GameLoopKeyboard_V = 86;
$.GameLoopKeyboard_W = 87;
$.GameLoopKeyboard_X = 88;
$.GameLoopKeyboard_Y = 89;
$.GameLoopKeyboard_Z = 90;
$.GameLoopKeyboard_SHIFT = 16;
$.GameLoopKeyboard_CTRL = 17;
$.GameLoopKeyboard_ALT = 18;
$.GameLoopKeyboard_SPACE = 32;
$.GameLoopKeyboard_ZERO = 48;
$.GameLoopKeyboard_ONE = 49;
$.GameLoopKeyboard_TWO = 50;
$.GameLoopKeyboard_THREE = 51;
$.GameLoopKeyboard_FOUR = 52;
$.GameLoopKeyboard_FIVE = 53;
$.ReceivePortSync__portMap = null;
$.GameLoopKeyboard_SIX = 54;
$.ReceivePortSync__portIdCount = null;
$.GameLoopKeyboard_SEVEN = 55;
$.ReceivePortSync__cachedIsolateId = null;
$.GameLoopKeyboard_EIGHT = 56;
$.GameLoopKeyboard_NINE = 57;
$.GameLoopKeyboard_TILDE = 192;
$.GameLoopKeyboard_ENTER = 13;
$.GameLoopKeyboard_UP = 38;
$.GameLoopKeyboard_DOWN = 40;
$.GameLoopKeyboard_LEFT = 37;
$.GameLoopKeyboard_RIGHT = 39;
$.GameLoopMouse_LEFT = 0;
$.GameLoopMouse_MIDDLE = 1;
$.GameLoopMouse_RIGHT = 2;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSStringJSNumber = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  if (typeof receiver == 'number' && Math.floor(receiver) == receiver) return $.JSInt.prototype;
  if (typeof receiver == 'number') return $.JSDouble.prototype;
  if (receiver == null) return $.JSNull.prototype;
  if (typeof receiver == 'function') return $.JSFunction.prototype;
  if (typeof receiver == 'boolean') return $.JSBool.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, '_audios', 'AudioManager__audios', 'get$AudioManager__audios', function() {
  return $.Map_Map();
});
Isolate.$lazy($, '_audiosLoading', 'AudioManager__audiosLoading', 'get$AudioManager__audiosLoading', function() {
  return $.List_List(null);
});
Isolate.$lazy($, '_buttonIds', 'GameLoopMouse__buttonIds', 'get$GameLoopMouse__buttonIds', function() {
  return [0, 1, 2];
});
Isolate.$lazy($, '_map', '_FunctionProxy__map', 'get$_FunctionProxy__map', function() {
  return $.Map_Map();
});
Isolate.$lazy($, 'players', 'Player_players', 'get$Player_players', function() {
  return $.Map_Map();
});
Isolate.$lazy($, '_proxiedObjectTable', '_proxiedObjectTable', 'get$_proxiedObjectTable', function() {
  return $._ProxiedObjectTable$();
});
Isolate.$lazy($, '_textures', 'TextureManager__textures', 'get$TextureManager__textures', function() {
  return $.Map_Map();
});
Isolate.$lazy($, '_texturesLoading', 'TextureManager__texturesLoading', 'get$TextureManager__texturesLoading', function() {
  return $.List_List(null);
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
Isolate.$lazy($, '_buttonIds', 'GameLoopKeyboard__buttonIds', 'get$GameLoopKeyboard__buttonIds', function() {
  return [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 192, 13, 38, 40, 37, 39];
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 is$KeyRange: function() { return false; },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$FileList: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Element: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.AbstractWorkerEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"":"shape=,target=,type=",
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WebKitAnimation', {
 play$0: function() {
  return this.play();
}
});

$.$defineNativeClass('HTMLAppletElement', {"":"height=,width="
});

$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.ApplicationCacheEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAreaElement', {"":"shape=,target="
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"":"value="
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() {
  return this.clear.call$0();
}
});

$.$defineNativeClass('HTMLBaseElement', {"":"target="
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Blob', {"":"type>",
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('HTMLButtonElement', {"":"type=,value="
});

$.$defineNativeClass('HTMLCanvasElement', {"":"height=,width="
});

$.$defineNativeClass('CharacterData', {"":"length>",
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"":"height>,left>,top>,width>"
});

$.$defineNativeClass('CSSFontFaceRule', {"":"style>"
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"":"style>"
});

$.$defineNativeClass('WebKitCSSMatrix', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSPageRule', {"":"style>"
});

$.$defineNativeClass('CSSRule', {"":"type>"
});

$.$defineNativeClass('CSSStyleDeclaration', {"":"length>",
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() {
  return this.get$clear().call$0();
},
 set$cursor: function(value) {
  this.setProperty$3("cursor", value, "");
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + "filter");
},
 filter$1: function(arg0) {
  return this.get$filter().call$1(arg0);
},
 get$height: function() {
  return this.getPropertyValue$1("height");
},
 set$height: function(value) {
  this.setProperty$3("height", value, "");
},
 get$left: function() {
  return this.getPropertyValue$1("left");
},
 get$resize: function() {
  return this.getPropertyValue$1("resize");
},
 set$src: function(value) {
  this.setProperty$3("src", value, "");
},
 get$top: function() {
  return this.getPropertyValue$1("top");
},
 get$width: function() {
  return this.getPropertyValue$1("width");
},
 set$width: function(value) {
  this.setProperty$3("width", value, "");
}
});

$.$defineNativeClass('CSSStyleRule', {"":"style>"
});

$.$defineNativeClass('CustomEvent', {"":"detail>",
 $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
  return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
}
});

$.$defineNativeClass('DataTransferItem', {"":"type>"
});

$.$defineNativeClass('DataTransferItemList', {"":"length>",
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', {
 open$3: function(arg0, arg1, arg2) {
  return this.open.call$3(arg0, arg1, arg2);
}
});

$.$defineNativeClass('Document', {"":"$$dom_body:body~,documentElement>",
 get$on: function() {
  return $.DocumentEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_createEvent$1: function(eventType) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_createEvent$1')) {
    return this.createEvent(eventType);
  } else {
    return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  }
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.CONSTANT3.substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  var mutableMatches, len, copyOfMatches, t1, i;
  if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT3.substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(3, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      len = env1;
      mutableMatches = env0;
      break;
    case 3:
      mutableMatches = env0;
      break;
    case 4:
      mutableMatches = env1;
      len = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, len, copyOfMatches, i, t1;
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT3.substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            len = $.getInterceptor$JSStringJSArray(mutableMatches).get$length(mutableMatches);
          case 2:
            state0 = 0;
            copyOfMatches = $.List_List(len);
            for (i = 0; $.ltB(i, len); ++i) {
              t1 = $.index(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                case 3:
                  state0 = 0;
                  len = $.getInterceptor$JSStringJSArray(mutableMatches).get$length(mutableMatches);
                case 4:
                  state0 = 0;
                  copyOfMatches = $.List_List(len);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = $.index(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
}
});

$.$defineNativeClass('DocumentFragment', {
 get$elements: function() {
  return this.get$children();
},
 get$children: function() {
  if (this._children == null)
    this._children = $.FilteredElementList$(this);
  return this._children;
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHtml: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHtml')) {
    var t1, e, nodes;
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).clear$0(t1);
    e = $.Element_Element$tag("div");
    e.set$innerHtml(value);
    nodes = $.List_List$from(e.get$nodes());
    t1 = this.get$nodes();
    $.getInterceptor$JSArray(t1).addAll$1(t1, nodes);
  } else {
    return Object.prototype.set$innerHtml.call(this, value);
  }
},
 get$id: function() {
  return "";
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CONSTANT5;
},
 get$style: function() {
  return $.Element_Element$tag("div").get$style();
},
 click$0: function() {
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DOMException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MimeType', {"":"type>"
});

$.$defineNativeClass('MimeTypeArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"":"length>"
});

$.$defineNativeClass('PluginArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"":"type>",
 setPosition$2: function(node, offset) {
  return this.setPosition(node,offset);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"":"value="
});

$.$defineNativeClass('DOMStringList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {"":"length>",
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Element', {"":"$$dom_children:children~,id>,innerHtml:innerHTML|,clientHeight>,clientWidth>,$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~,style>",
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$innerHTML: function(value) {
  this.set$innerHtml(value);
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
    return this.get$children();
  } else {
    return Object.prototype.get$elements.call(this);
  }
},
 get$children: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$children')) {
    return $._ChildrenElementList$_wrap(this);
  } else {
    return Object.prototype.get$children.call(this);
  }
},
 set$children: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$children')) {
    var copy, children, t1;
    copy = $.List_List$from(value);
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, copy);
  } else {
    return Object.prototype.set$children.call(this, value);
  }
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.ElementEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 click$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('click$0')) {
    return this.click();
  } else {
    return Object.prototype.click$0.call(this);
  }
},
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"":"height=,src<,type=,width="
});

$.$defineNativeClass('Entry', {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Event', {"":"timeStamp>,type>",
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.target);
}
});

$.$defineNativeClass('EventException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.Events$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }
},
 $$dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_dispatchEvent$1')) {
    return this.dispatchEvent(event);
  } else {
    return Object.prototype.$$dom_dispatchEvent$1.call(this, event);
  }
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
}
});

$.$defineNativeClass('HTMLFieldSetElement', {"":"elements>,type>"
});

$.$defineNativeClass('File', {
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileReader', {
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', {"":"length>",
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"":"length>"
});

$.$defineNativeClass('Float32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {"":"length>,target=",
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('HTMLFrameElement', {"":"height>,src<,width>"
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('Gamepad', {"":"id>"
});

$.$defineNativeClass('HTMLHRElement', {"":"width="
});

$.$defineNativeClass('HTMLAllCollection', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {
 get$length: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$length')) {
    return this.length;
  } else {
    return Object.prototype.get$length.call(this);
  }
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$length')) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  } else {
    return Object.prototype.set$length.call(this, value);
  }
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {
 get$body: function() {
  return $.document().get$$$dom_body();
}
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('XMLHttpRequest', {"":"response>,responseType<",
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method, url, async) {
  return this.open(method, url, async);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
}
});

$.$defineNativeClass('XMLHttpRequestException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"":"height=,src<,width="
});

$.$defineNativeClass('ImageData', {"":"height>,width>",
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"":"height=,src<,width=,x>,y>",
 complete$1: function(arg0) {
  return this.complete.call$1(arg0);
}
});

$.$defineNativeClass('HTMLInputElement', {"":"height=,pattern>,src<,type=,value=,width=",
 get$on: function() {
  return $.InputElementEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"":"type>"
});

$.$defineNativeClass('KeyboardEvent', {
 get$keyCode: function() {
  return this.keyCode;
}
});

$.$defineNativeClass('HTMLKeygenElement', {"":"type>"
});

$.$defineNativeClass('HTMLLIElement', {"":"type=,value="
});

$.$defineNativeClass('HTMLLinkElement', {"":"target=,type="
});

$.$defineNativeClass('History', {"":"length>"
});

$.$defineNativeClass('Location', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMWindow', {"":"navigator>,screen>",
 get$document: function() {
  return this.document;
},
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._liblib$_requestAnimationFrame$1(callback);
},
 _liblib$_requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 get$_liblib$_requestAnimationFrame: function() {
  return new $.BoundClosure(this, '_liblib$_requestAnimationFrame$1');
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 lookupPort$1: function(name$) {
  var port = $.JSON_parse($.index(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name$));
  return $._JsDeserializer$().deserialize$1(port);
},
 registerPort$2: function(name$, port) {
  var serialized = $._JsSerializer$().traverse$1(port);
  $.indexSet(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name$, $.JSON_stringify(serialized));
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.parent);
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.top);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMarqueeElement', {"":"height=,width=",
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('MediaController', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 play$0: function() {
  return this.play();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"":"src<",
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 load$0: function() {
  return this.load();
},
 get$load: function() {
  return new $.BoundClosure0(this, 'load$0');
},
 play$0: function() {
  return this.play();
}
});

$.$defineNativeClass('MediaList', {"":"length>"
});

$.$defineNativeClass('MediaSource', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"":"length>",
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MessageEvent', {"":"ports>"
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('HTMLMeterElement', {"":"value="
});

$.$defineNativeClass('MouseEvent', {"":"button>,webkitMovementX>,webkitMovementY>,x>,y>",
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$("offsetX is only supported on elements"));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$("offsetY is only supported on elements"));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationRecord', {"":"target>,type>"
});

$.$defineNativeClass('NamedNodeMap', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"":"userAgent>"
});

$.$defineNativeClass('Node', {"":"$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~,text:textContent}",
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
    var t1 = this.parentNode;
    if (!(t1 == null))
      t1.$$dom_removeChild$1(this);
  } else {
    return Object.prototype.remove$0.call(this);
  }
},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.parentNode;
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
}
});

$.$defineNativeClass('NodeList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 show$0: function() {
  return this.show();
}
});

$.$defineNativeClass('HTMLOListElement', {"":"type=",
 start$0: function() {
  return this.start.call$0();
},
 start$1: function(arg0) {
  return this.start.call$1(arg0);
}
});

$.$defineNativeClass('HTMLObjectElement', {"":"height=,type=,width="
});

$.$defineNativeClass('HTMLOptionElement', {"":"value="
});

$.$defineNativeClass('HTMLOutputElement', {"":"type>,value="
});

$.$defineNativeClass('HTMLParamElement', {"":"type=,value="
});

$.$defineNativeClass('PeerConnection00', {
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('PerformanceNavigation', {"":"type>"
});

$.$defineNativeClass('WebKitPoint', {"":"x>,y>"
});

$.$defineNativeClass('HTMLPreElement', {"":"width="
});

$.$defineNativeClass('ProcessingInstruction', {"":"target>"
});

$.$defineNativeClass('HTMLProgressElement', {"":"value="
});

$.$defineNativeClass('RadioNodeList', {"":"value="
});

$.$defineNativeClass('Range', {
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"":"left>,top>"
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RtcDataChannelEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RtcPeerConnectionEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"":"type="
});

$.$defineNativeClass('Screen', {"":"height>,width>"
});

$.$defineNativeClass('HTMLScriptElement', {"":"src<,type="
});

$.$defineNativeClass('ScriptProfileNode', {
 children$0: function() {
  return this.children();
},
 get$children: function() {
  return new $.BoundClosure0(this, 'children$0');
}
});

$.$defineNativeClass('HTMLSelectElement', {"":"length=,type>,value="
});

$.$defineNativeClass('ShadowRoot', {"":"innerHtml:innerHTML|"
});

$.$defineNativeClass('SharedWorkerContext', {
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('SourceBufferList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"":"src<,type="
});

$.$defineNativeClass('SpeechGrammar', {"":"src<"
});

$.$defineNativeClass('SpeechGrammarList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"":"length>"
});

$.$defineNativeClass('SQLResultSetRowList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.length;
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"":"key>"
});

$.$defineNativeClass('HTMLStyleElement', {"":"type="
});

$.$defineNativeClass('StyleMedia', {"":"type>"
});

$.$defineNativeClass('StyleSheet', {"":"type>"
});

$.$defineNativeClass('HTMLTableCellElement', {"":"height=,width="
});

$.$defineNativeClass('HTMLTableColElement', {"":"width="
});

$.$defineNativeClass('HTMLTableElement', {"":"width="
});

$.$defineNativeClass('HTMLTextAreaElement', {"":"type>,value="
});

$.$defineNativeClass('TextMetrics', {"":"width>"
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"":"id>,text=",
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"":"length>",
 start$1: function(index) {
  return this.start(index);
}
});

$.$defineNativeClass('Touch', {
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.target);
}
});

$.$defineNativeClass('TouchList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"":"src<"
});

$.$defineNativeClass('TreeWalker', {
 filter$1: function(arg0) {
  return this.filter.call$1(arg0);
}
});

$.$defineNativeClass('UIEvent', {"":"detail>"
});

$.$defineNativeClass('HTMLUListElement', {"":"type="
});

$.$defineNativeClass('Uint16Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', {"":"height=,width="
});

$.$defineNativeClass('WebGLActiveInfo', {"":"type>"
});

$.$defineNativeClass('WebKitNamedFlow', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($.convertDartToNative_SerializedScriptValue(message), messagePorts);
    return;
  }
  this._postMessage_2$1($.convertDartToNative_SerializedScriptValue(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message, $);
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"":"navigator>",
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.WorkerContextEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"":"userAgent>"
});

$.$defineNativeClass('XPathException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('ClientRectList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('EntryArray', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('IDBCursor', {"":"key>",
 update$1: function(value) {
  return this._update_1$1($.convertDartToNative_SerializedScriptValue(value));
},
 _update_1$1: function(value) {
  return this.update(value);
}
});

$.$defineNativeClass('IDBCursorWithValue', {"":"value>"
});

$.$defineNativeClass('IDBDatabase', {
 get$on: function() {
  return $.DatabaseEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBIndex', {
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$KeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKeyRange', {
 is$KeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($.convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($.convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value, $);
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.OpenDBRequestEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('IDBRequest', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
    return $.RequestEvents$(this);
  } else {
    return Object.prototype.get$on.call(this);
  }
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {
 get$on: function() {
  return $.TransactionEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.VersionChangeRequestEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('Worker', {
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('SVGAElement', {"":"target>"
});

$.$defineNativeClass('SVGAngle', {"":"value="
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"":"type>"
});

$.$defineNativeClass('SVGCursorElement', {"":"x>,y>"
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

$.$defineNativeClass('SVGFEBlendElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"":"type>,values>,height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFECompositeElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEDropShadowElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEFloodElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEImageElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEMergeElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEMorphologyElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEOffsetElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFEPointLightElement', {"":"x>,y>,z>"
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFESpotLightElement', {"":"x>,y>,z>"
});

$.$defineNativeClass('SVGFETileElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFETurbulenceElement', {"":"type>,height>,width>,x>,y>"
});

$.$defineNativeClass('SVGFilterElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGForeignObjectElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGGlyphRefElement', {"":"x>,y>"
});

$.$defineNativeClass('SVGImageElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGLength', {"":"value="
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGNumber', {"":"value="
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegArcRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"":"x>"
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"":"x>"
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"":"y>"
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"":"y>"
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"":"x>,y>"
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"":"x>,y>"
});

$.$defineNativeClass('SVGPatternElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGPoint', {"":"x>,y>"
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGRect', {"":"height=,width=,x>,y>"
});

$.$defineNativeClass('SVGRectElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGScriptElement', {"":"type="
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"":"type="
});

$.$defineNativeClass('SVGDocument', {
 $$dom_createEvent$1: function(eventType) {
  return this.createEvent(eventType);
}
});

$.$defineNativeClass('SVGElement', {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 get$children: function() {
  return $.FilteredElementList$(this);
},
 set$children: function(value) {
  var children, t1;
  children = this.get$children();
  t1 = $.getInterceptor$JSArray(children);
  t1.clear$0(children);
  t1.addAll$1(children, value);
},
 set$innerHtml: function(svg) {
  var container = $.Element_Element$tag("div");
  container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
  this.set$children($.index(container.get$children(), 0).get$children());
},
 get$$$dom_children: function() {
  throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
},
 click$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot invoke click SVG."));
},
 get$id: function() {
  return this.id;
}
});

$.$defineNativeClass('SVGException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGSVGElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGTextPositioningElement', {"":"x>,y>"
});

$.$defineNativeClass('SVGTransform', {"":"type>",
 setScale$2: function(sx, sy) {
  return this.setScale(sx,sy);
}
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 get$length: function() {
  return this.numberOfItems;
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {"":"height>,width>,x>,y>"
});

$.$defineNativeClass('SVGElementInstanceList', {
 get$length: function() {
  return this.length;
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 contains$1: function(element) {
  return $.Collections_contains(this, element);
},
 forEach$1: function(f) {
  return $.Collections_forEach(this, f);
},
 map$1: function(f) {
  return $.Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $.Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $.Collections_every(this, f);
},
 some$1: function(f) {
  return $.Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 set$length: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
},
 indexOf$2: function(element, start) {
  return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element, 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeAt$1: function(pos) {
  throw $.$$throw($.UnsupportedError$("Cannot removeAt on immutable List."));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $.Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', {"":"length>"
});

$.$defineNativeClass('AudioBufferSourceNode', {"":"buffer<",
 start$3: function(when, grainOffset, grainDuration) {
  var t1, t2;
  t1 = $ === grainOffset;
  if (t1)
    grainOffset = null;
  t1 = !t1;
  t2 = $ === grainDuration;
  if (t2)
    grainDuration = null;
  t2 = !t2;
  if (!!this.start)
    if (t2)
      this.start(when, grainOffset, grainDuration);
    else if (t1)
      this.start(when, grainOffset);
    else
      this.start(when);
  else if (t2)
    this.noteOn(when, grainOffset, grainDuration);
  else if (t1)
    this.noteOn(when, grainOffset);
  else
    this.noteOn(when);
},
 start$1: function(when) {
  return this.start$3(when, $, $);
}
});

$.$defineNativeClass('AudioContext', {"":"destination>",
 get$on: function() {
  return $.AudioContextEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
},
 createBufferSource$0: function() {
  return this.createBufferSource();
},
 decodeAudioData$3: function(audioData, successCallback, errorCallback) {
  return this.decodeAudioData(audioData,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 createGain$0: function() {
  if (this.createGain !== undefined)
    return this.createGain();
  else
    return this.createGainNode();
}
});

$.$defineNativeClass('AudioNode', {
 connect$3: function(destination, output, input) {
  return this.connect(destination,output,input);
}
});

$.$defineNativeClass('AudioParam', {"":"value="
});

$.$defineNativeClass('BiquadFilterNode', {"":"type="
});

$.$defineNativeClass('ConvolverNode', {"":"buffer<"
});

$.$defineNativeClass('DynamicsCompressorNode', {
 attack$1: function(arg0) {
  return this.attack.call$1(arg0);
}
});

$.$defineNativeClass('OscillatorNode', {"":"type=",
 start$1: function(when) {
  return this.start(when);
}
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
},
 on$2: function(arg0, arg1) {
  return this.get$on().call$2(arg0, arg1);
}
});

// 273 dynamic classes.
// 419 classes
// 37 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_TextPositioningElement = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement', v2_ComponentTransferFunctionElement = 'SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement', v3_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v4_SvgElement = [v1_TextPositioningElement, v2_ComponentTransferFunctionElement, 'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|'), v5_MouseEvent = 'MouseEvent|WheelEvent', v6_UIEvent = [v5_MouseEvent, 'UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent'].join('|'), v7_Element = [v3_MediaElement, v4_SvgElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|'), v8_CharacterData = 'CharacterData|Text|CDATASection|Comment', v9_Document = 'Document|HTMLDocument|SVGDocument', v10_DocumentFragment = 'DocumentFragment|ShadowRoot', v11_Node = [v7_Element, v8_CharacterData, v9_Document, v10_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v12_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v13_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v14_MediaStream = 'MediaStream|LocalMediaStream', v15_Request = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest';
  $.dynamicSetMetadata([['WorkerContext', v13_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue'], ['IDBRequest', v15_Request], ['AbstractWorker', v12_AbstractWorker], ['Uint8Array', v0_Uint8Array], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['Blob', 'Blob|File'], ['CharacterData', v8_CharacterData], ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'], ['Document', v9_Document], ['DocumentFragment', v10_DocumentFragment], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['SVGComponentTransferFunctionElement', v2_ComponentTransferFunctionElement], ['HTMLMediaElement', v3_MediaElement], ['SVGTextPositioningElement', v1_TextPositioningElement], ['SVGElement', v4_SvgElement], ['Element', v7_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['MouseEvent', v5_MouseEvent], ['UIEvent', v6_UIEvent], ['Event', [v6_UIEvent, 'Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent'].join('|')], ['Node', v11_Node], ['MediaStream', v14_MediaStream], ['EventTarget', [v11_Node, v12_AbstractWorker, v13_WorkerContext, v14_MediaStream, v15_Request, 'EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|IDBDatabase|IDBTransaction|SVGElementInstance|AudioContext'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['AudioNode', 'AudioNode|AnalyserNode|AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode|OscillatorNode|AudioDestinationNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode'], ['AudioParam', 'AudioParam|AudioGain'], ['NodeList', 'NodeList|RadioNodeList'], ['StyleSheet', 'StyleSheet|CSSStyleSheet']]);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=Game01.dart.js.map